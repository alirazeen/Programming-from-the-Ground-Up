# pgubook, IntroductionCh.xml
# Copyright (C) 2006 Zhang Le
# Zhang Le <robert.zhangle@gmail.com>, 2006.
msgid ""
msgstr ""
"Project-Id-Version: pbubook\n"
"POT-Creation-Date: 2006-05-15 16:01+0800\n"
"PO-Revision-Date: 2006-07-29 16:24+0800\n"
"Last-Translator: Zhang Le <robert.zhangle@gmail.com>\n"
"Language-Team: zh_CN <robert.zhangle@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Pootle 0.10beta3\n"

# type: Content of: <chapter><title>
#: ../../FirstProgsCh.xml:2
#, no-wrap
msgid "Your First Programs"
msgstr "你的第一个程序"

# type: Content of: <chapter><para>
#: ../../FirstProgsCh.xml:16
msgid ""
"In this chapter you will learn the process for writing and building Linux "
"assembly-language programs.  In addition, you will learn the structure of "
"assembly-language programs, and a few assembly-language commands.  As you go "
"through this chapter, you may want to refer also to <xref linkend="
"\"instructionsappendix\" /> and <xref linkend=\"gdbappendix\" />."
msgstr ""

# type: Content of: <chapter><para>
#: ../../FirstProgsCh.xml:25
msgid ""
"These programs may overwhelm you at first.  However, go through them with "
"diligence, read them and their explanations as many times as necessary, and "
"you will have a solid foundation of knowledge to build on.  Please tinker "
"around with the programs as much as you can.  Even if your tinkering does "
"not work, every failure will help you learn."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../FirstProgsCh.xml:33
#, no-wrap
msgid "Entering in the Program"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:36
msgid ""
"Okay, this first program is simple.  In fact, it's not going to do anything "
"but exit! It's short, but it shows some basics about assembly language and "
"Linux programming.  You need to enter the program in an editor exactly as "
"written, with the filename <filename>exit.s</filename>.  The program "
"follows.  Don't worry about not understanding it.  This section only deals "
"with typing it in and running it.  In <xref linkend=\"assemblyoutline\" /> "
"we will describe how it works."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:51
#, fuzzy
msgid "What you have typed in is called the <emphasis>source code<indexterm>"
msgstr "最后我们要介绍的是<emphasis>基址寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:51
#, no-wrap
msgid "source code"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:51
msgid ""
"</indexterm></emphasis>.  Source code is the human-readable form of a "
"program.  In order to transform it into a program that a computer can run, "
"we need to <emphasis>assemble<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:54
#, no-wrap
msgid "assemble"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:54
#, fuzzy
msgid "</indexterm></emphasis> and <emphasis>link<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:54 ../../FirstProgsCh.xml:82
#, no-wrap
msgid "link"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:54
#, fuzzy
msgid "</indexterm></emphasis> it."
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:58
msgid ""
"The first step is to <emphasis>assemble</emphasis> it.  Assembling is the "
"process that transforms what you typed into instructions for the machine.  "
"The machine itself only reads sets of numbers, but humans prefer words.  An "
"<emphasis>assembly language<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:61
#, fuzzy, no-wrap
msgid "assembly language"
msgstr "汇编语言"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:61
msgid ""
"</indexterm></emphasis> is a more human-readable form of the instructions a "
"computer understands.  Assembling transforms the human-readable file into a "
"machine-readable one.  To assembly the program type in the command"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:70
msgid "<literal>as</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:70
#, no-wrap
msgid "<literal>as</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:70
msgid ""
"</indexterm> is the command which runs the assembler, <filename>exit.s</"
"filename> is the source file<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:71
#, no-wrap
msgid "source file"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:71
msgid ""
"</indexterm>, and <literal>-o exit.o</literal> tells the assemble to put its "
"output in the file <filename>exit.o</filename>.  <filename>exit.o</filename> "
"is an <emphasis>object file<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:74
#, no-wrap
msgid "object file"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:74
msgid ""
"</indexterm></emphasis>.  An object file is code that is in the machine's "
"language, but has not been completely put together.  In most large programs, "
"you will have several source files, and you will convert each one into an "
"object file.  The <emphasis>linker</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:78
#, no-wrap
msgid "linker"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:78
msgid ""
"</indexterm> is the program that is responsible for putting the object files "
"together and adding information to it so that the kernel knows how to load "
"and run it.  In our case, we only have one object file, so the linker is "
"only adding the information to enable it to run.  To "
"<emphasis>link<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:82
msgid "</indexterm></emphasis> the file, enter the command"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:89
msgid "<literal>ld</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:89
#, no-wrap
msgid "ld"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:89
msgid ""
"</indexterm> is the command to run the linker, <filename>exit.o</filename> "
"is the object file we want to link, and <literal>-o exit</literal> instructs "
"the linker to output the new program into a file called <filename>exit</"
"filename>.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:93
msgid ""
"If you are new to Linux and <trademark class=\"registered\">UNIX</"
"trademark>, you may not be aware that files don't have to have extensions.  "
"In fact, while <trademark class=\"registered\">Windows</trademark> uses the "
"<literal>.exe</literal> extension to signify an executable program, UNIX "
"executables usually have no extension."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:96
msgid ""
"</footnote> If any of these commands reported errors, you have either "
"mistyped your program or the command.  After correcting the program, you "
"have to re-run all the commands.  <emphasis>You must always re-assemble and "
"re-link programs after you modify the source file for the changes to occur "
"in the program</emphasis>. You can run <filename>exit</filename> by typing "
"in the command"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:109
msgid "The <filename>./</filename><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:109
#, no-wrap
msgid "<filename>./</filename>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:109
msgid ""
"</indexterm> is used to tell the computer that the program isn't in one of "
"the normal program directories, but is the current directory "
"instead<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:111
msgid ""
"<filename>.</filename> refers to the current directory in Linux and UNIX "
"systems."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:112
msgid ""
"</footnote>.  You'll notice when you type this command, the only thing that "
"happens is that you'll go to the next line.  That's because this program "
"does nothing but exit.  However, immediately after you run the program, if "
"you type in <indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:118 ../../FirstProgsCh.xml:463
#, no-wrap
msgid "echo"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:118
#, fuzzy
msgid "</indexterm> <indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:119 ../../FirstProgsCh.xml:463
#, no-wrap
msgid "$?"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:119 ../../FirstProgsCh.xml:1132
#: ../../FirstProgsCh.xml:1144 ../../FirstProgsCh.xml:1164
#: ../../FirstProgsCh.xml:1175 ../../FirstProgsCh.xml:1189
#: ../../FirstProgsCh.xml:1206
#, no-wrap
msgid "</indexterm>"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:125
msgid ""
"It will say <literal>0</literal>.  What is happening is that every program "
"when it exits gives Linux an <emphasis>exit status code<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:126 ../../FirstProgsCh.xml:395
#: ../../FirstProgsCh.xml:753 ../../FirstProgsCh.xml:1062
#, no-wrap
msgid "exit status code"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:126
msgid ""
"</indexterm></emphasis>, which tells it if everything went all right.  If "
"everything was okay, it returns 0.  UNIX programs return numbers other than "
"zero to indicate failure or other errors, warnings, or statuses.  The "
"programmer determines what each number means.  You can view this code by "
"typing in <literal>echo $?</literal>.  In the following section we will look "
"at what each part of the code does."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:138
#, fuzzy, no-wrap
msgid "Outline of an Assembly Language Program"
msgstr "汇编语言"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:141
msgid ""
"Take a look at the program we just entered.  At the beginning there are lots "
"of lines that begin with hashes (<literal>#</literal>).  These are "
"<emphasis>comments<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:143
#, no-wrap
msgid "comments"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:143
msgid ""
"</indexterm></emphasis>.  Comments are not translated by the assembler.  "
"They are used only for the programmer to talk to anyone who looks at the "
"code in the future.  Most programs you write will be modified by others.  "
"Get into the habit of writing comments in your code that will help them "
"understand both why the program exists and how it works.  Always include the "
"following in your comments:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:154
msgid "The purpose of the code"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:155
msgid "An overview of the processing involved"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:157
msgid "Anything strange your program does and why it does it<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para><para>
#: ../../FirstProgsCh.xml:158
msgid ""
"You'll find that many programs end up doing things strange ways.  Usually "
"there is a reason for that, but, unfortunately, programmers never document "
"such things in their comments.  So, future programmers either have to learn "
"the reason the hard way by modifying the code and watching it break, or just "
"leaving it alone whether it is still needed or not.  You should "
"<emphasis>always</emphasis> document any strange behavior your program "
"performs.  Unfortunately, figuring out what is strange and what is "
"straightforward comes mostly with experience."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:164 ../../FirstProgsCh.xml:681
#: ../../FirstProgsCh.xml:881 ../../FirstProgsCh.xml:956
#: ../../FirstProgsCh.xml:1004
msgid "</footnote>"
msgstr "</footnote>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:169
msgid "After the comments, the next line says"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:175
msgid ""
"Anything starting with a period isn't directly translated into a machine "
"instruction.  Instead, it's an instruction to the assembler itself.  These "
"are called <emphasis>assembler directives<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:177
#, no-wrap
msgid "assembler directives"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:177
#, fuzzy
msgid "</indexterm></emphasis> or <emphasis>pseudo-operations<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:177
#, no-wrap
msgid "pseudo-operations"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:177
msgid ""
"</indexterm></emphasis> because they are handled by the assembler and are "
"not actually run by the computer.  The <literal>.section</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:178
#, no-wrap
msgid "<literal>.section</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:178
msgid ""
"</indexterm> command breaks your program up into sections.  This command "
"starts the data section<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:180 ../../FirstProgsCh.xml:637
#, fuzzy, no-wrap
msgid "data section"
msgstr "数据总线"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:180
msgid ""
"</indexterm>, where you list any memory storage you will need for data.  Our "
"program doesn't use any, so we don't need the section.  It's just here for "
"completeness.  Almost every program you write in the future will have data."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:187
msgid "Right after this you have"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:192
#, fuzzy
msgid "<indexterm>"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:192
#, no-wrap
msgid "<literal>.text</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:192
msgid ""
"</indexterm> which starts the text section.  The text section<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:194
#, no-wrap
msgid "text section"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:194
msgid "</indexterm> of a program is where the program instructions live."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:199
#, fuzzy
msgid "The next instruction is"
msgstr "指令指针"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:205
msgid "This instructs the assembler that <literal>_start</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:205 ../../FirstProgsCh.xml:223
#, no-wrap
msgid "<literal>_start</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:205
msgid ""
"</indexterm> is important to remember.  <literal>_start</literal> is a "
"<emphasis>symbol<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:206 ../../FirstProgsCh.xml:238
#, no-wrap
msgid "symbol"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:206
msgid ""
"</indexterm></emphasis>, which means that it is going to be replaced by "
"something else either during assembly or linking.  Symbols are generally "
"used to mark locations of programs or data, so you can refer to them by name "
"instead of by their location number.  Imagine if you had to refer to every "
"memory location by its address.  First of all, it would be very confusing "
"because you would have to memorize or look up the numeric memory address of "
"every piece of code or data.  In addition, every time you had to insert a "
"piece of data or code you would have to change all the addresses in your "
"program! Symbols are used so that the assembler and linker can take care of "
"keeping track of addresses, and you can concentrate on writing your program."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:221
msgid "<literal>.globl</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:221
#, no-wrap
msgid "<literal>.globl</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:221
msgid ""
"</indexterm> means that the assembler shouldn't discard this symbol after "
"assembly, because the linker will need it.  <literal>_start</"
"literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:223
msgid ""
"</indexterm> is a special symbol that always needs to be marked with "
"<literal>.globl</literal> because it marks the location of the start of the "
"program.  <emphasis>Without marking this location in this way, when the "
"computer loads your program it won't know where to begin running your "
"program</emphasis>."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:231
msgid "The next line"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:237
msgid ""
"<emphasis>defines</emphasis> the value of the <literal>_start</"
"literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para><primary>
#: ../../FirstProgsCh.xml:237 ../../FirstProgsCh.xml:745
#: ../../FirstProgsCh.xml:999
#, no-wrap
msgid "_start"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:237
#, fuzzy
msgid "</indexterm> label. A <emphasis>label<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:237 ../../FirstProgsCh.xml:648
#, no-wrap
msgid "labels"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:237
#, fuzzy
msgid "</indexterm></emphasis> is a symbol<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:238
msgid ""
"</indexterm> followed by a colon.  Labels define a symbol's value.  When the "
"assembler<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:240
#, no-wrap
msgid "assembler"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:240
msgid ""
"</indexterm> is assembling the program, it has to assign each data value and "
"instruction an address.  Labels tell the assembler to make the symbol's "
"value be wherever the next instruction or data element will be.  This way, "
"if the actual physical location of the data or instruction changes, you "
"don't have to rewrite any references to it - the symbol automatically gets "
"the new value."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:249
msgid ""
"Now we get into actual computer instructions.  The first such instruction is "
"this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:257
msgid ""
"When the program runs, this instruction transfers the number <literal>1</"
"literal> into the &eax; register.  In assembly language, many instructions "
"have <emphasis>operands</emphasis><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:259
#, no-wrap
msgid "operands"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:259
#, fuzzy
msgid "</indexterm>.  <literal>movl</literal><indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><para><primary>
#: ../../FirstProgsCh.xml:259 ../../FirstProgsCh.xml:815
#: ../../FirstProgsCh.xml:876 ../../FirstProgsCh.xml:880
#, no-wrap
msgid "movl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:259
msgid ""
"</indexterm> has two operands - the <emphasis>source</emphasis> and the "
"<emphasis>destination</emphasis>.  In this case, the source is the literal "
"number 1, and the destination is the &eax; register.  Operands can be "
"numbers, memory location references, or registers.  Different instructions "
"allow different types of operands.  See <xref linkend=\"instructionsappendix"
"\" /> for more information on which instructions take which kinds of "
"operands."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:269
msgid ""
"On most instructions which have two operands, the first one is the source "
"operand and the second one is the destination.  Note that in these cases, "
"the source operand is not modified at all.  Other instructions of this type "
"are, for example, <literal>addl</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:273
#, no-wrap
msgid "addl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:273
#, fuzzy
msgid "</indexterm>, <literal>subl</literal><indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:274
#, no-wrap
msgid "subl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:274
#, fuzzy
msgid "</indexterm>, and <literal>imull</literal><indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:275
#, no-wrap
msgid "imull"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:275
msgid ""
"</indexterm>.  These add/subtract/multiply the source operand from/to/by the "
"destination operand and and save the result in the destination operand.  "
"Other instructions may have an operand hardcoded in.  <literal>idivl</"
"literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:279
#, no-wrap
msgid "idivl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:279
msgid ""
"</indexterm>, for example, requires that the dividend be in &eax;, and &edx; "
"be zero, and the quotient is then transferred to &eax; and the remainder to "
"&edx;.  However, the divisor can be any register or memory location."
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:287
#, fuzzy
msgid ""
"On x86 processors, there are several general-purpose registers<indexterm>"
msgstr "通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:287
#, no-wrap
msgid "general-purpose registers"
msgstr "通用寄存器"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:287 ../../FirstProgsCh.xml:434
#, fuzzy
msgid "</indexterm><footnote>"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:287
msgid ""
"Note that on x86 processors, even the general-purpose registers have some "
"special purposes, or used to before it went 32-bit.  However, these are "
"general-purpose registers for most instructions.  Each of them has at least "
"one instruction where it is used in a special way.  However, for most of "
"them, those instructions aren't covered in this book."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:287
msgid "</footnote> (all of which can be used with <literal>movl</literal>):"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:292
msgid "&eax-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:293
msgid "&ebx-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:294
msgid "&ecx-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:295
msgid "&edx-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:296
msgid "&edi-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:297
msgid "&esi-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:301
#, fuzzy
msgid ""
"In addition to these general-purpose registers, there are also several "
"special-purpose registers<indexterm>"
msgstr ""
"除了位于处理器外部的内存之外，处理器本身还有一些特殊的高速记忆存储单元被称为"
"寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:302
#, no-wrap
msgid "special-purpose registers"
msgstr "专用寄存器"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:302
#, fuzzy
msgid "</indexterm>, including:"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:306
msgid "&ebp-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:307
msgid "&esp-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:308
msgid "&eip-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:309
msgid "&eflags-indexed;"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:313
msgid "We'll discuss these later, just be aware that they exist.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:314
msgid ""
"You may be wondering, <emphasis>why do all of these registers begin with the "
"letter <literal>e</literal>?</emphasis> The reason is that early generations "
"of x86 processors were 16 bits rather than 32 bits.  Therefore, the "
"registers were only half the length they are now.  In later generations of "
"x86 processors, the size of the registers doubled. They kept the old names "
"to refer to the first half of the register, and added an <literal>e</"
"literal> to refer to the extended versions of the register.  Usually you "
"will only use the extended versions.  Newer models also offer a 64-bit mode, "
"which doubles the size of these registers yet again and uses an <literal>r</"
"literal> prefix to indicate the larger registers (i.e.  &rax; is the 64-bit "
"version of &eax;).  However, these processors are not widely used, and are "
"not covered in this book."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:328
msgid ""
"</footnote> Some of these registers, like &eip-indexed; and &eflags-indexed; "
"can only be accessed through special instructions.  The others can be "
"accessed using the same instructions as general-purpose registers, but they "
"have special meanings, special uses, or are simply faster when used in a "
"specific way."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:336
msgid "So, the <literal>movl</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:336
#, no-wrap
msgid "<literal>movl</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:336
msgid ""
"</indexterm> instruction moves the number <literal>1</literal> into <literal>"
"%eax</literal>.  The dollar-sign in front of the one indicates that we want "
"to use immediate mode addressing<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:339 ../../FirstProgsCh.xml:1189
#, no-wrap
msgid "immediate mode addressing"
msgstr "立即数寻址模式"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:339
msgid ""
"</indexterm> (refer back to <xref linkend=\"dataaccessingmethods\" />).  "
"Without the dollar-sign it would do direct addressing<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:339 ../../FirstProgsCh.xml:1132
#, no-wrap
msgid "direct addressing mode"
msgstr "直接寻址模式"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:339
msgid ""
"</indexterm>, loading whatever number is at address <literal>1</literal>.  "
"We want the actual number <literal>1</literal> loaded in, so we have to use "
"immediate mode."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:346
msgid ""
"The reason we are moving the number 1 into &eax; is because we are preparing "
"to call the Linux Kernel. The number <literal>1</literal> is the number of "
"the <literal>exit</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:348
#, no-wrap
msgid "<literal>exit</literal>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:348
#, fuzzy
msgid "</indexterm> <emphasis>system call</emphasis> <indexterm>"
msgstr "在<emphasis>寄存器寻址模式</emphasis><indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:350 ../../FirstProgsCh.xml:1058
#, no-wrap
msgid "system call"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:350
msgid ""
"</indexterm>.  We will discuss system calls in more depth soon, but "
"basically they are requests for the operating system's help.  Normal "
"programs can't do everything.  Many operations such as calling other "
"programs, dealing with files, and exiting have to be handled by the "
"operating system through system calls<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><note><para><primary>
#: ../../FirstProgsCh.xml:355 ../../FirstProgsCh.xml:448
#, no-wrap
msgid "system calls"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:355
msgid ""
"</indexterm>.  When you make a system call, which we will do shortly, the "
"system call number has to be loaded into &eax-indexed; (for a complete "
"listing of system calls and their numbers, see <xref linkend=\"syscallap\" /"
">).  Depending on the system call, other registers may have to have values "
"in them as well.  Note that system calls is not the only use or even the "
"main use of registers.  It is just the one we are dealing with in this first "
"program.  Later programs will use registers for regular computation."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:368
msgid ""
"The operating system, however, usually needs more information than just "
"which call to make.  For example, when dealing with files, the operating "
"system needs to know which file you are dealing with, what data you want to "
"write, and other details.  The extra details, called "
"<emphasis>parameters<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:372
#, fuzzy, no-wrap
msgid "parameters"
msgstr "寄存器"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:372
msgid ""
"</indexterm></emphasis> are stored in other registers.  In the case of the "
"<literal>exit</literal> system call, the operating system requires a status "
"code be loaded in &ebx-indexed;.  This value is then returned to the "
"system.  This is the value you retrieved when you typed <literal>echo $?</"
"literal>.  So, we load &ebx; with <literal>0</literal> by typing the "
"following:"
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:385
#, fuzzy
msgid "Now, loading registers<indexterm>"
msgstr "通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:386 ../../FirstProgsCh.xml:781
#, no-wrap
msgid "registers"
msgstr "寄存器"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:386
msgid ""
"</indexterm> with these numbers doesn't do anything itself.  Registers are "
"used for all sorts of things besides system calls.  They are where all "
"program logic such as addition, subtraction, and comparisons take place.  "
"Linux simply requires that certain registers be loaded with certain "
"parameter values before making a system call.  &eax-indexed; is always "
"required to be loaded with the system call number.  For the other registers, "
"however, each system call has different requirements.  In the "
"<literal>exit<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:394
#, no-wrap
msgid "exit"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:394
msgid ""
"</indexterm></literal> system call, &ebx-indexed; is required to be loaded "
"with the exit status<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:395
msgid ""
"</indexterm>.  We will discuss different system calls as they are needed.  "
"For a list of common system calls and what is required to be in each "
"register, see <xref linkend=\"syscallap\" />"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:401
msgid "The next instruction is the \"magic\" one.  It looks like this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:409
#, fuzzy
msgid "The <literal>int<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:409
#, no-wrap
msgid "int"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:409
#, fuzzy
msgid "</indexterm></literal> stands for <emphasis>interrupt<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:410 ../../FirstProgsCh.xml:427
#, fuzzy, no-wrap
msgid "interrupts"
msgstr "指针"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:410
#, fuzzy
msgid "</indexterm></emphasis>.  The <literal>0x80<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:411
#, no-wrap
msgid "0x80"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:411
msgid "</indexterm></literal> is the interrupt number to use.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:413
msgid ""
"You may be wondering why it's <literal>0x80</literal> instead of just "
"<literal>80</literal>.  The reason is that the number is written in "
"hexadecimal<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para><primary>
#: ../../FirstProgsCh.xml:416
#, no-wrap
msgid "hexadecimal"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:416
msgid ""
"</indexterm>.  In hexadecimal, a single digit can hold 16 values instead of "
"the normal 10.  This is done by utilizing the letters <literal>a</literal> "
"through <literal>f</literal> in addition to the regular digits.  <literal>a</"
"literal> represents 10, <literal>b</literal> represents 11, and so on.  0x10 "
"represents the number 16, and so on.  This will be discussed more in depth "
"later, but just be aware that numbers starting with <literal>0x</literal> "
"are in hexadecimal.  Tacking on an <literal>H</literal> at the end is also "
"sometimes used instead, but we won't do that in this book.  For more "
"information about this, see <xref linkend=\"countingchapter\" />"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:425
#, fuzzy
msgid "</footnote> An <emphasis>interrupt<indexterm>"
msgstr "在<emphasis>索引寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:427
msgid ""
"</indexterm></emphasis> interrupts the normal program flow, and transfers "
"control from our program to Linux<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:428
#, no-wrap
msgid "Linux"
msgstr "Linux"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:428
msgid "</indexterm> so that it will do a system call.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:429
msgid ""
"Actually, the interrupt transfers control to whoever set up an "
"<emphasis>interrupt handler</emphasis> for the interrupt number.  In the "
"case of Linux, all of them are set to be handled by the Linux kernel."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:432
msgid ""
"</footnote>.  You can think of it as like signaling Batman(or Larry-"
"Boy<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:434
#, no-wrap
msgid "Larry-Boy"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:434
msgid ""
"If you don't watch Veggie Tales, you should.  Start with Dave and the Giant "
"Pickle."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:434
msgid ""
"</footnote>, if you prefer).  You need something done, you send the signal, "
"and then he comes to the rescue.  You don't care how he does his work - it's "
"more or less magic - and when he's done you're back in control.  In this "
"case, all we're doing is asking Linux to terminate the program, in which "
"case we won't be back in control.  If we didn't signal the interrupt, then "
"no system call would have been performed."
msgstr ""

# type: Content of: <chapter><sect1><note><title>
#: ../../FirstProgsCh.xml:445
#, no-wrap
msgid "Quick System Call Review"
msgstr ""

# type: Content of: <chapter><sect1><note><para>
#: ../../FirstProgsCh.xml:447
msgid ""
"To recap - Operating System features are accessed through system "
"calls<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><note><para>
#: ../../FirstProgsCh.xml:448
msgid ""
"</indexterm>.  These are invoked by setting up the registers in a special "
"way and issuing the instruction <literal>int $0x80</literal>.  Linux knows "
"which system call we want to access by what we stored in the &eax-indexed; "
"register.  Each system call has other requirements as to what needs to be "
"stored in the other registers.  System call number 1 is the <literal>exit</"
"literal> system call, which requires the status code<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><note><para><primary>
#: ../../FirstProgsCh.xml:454
#, no-wrap
msgid "status code"
msgstr ""

# type: Content of: <chapter><sect1><note><para>
#: ../../FirstProgsCh.xml:454
msgid "</indexterm> to be placed in &ebx-indexed;."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:460
msgid ""
"Now that you've assembled, linked, run, and examined the program, you should "
"make some basic edits.  Do things like change the number that is loaded into "
"<literal>%ebx</literal>, and watch it come out at the end with <literal>echo "
"$?<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:463
#, fuzzy
msgid "</indexterm><indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:463
msgid ""
"</indexterm></literal>.  Don't forget to assemble and link it again before "
"running it.  Add some comments.  Don't worry, the worse thing that would "
"happen is that the program won't assemble or link, or will freeze your "
"screen.  That's just part of learning!"
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../FirstProgsCh.xml:473
#, no-wrap
msgid "Planning the Program"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:476
msgid ""
"In our next program we will try to find the maximum of a list of numbers.  "
"Computers are very detail-oriented, so in order to write the program we will "
"have to have planned out a number of details.  These details include:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:482
msgid "Where will the original list of numbers be stored?"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:483
msgid "What procedure will we need to follow to find the maximum number?"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:484
msgid "How much storage do we need to carry out that procedure?"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:485
msgid ""
"Will all of the storage fit into registers, or do we need to use some memory "
"as well?"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:489
msgid ""
"You might not think that something as simple as finding the maximum number "
"from a list would take much planning.  You can usually tell people to find "
"the maximum number, and they can do so with little trouble.  However, our "
"minds are used to putting together complex tasks automatically.  Computers "
"need to be instructed through the process.  In addition, we can usually hold "
"any number of things in our mind without much trouble.  We usually don't "
"even realize we are doing it.  For example, if you scan a list of numbers "
"for the maximum, you will probably keep in mind both the highest number "
"you've seen so far, and where you are in the list.  While your mind does "
"this automatically, with computers you have to explicitly set up storage for "
"holding the current position on the list and the current maximum number.  "
"You also have other problems such as how to know when to stop.  When reading "
"a piece of paper, you can stop when you run out of numbers.  However, the "
"computer only contains numbers, so it has no idea when it has reached the "
"last of <emphasis>your</emphasis> numbers."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:507
msgid ""
"In computers, you have to plan every step of the way.  So, let's do a little "
"planning.  First of all, just for reference, let's name the address where "
"the list of numbers starts as <literal>data_items</literal>.  Let's say that "
"the last number in the list will be a zero, so we know where to stop.  We "
"also need a value to hold the current position in the list, a value to hold "
"the current list element being examined, and the current highest value on "
"the list.  Let's assign each of these a register:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:516
msgid "&edi; will hold the current position in the list."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:517
msgid "&ebx; will hold the current highest value in the list."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:518
msgid "&eax; will hold the current element being examined."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:522
msgid ""
"When we begin the program and look at the first item in the list, since we "
"haven't seen any other items, that item will automatically be the current "
"largest element in the list.  Also, we will set the current position in the "
"list to be zero - the first element.  From then, we will follow the "
"following steps:"
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:530
msgid ""
"Check the current list element (&eax;) to see if it's zero (the terminating "
"element)."
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:531
msgid "If it is zero, exit."
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:532
msgid "Increase the current position (&edi;)."
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:533
msgid ""
"Load the next value in the list into the current value register (&eax;).  "
"What addressing mode might we use here? Why?"
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:534
msgid ""
"Compare the current value (&eax;) with the current highest value (&ebx;)."
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:535
msgid ""
"If the current value is greater than the current highest value, replace the "
"current highest value with the current value."
msgstr ""

# type: Content of: <chapter><sect1><orderedlist><listitem><para>
#: ../../FirstProgsCh.xml:536
msgid "Repeat."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:540
msgid ""
"That is the procedure.  Many times in that procedure I made use of the word "
"\"if\".  These places are where decisions are to be made.  You see, the "
"computer doesn't follow the exact same sequence of instructions every time.  "
"Depending on which \"if\"s are correct, the computer may follow a different "
"set of instructions.  The second time through, it might not have the highest "
"value.  In that case, it will skip step 6, but come back to step 7.  In "
"every case except the last one, it will skip step 2.  In more complicated "
"programs, the skipping around increases dramatically."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:551
#, fuzzy
msgid ""
"These \"if\"s are a class of instructions called <emphasis>flow "
"control<indexterm>"
msgstr "存放在内存中的地址称为<emphasis>指针<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:551 ../../FirstProgsCh.xml:575
#: ../../FirstProgsCh.xml:928
#, no-wrap
msgid "flow control"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:551
msgid ""
"</indexterm></emphasis> instructions, because they tell the computer which "
"steps to follow and which paths to take.  In the previous program, we did "
"not have any flow control instructions, as there was only one possible path "
"to take - exit.  This program is much more dynamic in that it is directed by "
"data.  Depending on what data it receives, it will follow different "
"instruction paths."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:560
msgid ""
"In this program, this will be accomplished by two different instructions, "
"the conditional jump<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:562
#, no-wrap
msgid "conditional jump"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:562
#, fuzzy
msgid "</indexterm> and the unconditional jump<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:563
#, no-wrap
msgid "unconditional jump"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:563
msgid ""
"</indexterm>.  The conditional jump changes paths based on the results of a "
"previous comparison or calculation.  The unconditional jump just goes "
"directly to a different path no matter what.  The unconditional jump may "
"seem useless, but it is very necessary since all of the instructions will be "
"laid out on a line.  If a path needs to converge back to the main path, it "
"will have to do this by an unconditional jump.  We will see more of both of "
"these jumps in the next section."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:575
msgid "Another use of flow control<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:575
#, fuzzy
msgid "</indexterm> is in implementing loops<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:575
#, no-wrap
msgid "loops"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:575
msgid ""
"</indexterm>.  A loop is a piece of program code that is meant to be "
"repeated.  In our example, the first part of the program (setting the "
"current position to 0 and loading the current highest value with the current "
"value) was only done once, so it wasn't a loop.  However, the next part is "
"repeated over and over again for every number in the list.  It is only left "
"when we have come to the last element, indicated by a zero.  This is called "
"a <emphasis>loop</emphasis> because it occurs over and over again.  It is "
"implemented by doing unconditional jumps to the beginning of the loop at the "
"end of the loop, which causes it to start over.  However, you have to always "
"remember to have a conditional jump to exit the loop somewhere, or the loop "
"will continue forever! This condition is called an <emphasis>infinite "
"loop<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:586
#, no-wrap
msgid "infinite loop"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:586
msgid ""
"</indexterm></emphasis>.  If we accidentally left out step 1, 2, or 3, the "
"loop (and our program)  would never end."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:592
msgid ""
"In the next section, we will implement this program that we have planned.  "
"Program planning sounds complicated - and it is, to some degree.  When you "
"first start programming, it's often hard to convert our normal thought "
"process into a procedure that the computer can understand.  We often forget "
"the number of \"temporary storage locations\" that our minds are using to "
"process problems.  As you read and write programs, however, this will "
"eventually become very natural to you.  Just have patience."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../FirstProgsCh.xml:604
#, no-wrap
msgid "Finding a Maximum Value"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:607
msgid "Enter the following program as <filename>maximum.s</filename>:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:615
msgid "Now, assemble and link it with these commands:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:624
msgid "Now run it, and check its status."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:633
msgid ""
"You'll notice it returns the value <literal>222</literal>.  Let's take a "
"look at the program and what it does.  If you look in the comments, you'll "
"see that the program finds the maximum of a set of numbers (aren't comments "
"wonderful!).  You may also notice that in this program we actually have "
"something in the data section<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:637
msgid "</indexterm>.  These lines are the data section:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:647
msgid "Lets look at this.  <literal>data_items</literal> is a label<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:648
msgid ""
"</indexterm> that refers to the location that follows it.  Then, there is a "
"directive that starts with <literal>.long<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#: ../../FirstProgsCh.xml:650 ../../FirstProgsCh.xml:659
#: ../../FirstProgsCh.xml:686
#, no-wrap
msgid ".long"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:650
msgid ""
"</indexterm></literal>.  That causes the assembler to reserve memory for the "
"list of numbers that follow it.  <literal>data_items</literal> refers to the "
"location of the first one.  Because <literal>data_items</literal> is a "
"label, any time in our program where we need to refer to this address we can "
"use the <literal>data_items</literal> symbol, and the assembler will "
"substitute it with the address where the numbers start during assembly.  For "
"example, the instruction <literal>movl data_items, %eax</literal> would move "
"the value 3 into &eax;.  There are several different types of memory "
"locations other than <literal>.long<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:659
msgid ""
"</indexterm></literal> that can be reserved.  The main ones are as follows:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:666
#, fuzzy, no-wrap
msgid "<literal>.byte<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:666
#, fuzzy, no-wrap
msgid ".byte"
msgstr "字节"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:666 ../../FirstProgsCh.xml:674
#: ../../FirstProgsCh.xml:686 ../../FirstProgsCh.xml:695
#, fuzzy, no-wrap
msgid "</indexterm></literal>"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:668
msgid ""
"Bytes take up one storage location for each number.  They are limited to "
"numbers between 0 and 255."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:674
#, fuzzy, no-wrap
msgid "<literal>.int<indexterm>"
msgstr "Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#: ../../FirstProgsCh.xml:674
#, no-wrap
msgid ".int"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:676
msgid ""
"Ints (which differ from the <literal>int</literal> instruction) take up two "
"storage locations for each number.  These are limitted to numbers between 0 "
"and 65535.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><para>
#: ../../FirstProgsCh.xml:678
msgid ""
"Note that no numbers in assembly language (or any other computer language "
"I've seen) have commas embedded in them.  So, always write numbers like "
"<literal>65535</literal>, and never like <literal>65,535</literal>."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:686
#, fuzzy, no-wrap
msgid "<literal>.long<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:688
msgid ""
"Longs take up four storage locations.  This is the same amount of space the "
"registers use, which is why they are used in this program.  They can hold "
"numbers between 0 and 4294967295."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:695
#, fuzzy, no-wrap
msgid "<literal>.ascii<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#: ../../FirstProgsCh.xml:695
#, no-wrap
msgid ".ascii"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:697
msgid ""
"The <literal>.ascii</literal> directive is to enter in characters into "
"memory.  Characters each take up one storage location (they are converted "
"into bytes internally).  So, if you gave the directive <literal>.ascii "
"\"Hello there\\0\"</literal>, the assembler would reserve 12 storage "
"locations (bytes).  The first byte contains the numeric code for <literal>H</"
"literal>, the second byte contains the numeric code for <literal>e</"
"literal>, and so forth.  The last character is represented by <literal>\\0</"
"literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><primary>
#: ../../FirstProgsCh.xml:704
#, no-wrap
msgid "\\0"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:704
msgid ""
"</indexterm>, and it is the terminating character (it will never display, it "
"just tells other parts of the program that that's the end of the "
"characters).  Letters and numbers that start with a backslash represent "
"characters that are not typeable on the keyboard or easily viewable on the "
"screen.  For example, <literal>\\n</literal><indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><primary>
#: ../../FirstProgsCh.xml:710
#, no-wrap
msgid "\\n"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:710
#, fuzzy
msgid "</indexterm> refers to the \"newline\"<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><primary>
#: ../../FirstProgsCh.xml:710
#, no-wrap
msgid "newline"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:710
msgid ""
"</indexterm> character which causes the computer to start output on the next "
"line and <literal>\\t</literal> <indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><primary>
#: ../../FirstProgsCh.xml:711
#, no-wrap
msgid "\\t"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:711
#, fuzzy
msgid "</indexterm> refers to the \"tab\"<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><primary>
#: ../../FirstProgsCh.xml:711
#, no-wrap
msgid "tab"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:711
msgid ""
"</indexterm> character.  All of the letters in an <literal>.ascii</literal> "
"directive should be in quotes."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:718
msgid ""
"In our example, the assembler reserves 14 <literal>.long</literal>s, one "
"right after another.  Since each long takes up 4 bytes, that means that the "
"whole list takes up 56 bytes.  These are the numbers we will be searching "
"through to find the maximum.  <literal>data_items</literal> is used by the "
"assembler to refer to the address of the first of these values."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:726
msgid ""
"Take note that the last data item in the list is a zero.  I decided to use a "
"zero to tell my program that it has hit the end of the list.  I could have "
"done this other ways.  I could have had the size of the list hard-coded into "
"the program.  Also, I could have put the length of the list as the first "
"item, or in a separate location.  I also could have made a symbol which "
"marked the last location of the list items.  No matter how I do it, I must "
"have some method of determining the end of the list.  The computer knows "
"nothing - it can only do what it is told.  It's not going to stop processing "
"unless I give it some sort of signal.  Otherwise it would continue "
"processing past the end of the list into the data that follows it, and even "
"to locations where we haven't put any data."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:741
msgid "Notice that we don't have a <literal>.globl<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para><primary>
#: ../../FirstProgsCh.xml:742 ../../FirstProgsCh.xml:1000
#, no-wrap
msgid ".globl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:742
msgid ""
"</indexterm></literal> declaration for <literal>data_items</literal>.  This "
"is because we only refer to these locations within the program.  No other "
"file or program needs to know where they are located.  This is in contrast "
"to the <literal>_start<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:745
msgid ""
"</indexterm></literal> symbol, which Linux needs to know where it is so that "
"it knows where to begin the program's execution.  It's not an error to write "
"<literal>.globl data_items</literal>, it's just not necessary.  Anyway, play "
"around with this line and add your own numbers.  Even though they are "
"<literal>.long</literal>, the program will produce strange results if any "
"number is greater than 255, because that's the largest allowed exit "
"status<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:753
msgid ""
"</indexterm>.  Also notice that if you move the 0 to earlier in the list, "
"the rest get ignored.  <emphasis>Remember that any time you change the "
"source file, you have to re-assemble and re-link your program.  Do this now "
"and see the results</emphasis>."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:762
msgid ""
"All right, we've played with the data a little bit.  Now let's look at the "
"code.  In the comments you will notice that we've marked some "
"<emphasis>variables<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:764
#, no-wrap
msgid "variables"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:764
msgid ""
"</indexterm></emphasis> that we plan to use.  A variable is a dedicated "
"storage location used for a specific purpose, usually given a distinct name "
"by the programmer.  We talked about these in the previous section, but "
"didn't give them a name.  In this program, we have several variables:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:773
msgid "a variable for the current maximum number found"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:774
msgid ""
"a variable for which number of the list we are currently examining, called "
"the index"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:775
msgid "a variable holding the current number being examined"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:779
msgid ""
"In this case,we have few enough variables that we can hold them all in "
"registers.  In larger programs, you have to put them in memory, and then "
"move them to registers<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:781
msgid ""
"</indexterm> when you are ready to use them.  We will discuss how to do that "
"later.  When people start out programming, they usually underestimate the "
"number of variables they will need.  People are not used to having to think "
"through every detail of a process, and therefore leave out needed variables "
"in their first programming attempts."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:789
msgid ""
"In this program, we are using &ebx; as the location of the largest item "
"we've found.  &edi; is used as the <emphasis>index<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:791 ../../FirstProgsCh.xml:796
#: ../../FirstProgsCh.xml:1018
#, fuzzy, no-wrap
msgid "index"
msgstr "Linux"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:791
msgid ""
"</indexterm></emphasis> to the current data item we're looking at.  Now, "
"let's talk about what an index is.  When we read the information from "
"<literal>data_items</literal>, we will start with the first one (data item "
"number 0), then go to the second one (data item number 1), then the third "
"(data item number 2), and so on.  The data item number is the "
"<emphasis>index<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:796
msgid ""
"</indexterm></emphasis> of <literal>data_items</literal>.  You'll notice "
"that the first instruction we give to the computer is:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:806
msgid ""
"Since we are using <literal>%edi</literal> as our index, and we want to "
"start looking at the first item, we load <literal>%edi</literal> with 0.  "
"Now, the next instruction is tricky, but crucial to what we're doing.  It "
"says:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:817
msgid "Now to understand this line, you need to keep several things in mind:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:821
msgid ""
"<literal>data_items</literal> is the location number of the start of our "
"number list."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:822
msgid ""
"Each number is stored across 4 storage locations (because we declared it "
"using <literal>.long</literal>)"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:823
msgid "<literal>%edi</literal> is holding 0 at this point"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:827
msgid ""
"So, basically what this line does is say, \"start at the beginning of "
"data_items, and take the first item number (because <literal>%edi</literal> "
"is 0), and remember that each number takes up four storage locations.\" Then "
"it stores that number in <literal>%eax</literal>.  This is how you write "
"indexed addressing mode<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:831 ../../FirstProgsCh.xml:1144
#, no-wrap
msgid "indexed addressing mode"
msgstr "索引寻址模式"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:831
msgid ""
"</indexterm> instructions in assembly language.  The instruction in a "
"general form is this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:841
msgid ""
"In our case <literal>data_items</literal> was our beginning address, &edi; "
"was our index register<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:842 ../../FirstProgsCh.xml:1149
#, no-wrap
msgid "index register"
msgstr "索引寄存器"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:842
msgid ""
"</indexterm>, and 4 was our word size.  This topic is discussed further in "
"<xref linkend=\"movaddrmodes\" />."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:846
msgid ""
"If you look at the numbers in <literal>data_items</literal>, you will see "
"that the number 3 is now in &eax;.  If &edi; was set to 1, the number 67 "
"would be in &eax;, and if it was set to 2, the number 34 would be in &eax;, "
"and so forth.  Very strange things would happen if we used a number other "
"than 4 as the size of our storage locations.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:851
msgid ""
"The instruction doesn't really use 4 for the size of the storage locations, "
"although looking at it that way works for our purposes now.  It's actually "
"what's called a <emphasis>multiplier<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:854 ../../FirstProgsCh.xml:1149
#, no-wrap
msgid "multiplier"
msgstr "乘数"

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:854
msgid ""
"</indexterm></emphasis>.  basically, the way it works is that you start at "
"the location specified by <literal>data_items</literal>, then you add "
"<literal>%edi</literal>*4 storage locations, and retrieve the number there.  "
"Usually, you use the size of the numbers as your multiplier, but in some "
"circumstances you'll want to do other things."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:858
msgid ""
"</footnote> The way you write this is very awkward, but if you know what "
"each piece does, it's not too difficult.  For more information about this, "
"see <xref linkend=\"movaddrmodes\" />"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:865
msgid "Let's look at the next line:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:873
msgid ""
"We have the first item to look at stored in <literal>%eax</literal>.  Since "
"it is the first item, we know it's the biggest one we've looked at.  We "
"store it in <literal>%ebx</literal>, since that's where we are keeping the "
"largest number found.  Also, even though <literal>movl<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:876
msgid ""
"</indexterm></literal> stands for <emphasis>move</emphasis>, it actually "
"copies the value, so <literal>%eax</literal> and <literal>%ebx</literal> "
"both contain the starting value.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:879
msgid "Also, the <literal>l</literal> in <literal>movl<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:880
msgid ""
"</indexterm></literal> stands for <emphasis>move long</emphasis> since we "
"are moving a value that takes up four storage locations."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:885
#, fuzzy
msgid "Now we move into a <emphasis>loop<indexterm>"
msgstr "</indexterm> 是<emphasis>内核</emphasis>的名字。内核<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:885
#, no-wrap
msgid "loop"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:885
msgid ""
"</indexterm></emphasis>.  A loop is a segment of your program that might run "
"more than once.  We have marked the starting location of the loop in the "
"symbol <literal>start_loop</literal>.  The reason we are doing a loop is "
"because we don't know how many data items we have to process, but the "
"procedure will be the same no matter how many there are.  We don't want to "
"have to rewrite our program for every list length possible.  In fact, we "
"don't even want to have to write out code for a comparison for every list "
"item.  Therefore, we have a single section of code (a loop) that we execute "
"over and over again for every element in <literal>data_items</literal>."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:898
msgid ""
"In the previous section, we outlined what this loop needed to do.  Let's "
"review:"
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:903
msgid ""
"Check to see if the current value being looked at is zero.  If so, that "
"means we are at the end of our data and should exit the loop."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:904
msgid "We have to load the next value of our list."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:905
msgid ""
"We have to see if the next value is bigger than our current biggest value."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:906
msgid ""
"If it is, we have to copy it to the location we are holding the largest "
"value in."
msgstr ""

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:907
msgid "Now we need to go back to the beginning of the loop."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:911
msgid ""
"Okay, so now lets go to the code.  We have the beginning of the loop marked "
"with <literal>start_loop</literal>.  That is so we know where to go back to "
"at the end of our loop.  Then we have these instructions:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:922
#, fuzzy
msgid "The <literal>cmpl<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:922
#, no-wrap
msgid "cmpl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:922
msgid ""
"</indexterm></literal> instruction compares the two values.  Here, we are "
"comparing the number 0 to the number stored in &eax; This compare "
"instruction also affects a register not mentioned here, the &eflags-indexed; "
"register.  This is also known as the status register<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:925
#, fuzzy, no-wrap
msgid "status register"
msgstr "寄存器"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:925
msgid ""
"</indexterm>, and has many uses which we will discuss later.  Just be aware "
"that the result of the comparison is stored in the status register.  The "
"next line is a flow control<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:928
msgid ""
"</indexterm> instruction which says to <emphasis>jump</emphasis> to the "
"<literal>loop_exit</literal> location if the values that were just compared "
"are equal (that's what the <literal>e</literal> of <literal>je</literal> "
"means).  It uses the status register to hold the value of the last "
"comparison.  We used <literal>je</literal>, but there are many jump "
"statements that you can use:"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:941
#, no-wrap
msgid "<literal>je</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:943
msgid "Jump if the values were equal"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:948
#, no-wrap
msgid "<literal>jg</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:950
msgid "Jump if the second value was greater than the first value<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para><para>
#: ../../FirstProgsCh.xml:951
msgid ""
"notice that the comparison is to see if the <emphasis>second</emphasis> "
"value is greater than the first.  I would have thought it the other way "
"around.  You will find a lot of things like this when learning programming.  "
"It occurs because different things make sense to different people.  Anyway, "
"you'll just have to memorize such things and go on."
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:962
#, no-wrap
msgid "<literal>jge</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:964
msgid "Jump if the second value was greater than or equal to the first value"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:969
#, no-wrap
msgid "<literal>jl</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:971
msgid "Jump if the second value was less than the first value"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:976
#, no-wrap
msgid "<literal>jle</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:978
msgid "Jump if the second value was less than or equal to the first value"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:983
#, no-wrap
msgid "<literal>jmp</literal>"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:985
msgid ""
"Jump no matter what.  This does not need to be preceeded by a comparison."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:993
msgid ""
"The complete list is documented in <xref linkend=\"instructionsappendix\" /"
">.  In this case, we are jumping if &eax; holds the value of zero.  If so, "
"we are done and we go to <literal>loop_exit</literal>.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:996
msgid ""
"The names of these symbols can be anything you want them to be, as long as "
"they only contain letters and the underscore character(<literal>_</"
"literal>).  The only one that is forced is <literal>_start<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:999
msgid ""
"</indexterm></literal>, and possibly others that you declare with <literal>."
"globl<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:1000
msgid ""
"</indexterm></literal>.  However, if it is a symbol you define and only you "
"use, feel free to call it anything you want that is adequately descriptive "
"(remember that others will have to modify your code later, and will have to "
"figure out what your symbols mean)."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1008
msgid ""
"If the last loaded element was not zero, we go on to the next instructions:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1017
msgid ""
"If you remember from our previous discussion, &edi; contains the "
"index<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1018
msgid ""
"</indexterm> to our list of values in <literal>data_items</literal>.  "
"<literal>incl<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1020
#, no-wrap
msgid "incl"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1020
msgid ""
"</indexterm></literal> increments the value of &edi; by one.  Then the "
"<literal>movl</literal> is just like the one we did beforehand.  However, "
"since we already incremented &edi;, &eax; is getting the next value from the "
"list.  Now &eax; has the next value to be tested.  So, let's test it!"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1034
msgid ""
"Here we compare our current value, stored in &eax; to our biggest value so "
"far, stored in &ebx;.  If the current value is less or equal to our biggest "
"value so far, we don't care about it, so we just jump back to the beginning "
"of the loop.  Otherwise, we need to record that value as the largest one:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1047
msgid ""
"which moves the current value into &ebx;, which we are using to store the "
"current largest value, and starts the loop over again."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1053
msgid ""
"Okay, so the loop executes until it reaches a 0, when it jumps to "
"<literal>loop_exit</literal>.  This part of the program calls the Linux "
"kernel to exit.  If you remember from the last program, when you call the "
"operating system (remember it's like signaling Batman), you store the system "
"call<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1058
msgid ""
"</indexterm> number in &eax-indexed; (1 for the <literal>exit</literal> "
"call), and store the other values in the other registers.  The exit call "
"requires that we put our exit status<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1062
msgid ""
"</indexterm> in &ebx-indexed; We already have the exit status there since we "
"are using &ebx; as our largest number, so all we have to do is load &eax; "
"with the number one and call the kernel to exit. Like this:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1074
msgid ""
"Okay, that was a lot of work and explanation, especially for such a small "
"program.  But hey, you're learning a lot! Now, read through the whole "
"program again, paying special attention to the comments.  Make sure that you "
"understand what is going on at each line.  If you don't understand a line, "
"go back through this section and figure out what the line means."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1083
msgid ""
"You might also grab a piece of paper, and go through the program step-by-"
"step, recording every change to every register, so you can see more clearly "
"what is going on."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1093
#, fuzzy, no-wrap
msgid "Addressing Modes"
msgstr "寻址模式"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1096
msgid ""
"In <xref linkend=\"dataaccessingmethods\" /> we learned the different types "
"of addressing modes<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1097
#, no-wrap
msgid "addressing modes"
msgstr "寻址模式"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1097
msgid ""
"</indexterm> available for use in assembly language.  This section will deal "
"with how those addressing modes are represented in assembly language "
"instructions."
msgstr ""

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1103
#, fuzzy
msgid "The general form of memory address<indexterm>"
msgstr "通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1103
#, fuzzy, no-wrap
msgid "memory address"
msgstr "地址"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:1103
#, fuzzy
msgid "</indexterm> references is this:"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1111
msgid ""
"All of the fields are optional.  To calculate the address, simply perform "
"the following calculation:"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1120
msgid ""
"<literal>ADDRESS_OR_OFFSET</literal> and <literal>MULTIPLIER</literal> must "
"both be constants, while the other two must be registers.  If any of the "
"pieces is left out, it is just substituted with zero in the equation."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1126
msgid ""
"All of the addressing modes mentioned in <xref linkend=\"dataaccessingmethods"
"\" /> except immediate-mode can be represented in this fashion."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1132
#, fuzzy, no-wrap
msgid "direct addressing mode<indexterm>"
msgstr "直接寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1134
msgid ""
"This is done by only using the <literal>ADDRESS_OR_OFFSET</literal> "
"portion.  Example:"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1138
msgid ""
"This loads &eax; with the value at memory address <literal>ADDRESS</literal>."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1144
#, fuzzy, no-wrap
msgid "indexed addressing mode<indexterm>"
msgstr "索引寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1146
msgid ""
"This is done by using the <literal>ADDRESS_OR_OFFSET</literal> and the "
"<literal>%INDEX</literal> portion.  You can use any general-purpose register "
"as the index register.  You can also have a constant multiplier<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1149
#, fuzzy
msgid "</indexterm> of 1, 2, or 4 for the index register<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1149
msgid ""
"</indexterm>, to make it easier to index by bytes, double-bytes, and words.  "
"For example, let's say that we had a string of bytes as "
"<literal>string_start</literal> and wanted to access the third one (an index "
"of 2 since we start counting the index at zero), and &ecx; held the value "
"2.  If you wanted to load it into &eax; you could do the following:"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1158
msgid ""
"This starts at <literal>string_start</literal>, and adds <literal>1 * %ecx</"
"literal> to that address, and loads the value into &eax;."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1164
#, fuzzy, no-wrap
msgid "indirect addressing mode<indexterm>"
msgstr "间接寻址模式"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1164
#, no-wrap
msgid "indirect addressing mode"
msgstr "间接寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1166
msgid ""
"Indirect addressing mode loads a value from the address indicated by a "
"register.  For example, if &eax; held an address, we could move the value at "
"that address to &ebx; by doing the following:"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1175
#, fuzzy, no-wrap
msgid "base pointer addressing mode<indexterm>"
msgstr "基址寻址模式"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1175
#, no-wrap
msgid "base pointer addressing mode"
msgstr "基址寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1177
msgid ""
"Base-pointer addressing is similar to indirect addressing, except that it "
"adds a constant value to the address in the register.  For example, if you "
"have a record where the age value is 4 bytes into the record, and you have "
"the address of the record in &eax;, you can retrieve the age into &ebx; by "
"issuing the following instruction:"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1189
#, fuzzy, no-wrap
msgid "immediate mode<indexterm>"
msgstr "立即数寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1191
msgid ""
"Immediate mode is very simple.  It does not follow the general form we have "
"been using.  Immediate mode is used to load direct values into registers or "
"memory locations.  For example, if you wanted to load the number 12 into "
"&eax;, you would simply do the following:"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1198
msgid ""
"Notice that to indicate immediate mode, we used a dollar sign in front of "
"the number.  If we did not, it would be direct addressing mode, in which "
"case the value located at memory location 12 would be loaded into &eax; "
"rather than the number 12 itself."
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1206
#, fuzzy, no-wrap
msgid "register addressing mode<indexterm>"
msgstr "寄存器寻址模式"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1206
#, no-wrap
msgid "register addressing mode"
msgstr "寄存器寻址模式"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../FirstProgsCh.xml:1208
msgid ""
"Register mode simply moves data in or out of a register.  In all of our "
"examples, register addressing mode was used for the other operand."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1216
msgid ""
"These addressing modes are very important, as every memory access will use "
"one of these.  Every mode except immediate mode can be used as either the "
"source or destination operand<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1218
#, no-wrap
msgid "destination operand"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1218
#, fuzzy
msgid "</indexterm>.  Immediate mode can only be a source operand<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1218
#, no-wrap
msgid "source operand"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../FirstProgsCh.xml:1218
#, fuzzy
msgid "</indexterm>."
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1222
msgid ""
"In addition to these modes, there are also different instructions for "
"different sizes of values to move.  For example, we have been using "
"<literal>movl</literal> to move data a word<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1224
#, no-wrap
msgid "word"
msgstr "字"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1224
msgid ""
"</indexterm> at a time.  in many cases, you will only want to move data a "
"byte<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1225
#, no-wrap
msgid "bytes"
msgstr "字节"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1225
msgid ""
"</indexterm> at a time.  This is accomplished by the instruction "
"<literal>movb<indexterm>"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1226
#, no-wrap
msgid "movb"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1226
msgid ""
"</indexterm></literal>.  However, since the registers we have discussed are "
"word-sized and not byte-sized, you cannot use the full register.  Instead, "
"you have to use a portion of the register."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1232
msgid ""
"Take for instance &eax;.  If you only wanted to work with two bytes at a "
"time, you could just use &ax-indexed;.  &ax; is the least-significant half "
"(i.e. - the last part of the number) of the &eax; register, and is useful "
"when dealing with two-byte quantities.  &ax; is further divided up into &al-"
"indexed; and &ah-indexed;.  &al; is the least-significant byte of &ax;, and "
"&ah; is the most significant byte.<footnote>"
msgstr ""

# type: Content of: <chapter><sect1><para><para>
#: ../../FirstProgsCh.xml:1236
msgid ""
"When we talk about the most or least <emphasis>significant</emphasis> byte, "
"it may be a little confusing.  Let's take the number 5432.  In that number, "
"54 is the most significant half of that number and 32 is the least "
"significant half.  You can't quite divide it like that for registers, since "
"they operate on base 2 rather than base 10 numbers, but that's the basic "
"idea.  For more information on this topic, see <xref linkend="
"\"countingchapter\" />."
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1242
msgid ""
"</footnote> Loading a value into &eax; will wipe out whatever was in &al; "
"and &ah; (and also &ax;, since &ax; is made up of them).  Similarly, loading "
"a value into either &al; or &ah; will corrupt any value that was formerly in "
"&eax;.  Basically, it's wise to only use a register for either a byte or a "
"word, but never both at the same time."
msgstr ""

# type: Content of: <chapter><sect1><mediaobject><caption><para>
#: ../../FirstProgsCh.xml:1254
#, fuzzy
msgid "<emphasis>Layout of the &eax; register</emphasis>"
msgstr "<emphasis>内存空间就像邮箱</emphasis>"

# type: Content of: <chapter><sect1><para>
#: ../../FirstProgsCh.xml:1258
msgid ""
"For a more comprehensive list of instructions, see <xref linkend="
"\"instructionsappendix\" />."
msgstr ""

# type: Content of: <chapter><sect1><title>
#: ../../FirstProgsCh.xml:1264
#, no-wrap
msgid "Review"
msgstr "复习"

# type: Content of: <chapter><sect1><sect2><title>
#: ../../FirstProgsCh.xml:1267
#, no-wrap
msgid "Know the Concepts"
msgstr "理解概念"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1269
msgid ""
"What does it mean if a line in the program starts with the '#' character?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1270
msgid ""
"What is the difference between an assembly language file and an object code "
"file?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1271
#, fuzzy
msgid "What does the linker do?"
msgstr "指令指针是作什么用的？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1272
msgid "How do you check the result status code of the last program you ran?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1273
msgid ""
"What is the difference between <literal>movl $1, %eax</literal> and "
"<literal>movl 1, %eax</literal>?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1274
msgid "Which register holds the system call number?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1275
msgid "What are indexes used for?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1276
msgid "Why do indexes usually start at 0?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1277
msgid ""
"If I issued the command <literal>movl data_items(,%edi,4), %eax</literal> "
"and data_items was address 3634 and &edi; held the value 13, what address "
"would you be using to move into &eax;?"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../FirstProgsCh.xml:1278
#, fuzzy
msgid "List the general-purpose registers."
msgstr "通用寄存器"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1279
msgid ""
"What is the difference between <literal>movl</literal> and <literal>movb</"
"literal>?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1280
msgid "What is flow control?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1281
#, fuzzy
msgid "What does a conditional jump do?"
msgstr "指令指针是作什么用的？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1282
msgid "What things do you have to plan for when writing a program?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1283
msgid ""
"Go through every instruction and list what addressing mode is being used for "
"each operand."
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../FirstProgsCh.xml:1289
#, no-wrap
msgid "Use the Concepts"
msgstr "运用概念"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1292
msgid "Modify the first program to return the value 3."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1293
msgid ""
"Modify the <literal>maximum</literal> program to find the minimum instead."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1294
msgid ""
"Modify the <literal>maximum</literal> program to use the number 255 to end "
"the list rather than the number 0"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1295
msgid ""
"Modify the <literal>maximum</literal> program to use an ending address "
"rather than the number 0 to know when to stop."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1296
msgid ""
"Modify the <literal>maximum</literal> program to use a length count rather "
"than the number 0 to know when to stop."
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1297
msgid ""
"What would the instruction <literal>movl _start, %eax</literal> do? Be "
"specific, based on your knowledge of both addressing modes and the meaning "
"of <literal>_start</literal>.  How would this differ from the instruction "
"<literal>movl $_start, %eax</literal>?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><title>
#: ../../FirstProgsCh.xml:1303
#, no-wrap
msgid "Going Further"
msgstr "更上层楼"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1306
msgid ""
"Modify the first program to leave off the <literal>int</literal> instruction "
"line. Assemble, link, and execute the new program.  What error message do "
"you get.  Why do you think this might be?"
msgstr ""

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#: ../../FirstProgsCh.xml:1307
msgid ""
"So far, we have discussed three approaches to finding the end of the list - "
"using a special number, using the ending address, and using the length "
"count.  Which approach do you think is best? Why? Which approach would you "
"use if you knew that the list was sorted? Why?"
msgstr ""

# type: Content of: <chapter><title>
#~ msgid "Computer Architecture"
#~ msgstr "计算机架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "Before learning how to program, you need to first understand how a "
#~ "computer interprets programs.  You don't need a degree in electrical "
#~ "engineering, but you need to understand some basics."
#~ msgstr ""
#~ "在学习如何编程之前，你需要首先懂得计算机如何解释程序。你不需要获得电子工程"
#~ "的学位，但是你要懂得一些基本的知识。"

# type: Content of: <chapter><para><primary>
#~ msgid "computer architecture"
#~ msgstr "计算机架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm> is based off of an architecture called the Von Neumann "
#~ "architecture<indexterm>"
#~ msgstr "</indexterm>是基于冯诺依曼架构的<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Von Neumann architecture"
#~ msgstr "冯诺依曼架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm>, named after its creator.  The Von Neumann architecture "
#~ "divides the computer up into two main parts - the CPU<indexterm>"
#~ msgstr ""
#~ "</indexterm>，该架构以它的创建者的名字而命名。冯诺依曼架构把计算机分成两个"
#~ "主要部分——CPU<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "CPU"
#~ msgstr "CPU"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm> (for Central Processing Unit) and the memory.  This "
#~ "architecture is used in all modern computers, including personal "
#~ "computers, supercomputers, mainframes, and even cell phones."
#~ msgstr ""
#~ "</indexterm>（Central Processing Unit）和内存。所有现代计算使用的都是这种"
#~ "架构，包括个人计算机、超级计算机、大型计算机，甚至手机。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Structure of Computer Memory"
#~ msgstr "计算机内存的结构"

# type: Content of: <chapter><sect1><para>
#~ msgid "To understand how the computer views memory<indexterm>"
#~ msgstr "如果要理解计算机查看内存<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "memory"
#~ msgstr "内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, imagine your local post office.  They usually have a room "
#~ "filled with PO Boxes.  These boxes are similar to computer memory in that "
#~ "each are numbered sequences of fixed-size storage locations.  For "
#~ "example, if you have 256 megabytes of computer memory, that means that "
#~ "your computer contains roughly 256 million fixed-size storage locations.  "
#~ "Or, to use our analogy, 256 million PO Boxes.  Each location has a "
#~ "number, and each location has the same, fixed-length size.  The "
#~ "difference between a PO Box and computer memory is that you can store all "
#~ "different kinds of things in a PO Box, but you can only store a single "
#~ "number in a computer memory storage location."
#~ msgstr ""
#~ "</indexterm>的方式，我们可以拿你当地的邮局来做个比喻。他们通常有个房间装满"
#~ "了邮箱。这些邮箱和计算机内存类似，每一个都是有编号的固定大小的存储位置。例"
#~ "如，如果你有 256 兆大小容量的内存，这就意味着你的计算机大概有 256 兆个固定"
#~ "大小的存储空间。在邮局的例子里，就是 256 兆个邮箱。每一个存储空间都有一个"
#~ "编号，每一个存储空间都有同样的长度固定的容量。邮局邮箱和计算机内存之间的不"
#~ "同在于，你可以在一个邮箱里面存放任何东西，但是在内存的一个存储空间里你只能"
#~ "存储一个数。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "You may wonder why a computer is organized this way.  It is because it is "
#~ "simple to implement.  If the computer were composed of a lot of "
#~ "differently-sized locations, or if you could store different kinds of "
#~ "data in them, it would be difficult and expensive to implement."
#~ msgstr ""
#~ "你也许想知道为什么计算机会采取这种组织形式。这是因为这种方式易于实现。如果"
#~ "计算机由很多大小不同的存储空间组成，或者你可以在里面存储各种不同类型的数"
#~ "据，那么实现起来将会很困难且要花费很大代价。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is used for a number of different things.  All of the "
#~ "results of any calculations are stored in memory.  In fact, everything "
#~ "that is \"stored\" is stored in memory.  Think of your computer at home, "
#~ "and imagine what all is stored in your computer's memory."
#~ msgstr ""
#~ "</indexterm>可以用来做很多不同的事情。所有的计算结果都存储在内存里面。实际"
#~ "上，一切已被存储的东西都被存储在内存中。想一下你家里的电脑，想像一下所有存"
#~ "储在内存中的东西。"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The location of your cursor on the screen"
#~ msgstr "屏幕上光标的位置"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The size of each window on the screen"
#~ msgstr "屏幕上每一个窗口的大小"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The shape of each letter of each font being used"
#~ msgstr "正在使用的每个字体的每个字母形状"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The layout of all of the controls on each window"
#~ msgstr "每一个窗口上所有控件的布局"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The graphics for all of the toolbar icons"
#~ msgstr "所有工具栏图标的图形"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The text for each error message and dialog box"
#~ msgstr "每一个错误信息和对话框的文本"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The list goes on and on..."
#~ msgstr "还有很多很多……"

# type: Content of: <chapter><sect1><para>
#~ msgid "In addition to all of this, the Von Neumann architecture<indexterm>"
#~ msgstr "除了这些以外，冯·诺依曼架构<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> specifies that not only computer data should live in memory, "
#~ "but the programs that control the computer's operation should live there, "
#~ "too.  In fact, in a computer, there is no difference between a program "
#~ "and a program's data except how it is used by the computer.  They are "
#~ "both stored and accessed the same way."
#~ msgstr ""
#~ "</indexterm>还规定了不仅计算机数据应该放在内存里面，而且控制计算机运行的程"
#~ "序也应该放在那儿。实际上，在计算机里，程序的指令和一个程序的数据没有不同，"
#~ "只是计算机利用它们的方式不一样。他们的存储方式和访问方式都是一样的。"

# type: Content of: <chapter><sect1><title>
#~ msgid "The CPU"
#~ msgstr "CPU"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "So how does the computer function? Obviously, simply storing data doesn't "
#~ "do much help - you need to be able to access, manipulate, and move it.  "
#~ "That's where the CPU<indexterm>"
#~ msgstr ""
#~ "那么计算机是如何工作的呢？显然，仅仅能存储数据没有太大的帮助——你必须能够访"
#~ "问、操作和移动他们。那么这就是 CPU<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The CPU reads in instructions from memory one at a time and executes "
#~ "them.  This is known as the <emphasis>fetch-execute cycle</"
#~ "emphasis><indexterm>"
#~ msgstr ""
#~ "CPU 每一次从内存中读取一条指令并执行它，这也被称作<emphasis>读取－执行周期"
#~ "</emphasis><indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "fetch-execute cycle"
#~ msgstr "读取－执行周期"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  The CPU contains the following elements to accomplish this:"
#~ msgstr "</indexterm>。为实现这个过程，CPU 包含下面的部分："

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "instruction decoder"
#~ msgstr "指令解码器"

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#~ msgid "Arithmetic and logic unit<indexterm>"
#~ msgstr "算术和逻辑单元<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "arithmetic and logic unit"
#~ msgstr "算术和逻辑单元"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The <emphasis>program counter</emphasis> is used to tell the computer "
#~ "where to fetch the next instruction from.  We mentioned earlier that "
#~ "there is no difference between the way data and programs are stored, they "
#~ "are just interpreted differently by the CPU.  The program counter holds "
#~ "the memory address of the next instruction to be executed.  The CPU "
#~ "begins by looking at the program counter, and fetching whatever number is "
#~ "stored in memory at the location specified.  It is then passed on to the "
#~ "<emphasis>instruction decoder</emphasis><indexterm>"
#~ msgstr ""
#~ "<emphasis>程序计数器</emphasis>用来告诉计算机去哪里获得下一条指令。我们前"
#~ "面已经说过数据和程序指令的存取方式没有区别，仅仅是 CPU 解释他们的方式不"
#~ "同。程序计数器保存着下一条将要执行的指令的内存地址。 CPU 从查看程序计数器"
#~ "开始，获得其所指定的地址上存放的数，然后交给<emphasis>指令解码器</"
#~ "emphasis><indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> which figures out what the instruction means.  This includes "
#~ "what process needs to take place (addition, subtraction, multiplication, "
#~ "data movement, etc.) and what memory locations are going to be involved "
#~ "in this process.  Computer instructions usually consist of both the "
#~ "actual instruction and the list of memory locations that are used to "
#~ "carry it out."
#~ msgstr ""
#~ "</indexterm>，由后者来解释指令的含义。这包括需要发生什么样的操作（加法、减"
#~ "法、乘法、数据移动等等）和在这个过程中将会被用到的内存地址，计算机指令通常"
#~ "由实际的指令和完成这个指令所要用到的内存地址组成。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> to fetch the memory locations to be used in the "
#~ "calculation.  The data bus is the connection between the CPU and memory.  "
#~ "It is the actual wire that connects them.  If you look at the motherboard "
#~ "of the computer, the wires that go out from the memory are your data bus."
#~ msgstr ""
#~ "</indexterm>来获得存放于内存中的数据并用于计算。数据总线用来连接 CPU 和内"
#~ "存。它是连接它们的实际电路线。如果你注意看计算机主板，从内存出去的电线就是"
#~ "数据总线。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  There are two kinds of registers - <emphasis>general "
#~ "registers</emphasis> and <emphasis>special-purpose registers</emphasis>.  "
#~ "General-purpose registers<indexterm>"
#~ msgstr ""
#~ "</indexterm>。寄存器有两种——<emphasis>通用寄存器</emphasis>和<emphasis>专"
#~ "用寄存器</emphasis>。通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> are where the main action happens.  Addition, subtraction, "
#~ "multiplication, comparisions, and other operations generally use general-"
#~ "purpose registers for processing.  However, computers have very few "
#~ "general-purpose registers.  Most information is stored in main memory, "
#~ "brought in to the registers for processing, and then put back into memory "
#~ "when the processing is completed.  <emphasis>special-purpose "
#~ "registers<indexterm>"
#~ msgstr ""
#~ "</indexterm>是主要的操作发生的地方。加法、减法、乘法、比较和其它运算通常都"
#~ "使用通用寄存器来处理。但是，计算机中只有很少量的通用寄存器。大部分信息是存"
#~ "储在内存中的，需要处理的时候才放到寄存器中，当处理完成以后再放回到内存中。"
#~ "<emphasis>专用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> are registers which have very specific purposes.  "
#~ "We will discuss these as we come to them."
#~ msgstr ""
#~ "</indexterm></emphasis>是用于特殊目的的寄存器。我们将会在碰到它们的时候再"
#~ "作讨论。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Now that the CPU has retrieved all of the data it needs, it passes on the "
#~ "data and the decoded instruction to the <emphasis>arithmetic and logic "
#~ "unit<indexterm>"
#~ msgstr ""
#~ "CPU 在获取了所有需要的数据之后，它就会把数据和解码后的指令传递给<emphasis>"
#~ "算术和逻辑单元<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> for further processing.  Here the instruction is "
#~ "actually executed.  After the results of the computation have been "
#~ "calculated, the results are then placed on the data bus<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>作进一步的处理。在这里，指令才真正的被执行。当计算"
#~ "结果算出来后，CPU 会根据指令所指定的把结果放到数据总线<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> and sent to the appropriate location in memory or in a "
#~ "register, as specified by the instruction."
#~ msgstr "</indexterm>上并送到正确的内存地址上或者某个寄存器里。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This is a very simplified explanation.  Processors have advanced quite a "
#~ "bit in recent years, and are now much more complex.  Although the basic "
#~ "operation is still the same, it is complicated by the use of cache "
#~ "hierarchies<indexterm>"
#~ msgstr ""
#~ "这是一个非常简单的解释。在最近几年里，处理器获得比较大的发展，也更加复杂"
#~ "了。尽管最基本的操作是一样的，但是包括 cache 分层结构<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "cache hierarchies"
#~ msgstr "cache 分层结构"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid ""
#~ "superscalar\n"
#~ "processors"
#~ msgstr "超标量结构处理器"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "pipelining"
#~ msgstr "流水线"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "branch prediction"
#~ msgstr "分支预测"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "out-of-order execution"
#~ msgstr "乱序执行"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "microcode translation"
#~ msgstr "微码翻译"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "coprocessors"
#~ msgstr "协处理器"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, and other optimizations.  Don't worry if you don't know "
#~ "what those words mean, you can just use them as Internet search terms if "
#~ "you want to learn more about the CPU."
#~ msgstr ""
#~ "</indexterm>在内的一些优化方案已经使得处理器变的更加复杂。不用为不知道这些"
#~ "术语的含义而担心，如果你想学习更多有关 CPU 的知识，你可以用它们作为关键字"
#~ "在互联网上搜索一下。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Some Terms"
#~ msgstr "一些术语"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "computer memory"
#~ msgstr "计算机内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is a numbered sequence of fixed-size storage locations.  The "
#~ "number attached to each storage location is called its "
#~ "<emphasis>address<indexterm>"
#~ msgstr ""
#~ "</indexterm>是一系列编了号的固定大小的存储空间。每一个存储空间的编号称为该"
#~ "存储空间的<emphasis>地址<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  The size of a single storage location is called "
#~ "a <emphasis>byte</emphasis>.  On x86 processors, a byte<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>。单个存储空间的大小称为<emphasis>字节</emphasis>。"
#~ "在 x86 处理器上，一个字节<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid "</indexterm> is a number between 0 and 255."
#~ msgstr "</indexterm>是一个 0 到 255 之间的数。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "You may be wondering how computers can display and use text, graphics, "
#~ "and even large numbers when all they can do is store numbers between 0 "
#~ "and 255.  First of all, specialized hardware like graphics cards have "
#~ "special interpretations of each number.  When displaying to the screen, "
#~ "the computer uses ASCII<indexterm>"
#~ msgstr ""
#~ "你也许想知道为什么计算机只能存储 0 到 255 之间的数，但却可以显示和使用文"
#~ "本、图像和更大的数。首先，像显卡这样的专门硬件对每一个数都有特殊的解释。当"
#~ "这些数要显示在屏幕上的时候，计算机使用 ASCII<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "ASCII"
#~ msgstr "ASCII"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> code tables to translate the numbers you are sending it into "
#~ "letters to display on the screen, with each number translating to exactly "
#~ "one letter or numeral.<footnote>"
#~ msgstr ""
#~ "</indexterm> 码表来把你传递给他的数翻译成要显示在屏幕上的字符，每一个数只"
#~ "被翻译为一个字母或者阿拉伯数字。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "With the advent of international character sets and Unicode, this is not "
#~ "entirely true anymore.  However, for the purposes of keeping this simple "
#~ "for beginners, we will use the assumption that one number translates "
#~ "directly to one character.  For more information, see <xref linkend="
#~ "\"asciilisting\" />."
#~ msgstr ""
#~ "随着国际字符集和 Unicode 的出现，事实已经不再是这样。但是为了让初学者容易"
#~ "理解，我们这里假设一个数字会被直接翻译为一个字符。请参阅<xref linkend="
#~ "\"asciilisting\" />以获得更多的信息。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> For example, the capital letter A is represented by the "
#~ "number 65.  The numeral 1 is represented by the number 49.  So, to print "
#~ "out \"HELLO\", you would actually give the computer the sequence of "
#~ "numbers 72, 69, 76, 76, 79.  To print out the number 100, you would give "
#~ "the computer the sequence of numbers 49, 48, 48.  A list of ASCII "
#~ "characters and their numeric codes is found in <xref linkend="
#~ "\"asciilisting\" />."
#~ msgstr ""
#~ "</footnote>例如，大写字母 A 用 65 来表示，数字 1 用 49 来表示，因此，如果"
#~ "要显示出“HELLO”，你应该给出 72，69，76，76，79 这样一串数；如果要显示"
#~ "出“100”，你应该给出 49，48，48 这样一串数。ASCII 字符和其对应的数可以在"
#~ "<xref linkend=\"asciilisting\" /> 中找到。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "In addition to using numbers to represent ASCII characters, you as the "
#~ "programmer get to make the numbers mean anything you want them to, as "
#~ "well.  For example, if I am running a store, I would use a number to "
#~ "represent each item I was selling.  Each number would be linked to a "
#~ "series of other numbers which would be the ASCII<indexterm>"
#~ msgstr ""
#~ "除了使用数来表示 ASCII 字符以外，作为一个程序员的你，也用数来表示任何你想"
#~ "表示的东西。例如，如果我经营一个商场，我会用数来表示每一件我卖的商品。每一"
#~ "个数可能关联到一系列其它的数，其中可能包括商品扫描入仓时我想要显示的 "
#~ "ASCII <indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> codes for what I wanted to display when the items were "
#~ "scanned in.  I would have more numbers for the price, how many I have in "
#~ "inventory, and so on."
#~ msgstr "</indexterm> 码。我会用更多的数来表示价钱、库存量等等。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "So what about if we need numbers larger than 255? We can simply use a "
#~ "combination of bytes to represent larger numbers.  Two bytes can be used "
#~ "to represent any number between 0 and 65535.  Four bytes can be used to "
#~ "represent any number between 0 and 4294967295.  Now, it is quite "
#~ "difficult to write programs to stick bytes together to increase the size "
#~ "of your numbers, and requires a bit of math.  Luckily, the computer will "
#~ "do it for us for numbers up to 4 bytes long.  In fact, four-byte numbers "
#~ "are what we will work with by default."
#~ msgstr ""
#~ "如果我们需要大于 255 的数该怎么办？我们可以简单的将多个字节合并来表示更大"
#~ "的数字。两个字节可以用来表示从 0 到 65536 之间的任何数字。四个字节可以用来"
#~ "表示从 0 到 4294967295 之间的任何数字。现在，写程序来把字节合并以增大数字"
#~ "所表示的范围很困难，这需要一些数学运算。幸运的是，如果数不超过 4 个字节"
#~ "长，那么计算机可以帮我们来解决。实际上，我们编程时默认处理的都是 4 个字节"
#~ "的数。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "We mentioned earlier that in addition to the regular memory that the "
#~ "computer has, it also has special-purpose storage locations called "
#~ "<emphasis>registers<indexterm>"
#~ msgstr ""
#~ "我们早些时候提到计算机除了有常规内存以外，它还有被称为<emphasis>寄存器"
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  Registers are what the computer uses for "
#~ "computation.  Think of a register as a place on your desk - it holds "
#~ "things you are currently working on.  You may have lots of information "
#~ "tucked away in folders and drawers, but the stuff you are working on "
#~ "right now is on the desk.  Registers keep the contents of numbers that "
#~ "you are currently manipulating."
#~ msgstr ""
#~ "</indexterm></emphasis>的特殊存储空间。寄存器是计算机用来计算的。把寄存器"
#~ "想像成你的书桌上的一块地方——它存放着你当前的工作内容。你也许还有很多信息放"
#~ "在文件夹和抽屉里面，但是你正在工作的内容是放在桌子上的。寄存器保存着你当前"
#~ "正在操作的数的内容。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "On the computers we are using, registers are each four bytes long.  The "
#~ "size of a typical register is called a computer's "
#~ "<emphasis>word<indexterm>"
#~ msgstr ""
#~ "我们使用的计算机上面，每个寄存器都是四字节长度。一个典型寄存器的长度称为计"
#~ "算机的<emphasis>字<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> size.  x86 processors have four-byte words.  This "
#~ "means that it is most natural on these computers to do computations four "
#~ "bytes at a time.<footnote>"
#~ msgstr ""
#~ "</indexterm></emphasis>长。x86 处理器字长是4。这意味着在这种计算机上做四字"
#~ "节的计算是最本能的。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "Previous incarnations of x86 processors only had two-byte words.  "
#~ "Therefore, most other literature dealing with x86 processors refers to "
#~ "two-byte entities as words for historical reasons, and therefore refer to "
#~ "four-byte entities as double-words.  We are using the term "
#~ "<emphasis>word</emphasis> to mean the normal register size of a computer, "
#~ "which in this case is four bytes.  More information is available in <xref "
#~ "linkend=\"instructionsappendix\" />,"
#~ msgstr ""
#~ "以前的 x86 处理器的实现的字长是 2。因为这一历史原因，其他多数讲述 x86 处理"
#~ "器的著作都称两字节的组合为字，并且称四字节的组合为双字。我们使用<emphasis>"
#~ "字</emphasis>这个术语来指一个计算机的正常寄存器大小，在我们的例子里就是四"
#~ "字节。更多信息请看<xref linkend=\"instructionsappendix\" />。"

# type: Content of: <chapter><sect1><para>
#~ msgid "</footnote> This gives us roughly 4 billion values."
#~ msgstr "</footnote> 4个字节能表示大约40亿个不同的值。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Addresses are also four bytes (1 word) long, and therefore also fit into "
#~ "a register.  x86 processors can access up to 4294967296 bytes if enough "
#~ "memory is installed.  Notice that this means that we can store addresses "
#~ "the same way we store any other number.  In fact, the computer can't tell "
#~ "the difference between a value that is an address, a value that is a "
#~ "number, a value that is an ASCII code, or a value that you have decided "
#~ "to use for another purpose.  A number becomes an ASCII code when you "
#~ "attempt to display it.  A number becomes an address when you try to look "
#~ "up the byte it points to.  Take a moment to think about this, because it "
#~ "is crucial to understanding how computer programs work."
#~ msgstr ""
#~ "地址也是四字节（一个字）长，因此也可以放入到一个寄存器中。如果有足够的内"
#~ "存，x86 处理器可以访问 4294967296 个字节。注意这意味这我们可以像存储其他数"
#~ "字一样来存储地址。实际上，计算机不能分辨一个值到底是一个地址，还是一个数"
#~ "字，还是一个 ASCII 码，还是有其它的用途。当你显示它的时候，这个数字就是一"
#~ "个 ASCII 码；当你要查看它指向的某个字节时，这个数字就是一个地址。花一点时"
#~ "间想清楚这些东西，因为这对理解计算机编程如何工作很重要。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, because instead of having a regular value in "
#~ "them, they point you to a different location in memory."
#~ msgstr ""
#~ "</indexterm></emphasis>，因为该位置存放的不是一个常规数值，而是另外一个内"
#~ "存位置的地址。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "As we've mentioned, computer instructions are also stored in memory.  In "
#~ "fact, they are stored exactly the same way that other data is stored.  "
#~ "The only way the computer knows that a memory location is an instruction "
#~ "is that a special-purpose register<indexterm>"
#~ msgstr ""
#~ "如同我们已经提到的，计算机指令也存放在内存中。实际上，他们和数据的存放方式"
#~ "是一样的。计算机知道一个内存位置存放的是一条指令的唯一方法是通过一个专用寄"
#~ "存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "special-purpose register"
#~ msgstr "专用寄存器"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> points to them at one point or another.  If the instruction "
#~ "pointer points to a memory word, it is loaded as an instruction.  Other "
#~ "than that, the computer has no way of knowing the difference between "
#~ "programs and other types of data.<footnote>"
#~ msgstr ""
#~ "</indexterm>。它所指向的就是指令。如果指令指针指向一个内存字，那么它将作为"
#~ "一条指令被加载。除此之外，计算机无从知晓计算机指令和其他类型的数据的区别。"
#~ "<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "Note that here we are talking about general computer theory.  Some "
#~ "processors and operating systems actually mark the regions of memory that "
#~ "can be executed with a special marker that indicates this."
#~ msgstr ""
#~ "注意这里我们讨论的是一般的计算机理论。有些处理器和操作系统会用一个特殊标记"
#~ "来标记出可以执行的内存区域。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Interpreting Memory"
#~ msgstr "解释内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Computers are very exact.  Because they are exact, programmers have to be "
#~ "equally exact.  A computer has no idea what your program is supposed to "
#~ "do.  Therefore, it will only do exactly what you tell it to do.  If you "
#~ "accidentally print out a regular number instead of the ASCII codes that "
#~ "make up the number's digits, the computer will let you - and you will "
#~ "wind up with jibberish on your screen (it will try to look up what your "
#~ "number represents in ASCII and print that).  If you tell the computer to "
#~ "start executing instructions at a location containing data instead of "
#~ "program instructions, who knows how the computer will interpret that - "
#~ "but it will certainly try.  The computer will execute your instructions "
#~ "in the exact order you specify, even if it doesn't make sense."
#~ msgstr ""
#~ "计算机是非常精确的。正因为它很精确，程序员也必须同等精确。计算机根本不知道"
#~ "你编制的程序想要做什么。因此，你要它做什么，计算机就会严格按照你的要求去做"
#~ "什么。如果你不小心打印出一个常规数值，而不是能够显示数字的ASCII码，计算机"
#~ "会允许你这样做。但是屏幕上就会出现一堆乱码（计算机会查找你的数在 ASCII 码"
#~ "中表示什么字符，然后把它打印出来）。如果你让计算机从一个含有数据而不是计算"
#~ "机指令的内存地址开始执行指令，没人知道计算机将会怎样解释，但它肯定会去尝"
#~ "试。计算机会严格按照你规定的顺序来执行指令，即使看起来没有任何意义。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The point is, the computer will do exactly what you tell it, no matter "
#~ "how little sense it makes.  Therefore, as a programmer, you need to know "
#~ "exactly how you have your data arranged in memory.  Remember, computers "
#~ "can only store numbers, so letters, pictures, music, web pages, "
#~ "documents, and anything else are just long sequences of numbers in the "
#~ "computer, which particular programs know how to interpret."
#~ msgstr ""
#~ "总之，计算机一点不差地做你要它做地事情，不管事情是否有意义。因此，作为一个"
#~ "程序员，你需要清楚地知道程序数据在内存中是如何放置的。记住，计算机只能存储"
#~ "数，所以字母、图片、音乐、网页、文档和所以其他的东西在计算机里都是长串的数"
#~ "而已，专门处理它们的应用程序知道如何解释它们。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "For example, say that you wanted to store customer information in "
#~ "memory.  One way to do so would be to set a maximum size for the "
#~ "customer's name and address - say 50 ASCII characters for each, which "
#~ "would be 50 bytes for each.  Then, after that, have a number for the "
#~ "customer's age and their customer id.  In this case, you would have a "
#~ "block of memory that would look like this:"
#~ msgstr ""
#~ "例如，假如你想把顾客信息存储在内存中。一种方法是为顾客的名字和地址的大小设"
#~ "定一个最大值——假定每个都是 50 个 ASCII 字符，也就是每个都有 50 个字节。然"
#~ "后，各用一个数字来表示顾客的年龄和他们的顾客号。这样，你就可以得到一个跟下"
#~ "面类似的内存块："

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This way, given the address of a customer record, you know where the rest "
#~ "of the data lies.  However, it does limit the customer's name and address "
#~ "to only 50 ASCII characters each."
#~ msgstr ""
#~ "这样，给定一个顾客记录的地址，你就可以知道这个顾客记录里其他数据存放的位"
#~ "置。但是，这种方法把顾客的名字和地址限制在了 50 个 ASCII 字符之内。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "What if we didn't want to specify a limit? Another way to do this would "
#~ "be to have in our record pointers<indexterm>"
#~ msgstr ""
#~ "如果我们不想要这种限制，该如何办呢？另外一种办法就是在我们的记录里面用指针"
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> to this information.  For example, instead of the customer's "
#~ "name, we would have a pointer to their name.  In this case, the memory "
#~ "would look like this:"
#~ msgstr ""
#~ "</indexterm>指向这些信息。例如，我们在记录中包含一个指向顾客名字的指针，而"
#~ "不是顾客的名字本身，这样，内存看起来就会象这样："

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The actual name and address would be stored elsewhere in memory.  This "
#~ "way, it is easy to tell where each part of the data is from the start of "
#~ "the record, without explicitly limitting the size of the name and "
#~ "address.  If the length of the fields within our records could change, we "
#~ "would have no idea where the next field started.  Because records would "
#~ "be different sizes, it would also be hard to find where the next record "
#~ "began.  Therefore, almost all records are of fixed lengths.  Variable-"
#~ "length data is usually stored separately from the rest of the record."
#~ msgstr ""
#~ "实际的名字和地址可能存储在内存的其他位置。这样在得知记录的起始地址之后就可"
#~ "以知道记录里每一部分存放在什么位置，不必再明确地限制名字和地址地大小了。如"
#~ "果记录中某个字段的长度不是固定的，我们就无法知道下一个字段从哪里开始了。这"
#~ "样记录的长度可能不尽相同，因此找到下一条记录的起始也是很困难的，所以，几乎"
#~ "所有的记录都是固定长度的。变长的数据通常是放在别处存储的，不和记录在一起。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Data Accessing Methods"
#~ msgstr "数据访问方式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Processors have a number of different ways of accessing data, known as "
#~ "addressing modes<indexterm>"
#~ msgstr "处理器有很多种访问数据的方式，也叫做寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, in which the data to access is embedded in the "
#~ "instruction itself.  For example, if we want to initialize a register to "
#~ "0, instead of giving the computer an address to read the 0 from, we would "
#~ "specify immediate mode, and give it the number 0."
#~ msgstr ""
#~ "</indexterm></emphasis>，要访问的数据就在指令中，例如，如果我们想初始化一"
#~ "个寄存器为 0，我们指定立即数模式方式，直接赋 0 给它，而不是让计算机从某个"
#~ "地址上读取 0。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, the instruction contains a register to access, rather than "
#~ "a memory location.  The rest of the modes will deal with addresses."
#~ msgstr ""
#~ "</indexterm>中，指令包含一个要访问的寄存器，而不是一个内存地址。其余的寻址"
#~ "模式都是和地址有关的。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>direct addressing mode<indexterm>"
#~ msgstr "在<emphasis>直接寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains the memory address to "
#~ "access.  For example, I could say, please load this register with the "
#~ "data at address 2002.  The computer would go directly to byte number 2002 "
#~ "and copy the contents into our register."
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个用于访问的内存地址。比如，我可以"
#~ "说，请把 2002 这个地址上的数据放到这个寄存器里。然后计算机就可以直接去找编"
#~ "号为 2002 的字节，并把里面的内容拷贝到我们指定的寄存器里。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains a memory address to "
#~ "access, and also specifies an <emphasis>index register<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个要访问的内存地址，并指定一个"
#~ "<emphasis>索引寄存器<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> to offset that address.  For example, we could "
#~ "specify address 2002 and an index register.  If the index register "
#~ "contains the number 4, the actual address the data is loaded from would "
#~ "be 2006.  This way, if you have a set of numbers starting at location "
#~ "2002, you can cycle between each of them using an index register.  On x86 "
#~ "processors, you can also specify a <emphasis>multiplier<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>，其内容要与内存地址相加以获得最终访问地址。例如，"
#~ "我们可以指定地址 2002 和一个索引寄存器。如果索引寄存器包含数字 4，那么实际"
#~ "要访问的并从中读取数据的地址为 2006。这样，如果从地址 2002 开始有一个数"
#~ "组，你可以使用索引寄存器来逐个访问数组里的每个数。在 x86 处理器上，你也可"
#~ "以为索引寄存器指定一个<emphasis>乘数<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> for the index.  This allows you to access memory "
#~ "a byte at a time or a word at a time (4 bytes).  If you are accessing an "
#~ "entire word, your index will need to be multiplied by 4 to get the exact "
#~ "location of the fourth element from your address.  For example, if you "
#~ "wanted to access the fourth byte from location 2002, you would load your "
#~ "index register with 3 (remember, we start counting at 0) and set the "
#~ "multiplier to 1 since you are going a byte at a time.  This would get you "
#~ "location 2005.  However, if you wanted to access the fourth word from "
#~ "location 2002, you would load your index register with 3 and set the "
#~ "multiplier to 4.  This would load from location 2014 - the fourth word.  "
#~ "Take the time to calculate these yourself to make sure you understand how "
#~ "it works."
#~ msgstr ""
#~ "</indexterm></emphasis>。这样你就可以逐字节或者字（4 个字节）的来访问内"
#~ "存。如果你要访问整个字，你的索引寄存器就要乘以 4。例如，如果你想要访问从地"
#~ "址 2002 开始的第四个字节，你需要将索引寄存器赋值为 3（记住我们从 0 开始计"
#~ "数），将乘数设为 1 因为你每次只前进一个字节。这样你就可以访问到地址 2005。"
#~ "不过，如果你想要访问从地址 2002 开始的第四个字，则应该将索引寄存器赋值为 "
#~ "3 并把乘数设为 4。这样 CPU 就可以从地址 2014 访问到第四个字。花些时间计算"
#~ "一下前面的地址，这样才能确保你理解他们的含义。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>indirect addressing mode<indexterm>"
#~ msgstr "在<emphasis>间接寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains a register that "
#~ "contains a pointer to where the data should be accessed.  For example, if "
#~ "we used indirect addressing mode and specified the &eax; register, and "
#~ "the &eax; register contained the value 4, whatever value was at memory "
#~ "location 4 would be used.  In direct addressing, we would just load the "
#~ "value 4, but in indirect addressing, we use 4 as the address to use to "
#~ "find the data we want."
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个寄存器，寄存器里是一个指针，这个指"
#~ "针指向要被访问的数据。例如，如果我们使用间接寻址模式并指定 &eax; 寄存器，"
#~ "且 &eax; 寄存器包含的数值为 4，那么内存地址 4 上存放的数就会被用到，不管什"
#~ "么数。在直接寻址中，我们仅仅载入数值 4，而在间接寻址中，我们载入的的是地"
#~ "址 4 上存放的数值。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  This is similar to indirect addressing, but you "
#~ "also include a number called the <emphasis>offset<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>。这种方式和间接寻址类似，但是你需要在指令中包含一"
#~ "个数，叫做<emphasis>偏移<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "offset"
#~ msgstr "偏移"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> to add to the register's value before using it "
#~ "for lookup.  We will use this mode quite a bit in this book."
#~ msgstr ""
#~ "</indexterm></emphasis>，把这个数与寄存器的值相加，然后用所得的结果去寻"
#~ "址。在这本书中，我们会相当多地使用到这种寻址模式。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "In <xref linkend=\"interpretingmemory\" /> we discussed having a "
#~ "structure in memory holding customer information.  Let's say we wanted to "
#~ "access the customer's age, which was the eighth byte of the data, and we "
#~ "had the address of the start of the structure in a register.  We could "
#~ "use base pointer addressing and specify the register as the base pointer, "
#~ "and 8 as our offset.  This is a lot like indexed addressing, with the "
#~ "difference that the offset is constant and the pointer is held in a "
#~ "register, and in indexed addressing the offset is in a register and the "
#~ "pointer is constant."
#~ msgstr ""
#~ "在<xref linkend=\"interpretingmemory\" />中，我们讨论了一个保存顾客信息的"
#~ "内存里的数据结构。假设我们想要访问一个顾客的年龄，我们已经知道它是这个结构"
#~ "的第 8 个字节，还知道在某个寄存器里有这个结构的起始地址。我们可以使用基址"
#~ "寻址模式来访问它并指定该寄存器为基址指针，8 作为偏移。这很像索引寻址模式。"
#~ "区别在于基址寻址模式中的偏移是常量，指针存放在寄存器中，索引寻址模式中偏移"
#~ "在寄存器中，指针是常量。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "There are other forms of addressing, but these are the most important "
#~ "ones."
#~ msgstr "此外还有一些其他的寻址模式，不过最重要的就是这些了。"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "Describe the fetch-execute cycle."
#~ msgstr "描述抓取－执行周期"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What is a register? How would computation be more difficult without "
#~ "registers?"
#~ msgstr "什么是寄存器？没有寄存器的情况下，计算为什么会变得困难？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "How do you represent numbers larger than 255?"
#~ msgstr "如何表示一个大于255的数？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "How big are the registers on the machines we will be using?"
#~ msgstr "我们正在使用的计算机上的寄存器的大小是多少？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "How does a computer know how to interpret a given byte or set of bytes of "
#~ "memory?"
#~ msgstr "计算机如何知道怎样去解释给定的一个字节或者一组字节的内存内容？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "What are the addressing modes and what are they used for?"
#~ msgstr "什么是寻址模式？它们是用来做什么的？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What data would you use in an employee record? How would you lay it out "
#~ "in memory?"
#~ msgstr "在一个雇员的记录里，你会使用些什么数据？你如何在内存中放置它们？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "If I had the pointer to the beginning of the employee record above, and "
#~ "wanted to access a particular piece of data inside of it, what addressing "
#~ "mode would I use?"
#~ msgstr ""
#~ "如果我有雇员记录开始位置的指针，我想要去访问里面的一个特定数据，我应该用什"
#~ "么样的寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In base pointer addressing mode, if you have a register holding the value "
#~ "3122, and an offset of 20, what address would you be trying to access?"
#~ msgstr ""
#~ "在基址寻址模式中，如果你有一个寄存器，它的值为 3122，并且一个偏移为 20，那"
#~ "么你将要访问的地址会是多少？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 6512, the index "
#~ "register has a 5, and the multiplier is 4, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 6512，索引寄存器是 5，乘数是 4，你将会访问到"
#~ "什么地址？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 123472, the index "
#~ "register has a 0, and the multiplier is 4, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 123472，索引寄存器是 0，乘数是 4，你将会访问"
#~ "到什么地址？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 9123478, the index "
#~ "register has a 20, and the multiplier is 1, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 9123478，索引寄存器是 20，乘数是 1，你将会访"
#~ "问到什么地址？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What are the minimum number of addressing modes needed for computation?"
#~ msgstr "计算需要至少多少种寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "Why include addressing modes that aren't strictly needed?"
#~ msgstr "为什么需要一些不常用的寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "Research and then describe how pipelining (or one of the other "
#~ "complicating factors) affects the fetch-execute cycle."
#~ msgstr ""
#~ "研究并描述流水线（或者其他任意一个的复杂化因素）是怎样影响抓取－执行周期"
#~ "的。"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "Research and then describe the tradeoffs between fixed-length "
#~ "instructions and variable-length instructions."
#~ msgstr "研究并描述固定长度指令和变长指令各自的好坏。"

# type: Content of: <chapter><title>
#~ msgid "Introduction"
#~ msgstr "介绍"

# type: Content of: <chapter><sect1><title>
#~ msgid "Welcome to Programming"
#~ msgstr "欢迎来到编程世界"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>programming.  I enjoy the challenge to not only make a "
#~ "working program, but to do so with style.  Programming is like poetry.  "
#~ "It conveys a message, not only to the computer, but to those who modify "
#~ "and use your program.  With a program, you build your own world with your "
#~ "own rules.  You create your world according to your conception of both "
#~ "the problem and the solution.  Masterful programmers create worlds with "
#~ "programs that are clear and succinct, much like a poem or essay."
#~ msgstr ""
#~ "</indexterm>编程。我追求的不仅仅是解决问题，解决的方式还要够酷。我很喜欢这"
#~ "样做带来的挑战。编程就像写诗。它传递着信息，不仅仅给电脑，还给那些修改和使"
#~ "用程序的人们。利用一个程序，你可以用你自己的规则组建你自己的世界，根据你对"
#~ "你的问题和解决方案的理解来创建你的世界。老道的程序员使用简单和紧凑的程序来"
#~ "创建世界，很像是诗和散文。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "One of the greatest programmers, Donald Knuth, describes programming not "
#~ "as telling a computer how to do something, but telling a person how they "
#~ "would instruct a computer to do something.  The point is that programs "
#~ "are meant to be read by people, not just computers.  Your programs will "
#~ "be modified and updated by others long after you move on to other "
#~ "projects.  Thus, programming is not as much about communicating to a "
#~ "computer as it is communicating to those who come after you.  A "
#~ "programmer is a problem-solver, a poet, and an instructor all at once.  "
#~ "Your goal is to solve the problem at hand, doing so with balance and "
#~ "taste, and teach your solution to future programmers.  I hope that this "
#~ "book can teach at least some of the poetry and magic that makes computing "
#~ "exciting."
#~ msgstr ""
#~ "世界上最伟大的程序员之一，高德纳（Donald Knuth）说，编程不是告诉计算机怎样"
#~ "去做一件事情，而是告诉一个人他们是如何让计算机去做一件事情。他的观点是，程"
#~ "序是被人来读的，而不仅仅是计算机。当你离开一个项目而去做其它的项目很久以"
#~ "后，你的程序也许还将会被其他人修改和升级。因此，编程不仅仅是和计算机进行交"
#~ "流，而且还要和那些接你班的人进行交流。一个程序员，既是一个问题的解决者，也"
#~ "是一个诗人，还是一个讲师。你的目标是解决眼前的问题，考虑周全而风格独具，并"
#~ "且能让未来的程序员学会你的解决方案。我希望这本书至少可以教给读者一些让计算"
#~ "兴奋的诗和魔法。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Most introductory books on programming frustrate me to no end.  At the "
#~ "end of them you can still ask \"how does the computer really work?\" and "
#~ "not have a good answer.  They tend to pass over topics that are difficult "
#~ "even though they are important.  I will take you through the difficult "
#~ "issues because that is the only way to move on to masterful programming.  "
#~ "My goal is to take you from knowing nothing about programming to "
#~ "understanding how to think, write, and learn like a programmer.  You "
#~ "won't know everything, but you will have a background for how everything "
#~ "fits together.  At the end of this book, you should be able to do the "
#~ "following:"
#~ msgstr ""
#~ "大多数关于编程书籍让我感到非常沮丧。看完这些书，你恐怕仍然会问：“计算机到"
#~ "底是怎样工作的？”，而且得不到一个完美的答案。这些书通常会略过那些有难度的"
#~ "但是很重要的话题。我将会让你了解这些有难度的问题，因为他们才是通向大师级编"
#~ "程的唯一道路。我的目标是让你从对编程一无所知到理解如何像一个程序员那样去思"
#~ "考、编写和学习。你不用记住每件事情的细枝末节，但是你将从头到尾的掌握所有的"
#~ "相关背景。在看完这本书后，你应该能够做到以下的事情："

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Understand how a program works and interacts with other programs"
#~ msgstr "理解一个程序是如何工作的，以及如何和其它程序交流"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Read other people's programs and learn how they work"
#~ msgstr "阅读其他人的程序和了解它们如何工作"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Learn new programming languages quickly"
#~ msgstr "迅速掌握新的编程语言"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Learn advanced concepts in computer science quickly"
#~ msgstr "迅速掌握计算机科学中的高级概念"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "I will not teach you everything.  Computer science is a massive field, "
#~ "especially when you combine the theory with the practice of computer "
#~ "programming.  However, I will attempt to get you started on the "
#~ "foundations so you can easily go wherever you want afterwards."
#~ msgstr ""
#~ "我不可能教会你每一件事情。计算机科学是一门研究领域广泛的学科，尤其是当你把"
#~ "理论和计算机编程实践结合在一起的时候。但是，我会尝试让你打好基础，这样你可"
#~ "以轻松去到以后你想要去的地方。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "There is somewhat of a chicken and egg problem in teaching programming, "
#~ "especially assembly language.  There is a lot to learn - it is almost too "
#~ "much to learn almost at all at once.  However, each piece depends on all "
#~ "the others, which makes learning it a piece at a time difficult.  "
#~ "Therefore, you must be patient with yourself and the computer while "
#~ "learning to program.  If you don't understand something the first time, "
#~ "reread it.  If you still don't understand it, it is sometimes best to "
#~ "take it by faith and come back to it later.  Often after more exposure to "
#~ "programming the ideas will make more sense.  Don't get discouraged.  It's "
#~ "a long climb, but very worthwhile."
#~ msgstr ""
#~ "在教编程，特别是教汇编语言编程的时候，存在着一个类似先有鸡还是先有蛋的问"
#~ "题。有很多东西需要学习－多到以至于不可能一下子全学到手，只能一次学一点。但"
#~ "是每一点知识却又要依靠其他所有的知识，这样就使得学习起来非常困难。因此当学"
#~ "习编程的时候，你必须对你和计算机有耐心。如果你第一次不能理解某个问题，那就"
#~ "把这个问题再读一遍。如果你还不能理解他，比较好的办法是记住这个结论，等以后"
#~ "再回来理解它。通常随着你编程经验的不断增加，这些问题就能自然而然的理解了。"
#~ "不要气馁，学习编程是一个漫长的攀登过程，但是却非常值得。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "At the end of each chapter are three sets of review exercises.  The first "
#~ "set is more or less regurgitation - they check to see if can you give "
#~ "back what you learned in the chapter.  The second set contains "
#~ "application questions - they check to see if you can apply what you "
#~ "learned to solve problems.  The final set is to see if you are capable of "
#~ "broadening your horizons.  Some of these questions may not be answerable "
#~ "until later in the book, but they give you some things to think about.  "
#~ "Other questions require some research into outside sources to discover "
#~ "the answer.  Still others require you to simply analyze your options and "
#~ "explain a best solution.  Many of the questions don't have right or wrong "
#~ "answers, but that doesn't mean they are unimportant.  Learning the issues "
#~ "involved in programming, learning how to research answers, and learning "
#~ "how to look ahead are all a major part of a programmer's work."
#~ msgstr ""
#~ "在每一章的末尾有三套复习练习题。第一套是复习题－用来检查你是否能够掌握本章"
#~ "学习的东西。第二套包含了应用问题－用来检查你是否能够学以致用。最后一套题用"
#~ "来检验你是否能够拓宽你的视野。其中的一些问题要等到看完后面的内容才能够回"
#~ "答，它们的目的是让你有可以思考的东西。其它的问题需要参考其他资料才能找到答"
#~ "案。还有一些问题要求你分析你面临的选择并得出一个最佳的答案。这些问题中的大"
#~ "部分都没有标准答案，但这并不意味着他们是不重要的。学习编程所包含的技能，学"
#~ "会怎样研究并得到答案还有学会怎样规划，这些都是一个程序员工作中的主要部分。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "If you have problems that you just can't get past, there is a mailing "
#~ "list for this book where readers can discuss and get help with what they "
#~ "are reading.  The address is <literal>pgubook-readers@nongnu.org</"
#~ "literal>.  This mailing list is open for any type of question or "
#~ "discussion along the lines of this book.  You can subscribe to this list "
#~ "by going to http://mail.nongnu.org/mailman/listinfo/pgubook-readers."
#~ msgstr ""
#~ "如果你有理解不了的问题，本书有一个的邮件列表，读者在阅读的时候可以在那里讨"
#~ "论和获得帮助。地址是<literal>pgubook-readers@nongnu.org</literal>。有关本"
#~ "书的任何问题都可以在这个邮件列表里进行讨论。你可以到下面这个地址订阅它"
#~ "http://mail.nongnu.org/mailman/listinfo/pgubook-readers 。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "If you are thinking of using this book for a class on computer "
#~ "programming but do not have access to Linux computers for your students, "
#~ "I highly suggest you try to find help from the K-12 Linux Project.  Their "
#~ "website is at http://www.k12linux.org/ and they have a helpful and "
#~ "responsive mailing list available."
#~ msgstr ""
#~ "如果你想用本书作为计算机编程的教材，但苦于不能为你的学生找到装有Linux的计"
#~ "算机，我强烈建议你向 K-12 Linux 项目寻求帮助。他们的网站是 http://www."
#~ "k12linux.org/ 。他们还有一个很有用的且反应及时的邮件列表。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Your Tools"
#~ msgstr "你的工具"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This book teaches assembly language for x86 processors and the GNU/Linux "
#~ "operating system.  Therefore we will be giving all of the examples using "
#~ "the GNU/Linux<indexterm>"
#~ msgstr ""
#~ "这本书将教授GNU/Linux操作系统上的x86处理器的汇编语言。所以书中所有的例子都"
#~ "要用GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "GNU/Linux"
#~ msgstr "GNU/Linux"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> standard GCC tool set.  If you are not familiar with GNU/"
#~ "Linux and the GCC tool set, they will be described shortly.  If you are "
#~ "new to Linux, you should check out the guide available at http://rute."
#~ "sourceforge.net/<footnote>"
#~ msgstr ""
#~ "</indexterm> 标准的GCC工具集来编译。如果你不熟悉 GNU/Linux 和 GCC 工具集，"
#~ "我马上将对它们进行介绍。如果你是个Linux新手，你应该看看http://rute."
#~ "sourceforge.net/ <footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "This is quite a large document.  You certainly don't need to know "
#~ "everything to get started with this book.  You simply need to know how to "
#~ "navigate from the command line and how to use an editor like "
#~ "<literal>pico</literal>, <literal>emacs</literal>, or <literal>vi</"
#~ "literal> (or others)."
#~ msgstr ""
#~ "这是一个很大的文档。为了学习本书你不必知道上面所有的东西。你只要知道怎样使"
#~ "用命令行和怎样使用文本编辑器，比如<literal>pico</literal>, "
#~ "<literal>emacs</literal>, 或者<literal>vi</literal> （或者其他编辑器）。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> What I intend to show you is more about programming in "
#~ "general than using a specific tool set on a specific platform, but "
#~ "standardizing on one makes the task much easier."
#~ msgstr ""
#~ "</footnote>上的指南。本书更多的着重于介绍如何编程，而不是在某一平台上使用"
#~ "某个特殊的工具集，不过专注于一个平台会使这个任务变的简单。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Those new to Linux should also try to get involved in their local GNU/"
#~ "Linux User's Group.  User's Group members are usually very helpful for "
#~ "new people, and will help you from everything from installing Linux to "
#~ "learning to use it most efficiently.  A listing of GNU/Linux User's "
#~ "Groups is available at http://www.linux.org/groups/"
#~ msgstr ""
#~ "刚开始使用Linux的新手还应该尝试加入到本地的GNU/Linux用户组里。用户组的成员"
#~ "通常很乐意帮助新手，他们会教你所有的事情，从安装Linux到高效的使用Linux。这"
#~ "里有一个GNU/Linux用户组的列表 http://www.linux.org/groups/"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "All of these programs have been tested using <productname>Red Hat Linux "
#~ "8.0</productname>, and should work with any other GNU/Linux distribution, "
#~ "too.<footnote>"
#~ msgstr ""
#~ "本书里所有的程序都在<productname>Red Hat Linux 8.0</productname>上测试过，"
#~ "在其他的 GNU/Linux 发行版上也应该可以运行。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "By \"GNU/Linux distribution\", I mean an x86 GNU/Linux distribution.  GNU/"
#~ "Linux distributions for the Power Macintosh, the Alpha processor, or "
#~ "other processors will not work with this book."
#~ msgstr ""
#~ "“GNU/Linux 发行版”这里我指的是 x86 GNU/Linux 发行版。运行于苹果机、Alpha处"
#~ "理器和其他处理器上的GNU/Linux 发行版不适用于本书。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> They will not work with non-Linux operating systems such as "
#~ "BSD or other systems.  However, all of the <emphasis>skills</emphasis> "
#~ "learned in this book should be easily transferable to any other system."
#~ msgstr ""
#~ "</footnote> 这些程序也不能运行于非 Linux 操作系统比如 BSD 或其他系统。但"
#~ "是，所有在本书中学到的<emphasis>技巧</emphasis>稍作变化之后在其他任何系统"
#~ "上也可以应用。"

# type: Content of: <chapter><sect1><para>
#~ msgid "If you do not have access to a GNU/Linux<indexterm>"
#~ msgstr "如果你无法接触到 GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> machine, you can look for a hosting provider who offers a "
#~ "Linux <emphasis>shell account</emphasis>, which is a command-line only "
#~ "interface to a Linux machine.  There are many low-cost shell account "
#~ "providers, but you have to make sure that they match the requirements "
#~ "above (i.e. - Linux on x86).  Someone at your local GNU/Linux User's "
#~ "Group may be able to give you one as well.  Shell accounts only require "
#~ "that you already have an Internet connection and a telnet program.  If "
#~ "you use <trademark class=\"registered\">Windows</trademark>, you already "
#~ "have a telnet client - just click on <literal>start</literal>, then "
#~ "<literal>run</literal>, then type in <literal>telnet</literal>.  However, "
#~ "it is usually better to download <productname>PuTTY</productname> from "
#~ "http://www.chiart.greenend.co.uk/~sgtatham/putty/ because Windows' telnet "
#~ "has some weird problems.  There are a lot of options for the Macintosh, "
#~ "too.  <productname>NiftyTelnet</productname> is my favorite."
#~ msgstr ""
#~ "</indexterm> 机器，你可以找一个 Linux <emphasis>shell 帐户</emphasis>提供"
#~ "商，这是一种以命令行界面登录 Linux 机器的方式。低成本的 shell 帐户提供商还"
#~ "是有很多的，但是你要保证他们可以满足前面的要求（也就是 x86 上的 Linux ）。"
#~ "你当地的 GNU/Linux 用户组的人或许也能够提供给你。要使用 Shell 帐户只要求你"
#~ "有互联网连接和一个 telnet 程序。如果你有 <trademark class=\"registered"
#~ "\">Windows</trademark>，那么你就已经有了一个 telnet 客户端——只需要点击 "
#~ "<literal>start</literal>，然后 <literal>run</literal>，然后输入 "
#~ "<literal>telnet</literal>。但是，最好还是从 http://www.chiart.greenend.co."
#~ "uk/~sgtatham/putty/ 下载 <productname>PuTTY</productname>，因为 Windows "
#~ "的 telnet 有一些很奇怪的问题。对于Mac机来说也有很多选择。"
#~ "<productname>NiftyTelnet</productname> 是我的最爱。"

# type: Content of: <chapter><sect1><para>
#~ msgid "If you don't have GNU/Linux<indexterm>"
#~ msgstr "如果你有没有 GNU/Linux <indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> and can't find a shell account service, then you can "
#~ "download <productname>Knoppix</productname> from http://www.knoppix.org/ "
#~ "Knoppix<indexterm>"
#~ msgstr ""
#~ "</indexterm> 而且找不到 shell 帐户服务，那么你可以从 http://www.knoppix."
#~ "org/ 下载 <productname>Knoppix</productname>。 Knoppix<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Knoppix"
#~ msgstr "Knoppix"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is a GNU/Linux distribution that boots from CD so that you "
#~ "don't have to actually install it.  Once you are done using it, you just "
#~ "reboot and remove the CD and you are back to your regular operating "
#~ "system."
#~ msgstr ""
#~ "</indexterm> 是一个从 CD 启动的 GNU/Linux 发行版，这样就可以免去了安装的麻"
#~ "烦。当你使用完了之后，你只需要重起并把 CD 取出就可以重新进入原来的系统。"

# type: Content of: <chapter><sect1><para>
#~ msgid "So what is GNU/Linux? GNU/Linux<indexterm>"
#~ msgstr "那么什么是 GNU/Linux? GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is an operating system modeled after <trademark class="
#~ "\"registered\">UNIX</trademark>.  The GNU part comes from the <ulink url="
#~ "\"http://www.gnu.org/\">GNU Project</ulink><footnote>"
#~ msgstr ""
#~ "</indexterm> 是依照 <trademark class=\"registered\">UNIX</trademark> 设计"
#~ "的一个操作系统。名字里的 GNU 来自于 <ulink url=\"http://www.gnu.org/"
#~ "\">GNU 项目</ulink><footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "The GNU Project is a project by the Free Software Foundation to produce a "
#~ "complete, free operating system."
#~ msgstr ""
#~ "GNU 项目是自由软件基金会发起的一个项目，目的是创造一个完整的自由的操作系"
#~ "统。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote>, which includes most of the programs you will run, including "
#~ "the GCC<indexterm>"
#~ msgstr ""
#~ "</footnote>，它包括了你将要运行的很多程序，包括我们编程时使用的 GCC "
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "GCC"
#~ msgstr "GCC"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> tool set that we will use to program with.  The GCC tool set "
#~ "contains all of the programs necessary to create programs in various "
#~ "computer languages."
#~ msgstr ""
#~ "</indexterm> 工具集。GCC 工具集包含了从多种计算机语言源文件创建程序所需要"
#~ "的所有工具。"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "kernel"
#~ msgstr "内核"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is the core part of an operating system that keeps track of "
#~ "everything.  The kernel is both a fence and a gate.  As a gate, it allows "
#~ "programs to access hardware in a uniform way.  Without the kernel, you "
#~ "would have to write programs to deal with every device model ever made.  "
#~ "The kernel handles all device-specific interactions so you don't have "
#~ "to.  It also handles file access and interaction between processes.  For "
#~ "example, when you type, your typing goes through several programs before "
#~ "it hits your editor.  First, the kernel is what handles your hardware, so "
#~ "it is the first to receive notice about the keypress.  The keyboard sends "
#~ "in <emphasis>scancodes</emphasis> to the kernel, which then converts them "
#~ "to the actual letters, numbers, and symbols they represent.  If you are "
#~ "using a windowing system (like <trademark class=\"registered\">Microsoft "
#~ "Windows</trademark> or the X Window System), then the windowing system "
#~ "reads the keypress from the kernel, and delivers it to whatever program "
#~ "is currently in focus on the user's display."
#~ msgstr ""
#~ "</indexterm>是一个操作系统的核心部分，它管理着所有的资源。像一个门一样，它"
#~ "允许程序以一种统一的方式来访问硬件。没有内核，你需要自己写程序来和处理每一"
#~ "种型号的硬件。内核可以处理所有设备相关的交互，所以就不必你亲自来了。它也会"
#~ "处理所有的文件访问和进程间的通信。比如，当你打字的时候，你打的字在到达你的"
#~ "编辑器之前要经过好几个程序。首先，内核是处理的硬件的，所以它是第一个收到你"
#~ "的敲击键盘的讯号的。键盘把<emphasis>扫描码</emphasis>发送给内核，然后内核"
#~ "把它们转化成他们实际所代表的字母、数字和符号。如果你正使用一个窗口系统（比"
#~ "如 <trademark class=\"registered\">Microsoft Windows</trademark> 或者 X "
#~ "Window System），那么这个窗口系统会读到内核传过来的键盘敲击，然后把它传递"
#~ "给用户的显示器上的当前活动程序。"

# type: Content of: <chapter><sect1><example><title>
#~ msgid "How the computer processes keyboard sigals"
#~ msgstr "计算机怎样处理键盘信号"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> also controls the flow of information between programs.  The "
#~ "kernel is a program's gate to the world around it.  Every time that data "
#~ "moves between processes, the kernel controls the messaging.  In our "
#~ "keyboard example above, the kernel would have to be involved for the "
#~ "windowing system to communicate the keypress to the application program."
#~ msgstr ""
#~ "</indexterm>内核也控制着程序间信息的流动。内核是程序通往它以外的世界的大"
#~ "门。内核控制着进程间每一次数据的移动。在我们前面这个键盘的例子里，内核需要"
#~ "参与窗口系统向应用程序传递键盘敲击信号的过程。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "As a fence, the kernel prevents programs from accidentally overwriting "
#~ "each other's data and from accessing files and devices that they don't "
#~ "have permission to.  It limits the amount of damage a poorly-written "
#~ "program can do to other running programs."
#~ msgstr ""
#~ "像一道围墙一样，内核可以防止程序相互改写彼此的数据，还可以防止访问它们没有"
#~ "访问权限的文件和设备。它能把一个写的很差的程序对其他正在运行的程序所可能造"
#~ "成的损害程度降到最低。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  Now, the kernel all by itself won't do anything.  You "
#~ "can't even boot up a computer with just a kernel.  Think of the kernel as "
#~ "the water pipes for a house.  Without the pipes, the faucets won't work, "
#~ "but the pipes are pretty useless if there are no faucets.  Together, the "
#~ "user applications (from the GNU project and other places) and the kernel "
#~ "(Linux) make up the entire operating system, GNU/Linux."
#~ msgstr ""
#~ "</indexterm>。现在，内核自己并不能做任何事情。只有内核你甚至不可以启动一台"
#~ "计算机。把内核想象成房间里的水管。没有水管，水龙头不能放出水来，但是没有水"
#~ "龙头的话，水管也是没有用的。用户程序（来自于GNU项目和其他地方）和内核"
#~ "（Linux），他们一起共同组成了整个操作系统——GNU/Linux。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "For the most part, this book will be using the computer's low-level "
#~ "assembly language.  There are essentially three kinds of languages: "
#~ "<indexterm>"
#~ msgstr ""
#~ "本书绝大部分程序将使用计算机底层的汇编语言。本质上有三种计算机语言："
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "machine language"
#~ msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#~ msgid "Machine Language"
#~ msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "This is what the computer actually sees and deals with.  Every command "
#~ "the computer sees is given as a number or sequence of numbers."
#~ msgstr ""
#~ "这是计算机实际看到和处理的语言。计算机看到的每一个命令都是一个数字或一串数"
#~ "字。"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "This is the same as machine language, except the command numbers have "
#~ "been replaced by letter sequences which are easier to memorize.  Other "
#~ "small things are done to make it easier as well."
#~ msgstr ""
#~ "这和机器语言是一样的，只不过更容易记忆的字母序列代替了数字。此外汇编语言还"
#~ "有一些其他的特点，使得利用它来编程比利用机器语言容易一些。"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#~ msgid "High-Level Language<indexterm>"
#~ msgstr "高级语言<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#~ msgid "high-level languages"
#~ msgstr "高级语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "High-level languages are there to make programming easier.  Assembly "
#~ "language requires you to work with the machine itself.  High-level "
#~ "languages allow you to describe the program in a more natural language.  "
#~ "A single command in a high-level language usually is equivalent to "
#~ "several commands in an assembly language."
#~ msgstr ""
#~ "高级语言是为了是编程变得更加容易。汇编语言要求你直接跟机器打交道。高级语言"
#~ "允许你用更加自然的语言描述程序。高级语言中的一个命令通常等于汇编语言中的几"
#~ "个命令。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> In this book we will learn assembly language, although we "
#~ "will cover a bit of high-level languages.  Hopefully by learning assembly "
#~ "language, your understanding of how programming and computers work will "
#~ "put you a step ahead."
#~ msgstr ""
#~ "</indexterm>在这本书里我们将主要学习汇编语言，也有一些高级语言的例子。希望"
#~ "通过学习汇编语言，能够让你加深对程序和计算机工作机制的理解。"
