# pgubook, IntroductionCh.xml
# Copyright (C) 2006 Zhang Le
# Zhang Le <robert.zhangle@gmail.com>, 2006.
msgid ""
msgstr ""
"Project-Id-Version: pbubook\n"
"POT-Creation-Date: 2006-05-15 16:01+0800\n"
"PO-Revision-Date: 2006-07-29 16:24+0800\n"
"Last-Translator: Zhang Le <robert.zhangle@gmail.com>\n"
"Language-Team: zh_CN <robert.zhangle@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Pootle 0.10beta3\n"

# type: Content of: <appendix><title>
#: ../../InstructionsAp.xml:2
#, no-wrap
msgid "Common x86 Instructions"
msgstr "常见的x86指令"

# type: Content of: <appendix><simplesect><title>
#: ../../InstructionsAp.xml:5
#, no-wrap
msgid "Reading the Tables"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:8
msgid "The tables of instructions presented in this appendix include:"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../InstructionsAp.xml:12
#, fuzzy
msgid "The instruction code"
msgstr "指令解码器"

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:13
msgid "The operands used"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:14
msgid "The flags used"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:15
msgid "A brief description of what the instruction does"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:19
msgid ""
"In the operands section, it will list the type of operands it takes.  If it "
"takes more than one operand, each operand will be separated by a comma.  "
"Each operand will have a list of codes which tell whether the operand can be "
"an immediate-mode value (I), a register (R), or a memory address (M).  For "
"example, the <literal>movl</literal> instruction is listed as <literal>I/R/"
"M, R/M</literal>.  This means that the first operand can be any kind of "
"value, while the second operand must be a register or memory location.  "
"Note, however, that in x86 assembly language you cannot have more than one "
"operand be a memory location."
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:31
#, fuzzy
msgid "In the flags<indexterm>"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><para><primary>
#: ../../InstructionsAp.xml:31
#, no-wrap
msgid "flags"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:31
msgid ""
"</indexterm> section, it lists the flags in the &eflags-indexed; register "
"affected by the instruction.  The following flags are mentioned:"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:39
#, no-wrap
msgid "O"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:41
#, fuzzy
msgid "Overflow flag<indexterm>"
msgstr "高级语言<indexterm>"

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:41
#, no-wrap
msgid "overflow flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:41
msgid ""
"</indexterm>.  This is set to true if the destination operand was not large "
"enough to hold the result of the instruction."
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:45
#, no-wrap
msgid "S"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../InstructionsAp.xml:47
#, fuzzy
msgid "Sign flag<indexterm>"
msgstr "Linux<indexterm>"

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:47
#, no-wrap
msgid "sign flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:47
msgid "</indexterm>.  This is set to the sign of the last result."
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:52
#, no-wrap
msgid "Z"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:54
#, fuzzy
msgid "Zero flag<indexterm>"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:54
#, no-wrap
msgid "zero flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:54
msgid ""
"</indexterm>.  This flag is set to true if the result of the instruction is "
"zero."
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:60
#, no-wrap
msgid "A"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:62
msgid "Auxiliary carry flag<indexterm>"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:62
#, no-wrap
msgid "auxiliary carry flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:62
msgid ""
"</indexterm>.  This flag is set for carries and borrows between the third "
"and fourth bit.  It is not often used."
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:68
#, no-wrap
msgid "P"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:70
#, fuzzy
msgid "Parity flag<indexterm>"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:70
#, no-wrap
msgid "parity flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:70
msgid ""
"</indexterm>.  This flag is set to true if the low byte of the last result "
"had an even number of 1 bits."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:76 ../../InstructionsAp.xml:279
#: ../../InstructionsAp.xml:285 ../../InstructionsAp.xml:291
#: ../../InstructionsAp.xml:297
#, no-wrap
msgid "C"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:78
#, fuzzy
msgid "Carry flag<indexterm>"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para><primary>
#: ../../InstructionsAp.xml:78
#, no-wrap
msgid "carry flag"
msgstr ""

# type: Content of: <appendix><simplesect><variablelist><varlistentry><listitem><para>
#: ../../InstructionsAp.xml:78
msgid ""
"</indexterm>.  Used in arithmetic to say whether or not the result should be "
"carried over to an additional byte.  If the carry flag is set, that usually "
"means that the destination register could not hold the full result.  It is "
"up to the programmer to decide on what action to take (i.e. - propogate the "
"result to another byte, signal an error, or ignore it entirely)."
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:88
msgid "Other flags exist, but they are much less important."
msgstr ""

# type: Content of: <appendix><simplesect><table><title>
#: ../../InstructionsAp.xml:94 ../../InstructionsAp.xml:101
#, no-wrap
msgid "Data Transfer Instructions"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:97
msgid ""
"These instructions perform little, if any computation.  Instead they are "
"mostly used for moving data from one place to another."
msgstr ""

# type: Content of: <chapter><title>
#: ../../InstructionsAp.xml:108 ../../InstructionsAp.xml:163
#: ../../InstructionsAp.xml:246 ../../InstructionsAp.xml:332
#, fuzzy, no-wrap
msgid "Instruction"
msgstr "介绍"

# type: Content of: <appendix><simplesect><table><tgroup><thead><row><entry>
#: ../../InstructionsAp.xml:108 ../../InstructionsAp.xml:163
#: ../../InstructionsAp.xml:246 ../../InstructionsAp.xml:332
#: ../../InstructionsAp.xml:424
#, no-wrap
msgid "Operands"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><thead><row><entry>
#: ../../InstructionsAp.xml:108 ../../InstructionsAp.xml:163
#: ../../InstructionsAp.xml:246 ../../InstructionsAp.xml:332
#, no-wrap
msgid "Affected Flags"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:111
#, fuzzy, no-wrap
msgid "movl<indexterm zone=\"dtins\">"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:111
#, no-wrap
msgid "movl"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:111 ../../InstructionsAp.xml:115
#: ../../InstructionsAp.xml:119 ../../InstructionsAp.xml:126
#: ../../InstructionsAp.xml:131 ../../InstructionsAp.xml:137
#: ../../InstructionsAp.xml:166 ../../InstructionsAp.xml:170
#: ../../InstructionsAp.xml:174 ../../InstructionsAp.xml:178
#: ../../InstructionsAp.xml:182 ../../InstructionsAp.xml:187
#: ../../InstructionsAp.xml:193 ../../InstructionsAp.xml:197
#: ../../InstructionsAp.xml:203 ../../InstructionsAp.xml:207
#: ../../InstructionsAp.xml:211 ../../InstructionsAp.xml:215
#: ../../InstructionsAp.xml:219 ../../InstructionsAp.xml:249
#: ../../InstructionsAp.xml:253 ../../InstructionsAp.xml:258
#: ../../InstructionsAp.xml:262 ../../InstructionsAp.xml:266
#: ../../InstructionsAp.xml:270 ../../InstructionsAp.xml:275
#: ../../InstructionsAp.xml:279 ../../InstructionsAp.xml:285
#: ../../InstructionsAp.xml:291 ../../InstructionsAp.xml:297
#: ../../InstructionsAp.xml:303 ../../InstructionsAp.xml:307
#: ../../InstructionsAp.xml:335 ../../InstructionsAp.xml:341
#: ../../InstructionsAp.xml:346 ../../InstructionsAp.xml:365
#: ../../InstructionsAp.xml:369 ../../InstructionsAp.xml:427
#: ../../InstructionsAp.xml:431 ../../InstructionsAp.xml:436
#: ../../InstructionsAp.xml:440 ../../InstructionsAp.xml:447
#: ../../InstructionsAp.xml:452 ../../InstructionsAp.xml:456
#: ../../InstructionsAp.xml:463 ../../InstructionsAp.xml:468
#: ../../InstructionsAp.xml:473 ../../InstructionsAp.xml:480
#, no-wrap
msgid "</indexterm>"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:111 ../../InstructionsAp.xml:115
#, no-wrap
msgid "I/R/M, I/R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:111 ../../InstructionsAp.xml:115
#: ../../InstructionsAp.xml:119 ../../InstructionsAp.xml:126
#: ../../InstructionsAp.xml:131 ../../InstructionsAp.xml:137
#: ../../InstructionsAp.xml:335 ../../InstructionsAp.xml:341
#: ../../InstructionsAp.xml:346 ../../InstructionsAp.xml:365
#: ../../InstructionsAp.xml:369
#, no-wrap
msgid "O/S/Z/A/C"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:113
#, no-wrap
msgid "This copies a word of data from one location to another.  <literal>movl %eax, %ebx</literal> copies the contents of &eax; to &ebx;"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:115
#, fuzzy, no-wrap
msgid "movb<indexterm zone=\"dtins\">"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:115
#, no-wrap
msgid "movb"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:117
#, no-wrap
msgid "Same as <literal>movl</literal>, but operates on individual bytes."
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:119
#, fuzzy, no-wrap
msgid "leal<indexterm zone=\"dtins\">"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:119
#, no-wrap
msgid "leal"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:119
#, no-wrap
msgid "M, I/R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:121
#, no-wrap
msgid ""
"This takes a memory location given in the standard format, and, instead of\n"
"loading the contents of the memory location, loads the computed address.\n"
"For example, <literal>leal 5(%ebp,%ecx,1), %eax</literal> loads the address\n"
"computed by <literal>5 + %ebp + 1*%ecx</literal> and stores that in &eax;"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:126
#, fuzzy, no-wrap
msgid "popl<indexterm zone=\"dtins\">"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:126
#, no-wrap
msgid "popl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:126 ../../InstructionsAp.xml:182
#: ../../InstructionsAp.xml:187 ../../InstructionsAp.xml:193
#: ../../InstructionsAp.xml:203 ../../InstructionsAp.xml:211
#: ../../InstructionsAp.xml:253
#, no-wrap
msgid "R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:128
#, no-wrap
msgid ""
"Pops the top of the stack into the given location.  This is equivalent to performing <literal>movl (%esp), R/M</literal> followed by <literal>addl $4, %esp</literal>.\n"
"<literal>popfl</literal> is a variant which pops the top of the stack into the &eflags;<indexterm zone=\"dtins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:129 ../../InstructionsAp.xml:135
#, no-wrap
msgid "&percent;eflags"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../InstructionsAp.xml:129
#, fuzzy, no-wrap
msgid "</indexterm> register."
msgstr "索引寄存器"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:131
#, no-wrap
msgid "pushl<indexterm zone=\"dtins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:131
#, no-wrap
msgid "pushl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:131
#, no-wrap
msgid "I/R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:133
#, no-wrap
msgid ""
"Pushes the given value onto the stack.\n"
"This is the equivalent to performing <literal>subl $4, %esp</literal> followed by <literal>movl I/R/M, (%esp)</literal>.\n"
"<literal>pushfl</literal> is a variant which pushes the current contents of the &eflags;<indexterm zone=\"dtins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:135
#, no-wrap
msgid "</indexterm> register onto the top of the stack."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:137
#, no-wrap
msgid "xchgl<indexterm zone=\"dtins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:137
#, no-wrap
msgid "xchgl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:137
#, no-wrap
msgid "R/M, R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:139
#, no-wrap
msgid "Exchange the values of the given operands."
msgstr ""

# type: Content of: <chapter><title>
#: ../../InstructionsAp.xml:148 ../../InstructionsAp.xml:156
#, fuzzy, no-wrap
msgid "Integer Instructions"
msgstr "介绍"

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:151
msgid ""
"These are basic calculating instructions that operate on signed or unsigned "
"integers."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:166
#, no-wrap
msgid "adcl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:166
#, no-wrap
msgid "adcl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:166 ../../InstructionsAp.xml:170
#: ../../InstructionsAp.xml:178 ../../InstructionsAp.xml:215
#: ../../InstructionsAp.xml:219 ../../InstructionsAp.xml:249
#: ../../InstructionsAp.xml:258 ../../InstructionsAp.xml:303
#: ../../InstructionsAp.xml:307
#, no-wrap
msgid "I/R/M, R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:166 ../../InstructionsAp.xml:170
#: ../../InstructionsAp.xml:174 ../../InstructionsAp.xml:178
#: ../../InstructionsAp.xml:197 ../../InstructionsAp.xml:207
#: ../../InstructionsAp.xml:211 ../../InstructionsAp.xml:215
#: ../../InstructionsAp.xml:219 ../../InstructionsAp.xml:258
#: ../../InstructionsAp.xml:303 ../../InstructionsAp.xml:307
#, no-wrap
msgid "O/S/Z/A/P/C"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:168
#, no-wrap
msgid "Add with carry.  Adds the carry bit and the first operand to the second, and, if there is an overflow, sets overflow and carry to true.  This is usually used for operations larger than a machine word.  The addition on the least-significant word would take place using <literal>addl</literal>, while additions to the other words would used the <literal>adcl</literal> instruction to take the carry from the previous add into account.  For the usual case, this is not used, and <literal>addl</literal> is used instead."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:170
#, no-wrap
msgid "addl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:170
#, no-wrap
msgid "addl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:172
#, no-wrap
msgid "Addition.  Adds the first operand to the second, storing the result in the second.  If the result is larger than the destination register, the overflow and carry bits are set to true.  This instruction operates on both signed and unsigned integers."
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:174
#, fuzzy, no-wrap
msgid "cdq<indexterm zone=\"intins\">"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:174
#, no-wrap
msgid "cdq"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:176
#, no-wrap
msgid "Converts the <indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:176
#, no-wrap
msgid "&eax;"
msgstr ""

# type: Content of: <chapter><sect1><para>
#: ../../InstructionsAp.xml:176
#, fuzzy, no-wrap
msgid "</indexterm><indexterm zone=\"intins\">"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:176
#, no-wrap
msgid "&edx;"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:176
#, no-wrap
msgid "</indexterm>&eax; word into the double-word consisting of &edx;:&eax; with sign extension.  The <literal>q</literal> signifies that it is a <emphasis>quad-word</emphasis>.  It's actually a double-word, but it's called a quad-word because of the terminology used in the 16-bit days.  This is usually used before issuing an <literal>idivl</literal> instruction."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:178
#, no-wrap
msgid "cmpl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:178
#, no-wrap
msgid "cmpl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:180
#, no-wrap
msgid "Compares two integers.  It does this by subtracting the first operand from the second.  It discards the results, but sets the flags accordingly.  Usually used before a conditional jump."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:182
#, no-wrap
msgid "decl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:182
#, no-wrap
msgid "decl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:182 ../../InstructionsAp.xml:187
#: ../../InstructionsAp.xml:193 ../../InstructionsAp.xml:203
#, no-wrap
msgid "O/S/Z/A/P"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:184
#, no-wrap
msgid ""
"Decrements the register or memory location.  Use <literal>decb</literal>\n"
"to decrement a byte instead of a word."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:187
#, no-wrap
msgid "divl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:187
#, no-wrap
msgid "divl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:189
#, no-wrap
msgid ""
"Performs unsigned division.  Divides the contents of the double-word contained in the combined &edx;:&eax-indexed; registers by the value in the register or memory location specified.  The &eax; register contains the resulting \n"
"quotient, and the &edx; register contains the resulting remainder.  If the \n"
"quotient is too large to fit in &eax;, it triggers a type 0 interrupt."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:193
#, no-wrap
msgid "idivl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:193
#, no-wrap
msgid "idivl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:195
#, no-wrap
msgid "Performs signed division.  Operates just like <literal>divl</literal> above."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:197
#, no-wrap
msgid "imull<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:197
#, no-wrap
msgid "imull"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:197 ../../InstructionsAp.xml:207
#, no-wrap
msgid "R/M/I, R"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:199
#, no-wrap
msgid ""
"Performs signed multiplication and stores the result in the second operand.\n"
"If the second operand is left out, it is assumed to be &eax;, and the full\n"
"result is stored in the double-word &edx-indexed;:&eax-indexed;."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:203
#, no-wrap
msgid "incl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:203
#, no-wrap
msgid "incl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:205
#, no-wrap
msgid "Increments the given register or memory location.  Use <literal>incb</literal> to increment a byte instead of a word."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:207
#, no-wrap
msgid "mull<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:207
#, no-wrap
msgid "mull"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:209
#, no-wrap
msgid "Perform unsigned multiplication.  Same rules as apply to <literal>imull</literal>."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:211
#, no-wrap
msgid "negl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../InstructionsAp.xml:211
#, fuzzy, no-wrap
msgid "negl"
msgstr "内核"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:213
#, no-wrap
msgid "Negates (gives the two's complement<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:213
#, no-wrap
msgid "two's complement"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:213
#, no-wrap
msgid "</indexterm> inversion of) the given register or memory location."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:215
#, no-wrap
msgid "sbbl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:215
#, no-wrap
msgid "sbbl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:217
#, no-wrap
msgid "Subtract with borrowing.  This is used in the same way that <literal>adc</literal> is, except for subtraction.  Normally only <literal>subl</literal> is used."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:219
#, no-wrap
msgid "subl<indexterm zone=\"intins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:219
#, no-wrap
msgid "subl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:221
#, no-wrap
msgid ""
"Subtract the two operands.  This subtracts the first operand from the second,\n"
"and stores the result in the second operand.  This instruction can be used on\n"
"both signed and unsigned numbers."
msgstr ""

# type: Content of: <chapter><title>
#: ../../InstructionsAp.xml:232 ../../InstructionsAp.xml:239
#, fuzzy, no-wrap
msgid "Logic Instructions"
msgstr "介绍"

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:235
msgid "These instructions operate on memory as bits instead of words."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:249
#, no-wrap
msgid "andl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:249
#, no-wrap
msgid "andl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:249
#, no-wrap
msgid "O/S/Z/P/C"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:251
#, no-wrap
msgid "Performs a logical and of the contents of the two operands, and stores the result in the second operand.  Sets the overflow and carry flags to false."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:253
#, no-wrap
msgid "notl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:253
#, no-wrap
msgid "notl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:255
#, no-wrap
msgid ""
"Performs a logical not on each bit in the operand.  Also known as a \n"
"one's complement<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:256
#, no-wrap
msgid "one's complement"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:256
#, fuzzy, no-wrap
msgid "</indexterm>."
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:258
#, no-wrap
msgid "orl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:258
#, no-wrap
msgid "orl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:260
#, no-wrap
msgid "Performs a logical or between the two operands, and stores the result in the second operand.  Sets the overflow and carry flags to false."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:262
#, no-wrap
msgid "rcll<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:262
#, no-wrap
msgid "rcll"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:262 ../../InstructionsAp.xml:266
#: ../../InstructionsAp.xml:270 ../../InstructionsAp.xml:275
#: ../../InstructionsAp.xml:279 ../../InstructionsAp.xml:285
#: ../../InstructionsAp.xml:291 ../../InstructionsAp.xml:297
#, no-wrap
msgid "I/&cl;, R/M"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:262 ../../InstructionsAp.xml:266
#: ../../InstructionsAp.xml:270 ../../InstructionsAp.xml:275
#, no-wrap
msgid "O/C"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:264
#, no-wrap
msgid "Rotates the given location's bits to the left the number of times in the first operand, which is either an immediate-mode value or the register &cl;.  The carry flag is included in the rotation, making it use 33 bits instead of 32.  Also sets the overflow flag."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:266
#, no-wrap
msgid "rcrl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:266
#, no-wrap
msgid "rcrl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:268 ../../InstructionsAp.xml:277
#, no-wrap
msgid "Same as above, but rotates right."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:270
#, no-wrap
msgid "roll<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:270
#, no-wrap
msgid "roll"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:272
#, no-wrap
msgid ""
"Rotate bits to the left.  It sets the overflow and carry flags, but does not count the carry flag as part of the rotation.  The number of bits to roll is\n"
"either specified in immediate mode or is contained in the &cl; register."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:275
#, no-wrap
msgid "rorl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:275
#, no-wrap
msgid "rorl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:279
#, no-wrap
msgid "sall<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:279
#, no-wrap
msgid "sall"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:281
#, no-wrap
msgid ""
"Arithmetic shift left.  The sign bit is shifted out to the carry flag, and a zero bit is placed in the least significant bit.  Other bits are simply shifted to the left.  This is the same as the regular shift left.  The number of bits\n"
"to shift is either specified in immediate mode or is contained in the &cl;\n"
"register."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:285
#, no-wrap
msgid "sarl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:285
#, no-wrap
msgid "sarl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:287
#, no-wrap
msgid ""
"Arithmetic shift right.  The least significant bit is shifted out to the carry flag.  The sign bit is shifted in, and kept as the sign bit.  Other bits are simply shifted to the right.  The number of bits\n"
"to shift is either specified in immediate mode or is contained in the &cl;\n"
"register."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:291
#, no-wrap
msgid "shll<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:291
#, no-wrap
msgid "shll"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:293
#, no-wrap
msgid ""
"Logical shift left.  This shifts all bits to the left (sign bit is not treated specially).  The leftmost bit is pushed to the carry flag.  The number of bits\n"
"to shift is either specified in immediate mode or is contained in the &cl;\n"
"register."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:297
#, no-wrap
msgid "shrl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:297
#, no-wrap
msgid "shrl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:299
#, no-wrap
msgid ""
"Logical shift right.  This shifts all bits in the register to the right (sign bit is not treated specially).  The rightmost bit is pushed to the carry flag.  The number of bits\n"
"to shift is either specified in immediate mode or is contained in the &cl;\n"
"register."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:303
#, no-wrap
msgid "testl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../InstructionsAp.xml:303
#, fuzzy, no-wrap
msgid "testl"
msgstr "字节"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:305
#, no-wrap
msgid "Does a logical and of both operands and discards the results, but sets the flags accordingly."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:307
#, no-wrap
msgid "xorl<indexterm zone=\"logicins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:307
#, no-wrap
msgid "xorl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:309
#, no-wrap
msgid "Does an exclusive or on the two operands, and stores the result in the second operand.  Sets the overflow and carry flags to false."
msgstr ""

# type: Content of: <appendix><simplesect><table><title>
#: ../../InstructionsAp.xml:318 ../../InstructionsAp.xml:325
#, no-wrap
msgid "Flow Control Instructions"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:321
msgid "These instructions may alter the flow of the program."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:335
#, no-wrap
msgid "call<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:335
#, no-wrap
msgid "call"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:335 ../../InstructionsAp.xml:346
#: ../../InstructionsAp.xml:365
#, no-wrap
msgid "destination address"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:337
#, no-wrap
msgid ""
"This pushes what would be the next value for &eip; onto the stack, and jumps\n"
"to the destination address.  Used for function calls.\n"
"Alternatively, the destination address can be an asterisk followed by a register for an indirect function call.  For example, <literal>call *%eax</literal> will call the function at the address in &eax;."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:341
#, no-wrap
msgid "int<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:341
#, no-wrap
msgid "int"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:341
#, no-wrap
msgid "I"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:343
#, no-wrap
msgid ""
"Causes an interrupt of the given number.  This is usually used\n"
"for system calls and other kernel interfaces."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:346
#, no-wrap
msgid "Jcc<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:346
#, no-wrap
msgid "Jcc"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><para>
#: ../../InstructionsAp.xml:349
msgid ""
"Conditional branch.  <literal>cc</literal> is the <emphasis>condition code</"
"emphasis>.  Jumps to the given address if the condition code is true (set "
"from the previous instruction, probably a comparison).  Otherwise, goes to "
"the next instruction.  The condition codes are:"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:352
msgid ""
"<literal>[n]a[e]</literal> - above (unsigned greater than).  An <literal>n</"
"literal> can be added for \"not\" and an <literal>e</literal> can be added "
"for \"or equal to\""
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:353
msgid "<literal>[n]b[e]</literal> - below (unsigned less than)"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:354
msgid "<literal>[n]e</literal> - equal to"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:355
msgid "<literal>[n]z</literal> - zero"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:356
msgid "<literal>[n]g[e]</literal> - greater than (signed comparison)"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:357
msgid "<literal>[n]l[e]</literal> - less than (signed comparison)"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:358
msgid "<literal>[n]c</literal> - carry flag set"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:359
msgid "<literal>[n]o</literal> - overflow flag set"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:360
msgid "<literal>[p]p</literal> - parity flag set"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:361
msgid "<literal>[n]s</literal> - sign flag set"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:362
msgid "<literal>ecxz</literal> - &ecx;<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><itemizedlist><listitem><para><primary>
#: ../../InstructionsAp.xml:362
#, no-wrap
msgid "&percent;ecx"
msgstr ""

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../InstructionsAp.xml:362
#, fuzzy
msgid "</indexterm> is zero"
msgstr "</indexterm>"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:365
#, no-wrap
msgid "jmp<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:365
#, no-wrap
msgid "jmp"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:367
#, no-wrap
msgid "An unconditional jump.  This simply sets &eip; to the destination address.  Alternatively, the destination address can be an asterisk followed by a register for an indirect jump.  For example, <literal>jmp *%eax</literal> will jump to the address in &eax;."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:369
#, no-wrap
msgid "ret<indexterm zone=\"flowins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:369
#, no-wrap
msgid "ret"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:371
#, no-wrap
msgid ""
"Pops a value off of the stack and then sets &eip; to that value.  Used\n"
"to return from function calls."
msgstr ""

# type: Content of: <appendix><simplesect><table><title>
#: ../../InstructionsAp.xml:408 ../../InstructionsAp.xml:417
#, no-wrap
msgid "Assembler Directives"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:411
msgid ""
"These are instructions to the assembler and linker, instead of instructions "
"to the processor.  These are used to help the assembler put your code "
"together properly, and make it easier to use."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><thead><row><entry>
#: ../../InstructionsAp.xml:424
#, no-wrap
msgid "Directive"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:427
#, no-wrap
msgid ".ascii<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:427
#, no-wrap
msgid ".ascii"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:427
#, no-wrap
msgid "QUOTED STRING"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:429
#, no-wrap
msgid "Takes the given quoted string and converts it into byte data."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:431
#, no-wrap
msgid ".byte<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <chapter><sect1><para><primary>
#: ../../InstructionsAp.xml:431
#, fuzzy, no-wrap
msgid ".byte"
msgstr "字节"

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:431 ../../InstructionsAp.xml:463
#, no-wrap
msgid "VALUES"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:433
#, no-wrap
msgid ""
"Takes a comma-separated list of values and inserts them right there\n"
"in the program as data."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:436
#, no-wrap
msgid ".endr<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:436
#, no-wrap
msgid ".endr"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:438
#, no-wrap
msgid "Ends a repeating section defined with <literal>.rept</literal>."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:440
#, no-wrap
msgid ".equ<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:440
#, no-wrap
msgid ".equ"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:440
#, no-wrap
msgid "LABEL, VALUE"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:442
#, no-wrap
msgid ""
"Sets the given label equivalent to the given value.  The value\n"
"can be a number, a character, or an constant expression that evaluates\n"
"to a a number or character.  From that point on, use of the label will\n"
"be substituted for the given value."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:447
#, no-wrap
msgid ".globl<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:447
#, no-wrap
msgid ".globl"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:447
#, no-wrap
msgid "LABEL"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:449
#, no-wrap
msgid ""
"Sets the given label as global, meaning that it can be used from \n"
"separately-compiled object files."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:452
#, no-wrap
msgid ".include<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:452
#, no-wrap
msgid ".include"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:452
#, no-wrap
msgid "FILE"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:454
#, no-wrap
msgid "Includes the given file just as if it were typed in right there."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:456
#, no-wrap
msgid ".lcomm<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:456
#, no-wrap
msgid ".lcomm"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:456
#, no-wrap
msgid "SYMBOL, SIZE"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:458
#, no-wrap
msgid ""
"This is used in the <literal>.bss</literal> section to specify storage\n"
"that should be allocated when the program is executed.  Defines the symbol\n"
"with the address where the storage will be located, and makes sure that\n"
"it is the given number of bytes long."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:463
#, no-wrap
msgid ".long<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:463
#, no-wrap
msgid ".long"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:465
#, no-wrap
msgid ""
"Takes a sequence of numbers separated by commas, and inserts those\n"
"numbers as 4-byte words right where they are in the program."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:468
#, no-wrap
msgid ".rept<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:468
#, no-wrap
msgid ".rept"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:468
#, no-wrap
msgid "COUNT"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:470
#, no-wrap
msgid ""
"Repeats everything between this directive and the <literal>.endr</literal>\n"
"directives the number of times specified."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:473
#, no-wrap
msgid ".section<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:473
#, no-wrap
msgid ".section"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:473
#, no-wrap
msgid "SECTION NAME"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:475
#, no-wrap
msgid ""
"Switches the section that is being worked on.  Common sections include\n"
"<literal>.text</literal> (for code), <literal>.data</literal> (for \n"
"data embedded in the program itself), and <literal>.bss</literal> (for\n"
"uninitialized global data)."
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:480
#, no-wrap
msgid ".type<indexterm zone=\"dirins\">"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry><primary>
#: ../../InstructionsAp.xml:480
#, no-wrap
msgid ".type"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:480
#, no-wrap
msgid "SYMBOL, @function"
msgstr ""

# type: Content of: <appendix><simplesect><table><tgroup><tbody><row><entry>
#: ../../InstructionsAp.xml:482
#, no-wrap
msgid "Tells the linker that the given symbol is a function."
msgstr ""

# type: Content of: <appendix><simplesect><title>
#: ../../InstructionsAp.xml:491
#, no-wrap
msgid "Differences in Other Syntaxes and Terminology"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:494
msgid ""
"The syntax for assembly language used in this book is known at the "
"<emphasis>AT&amp;T<indexterm>"
msgstr ""

# type: Content of: <appendix><simplesect><para><primary>
#: ../../InstructionsAp.xml:495
#, no-wrap
msgid "AT&amp;T syntax"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:495
msgid ""
"</indexterm></emphasis> syntax.  It is the one supported by the GNU tool "
"chain that comes standard with every Linux distribution.  However, the "
"official syntax for x86 assembly language (known as the <trademark class="
"\"registered\">Intel</trademark> syntax<indexterm>"
msgstr ""

# type: Content of: <appendix><simplesect><para><primary>
#: ../../InstructionsAp.xml:497
#, no-wrap
msgid "Intel syntax"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:497
msgid ""
"</indexterm>)  is different.  It is the same assembly language for the same "
"platform, but it looks different.  Some of the differences include:"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:504
msgid ""
"In Intel syntax, the operands of instructions are often reversed.  The "
"destination operand is listed before the source operand."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:505
msgid ""
"In Intel syntax, registers are not prefixed with the percent sign (<literal>%"
"</literal>)."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:506
msgid ""
"In Intel syntax, a dollar-sign (<literal>$</literal>) is not required to do "
"immediate-mode addressing.  Instead, non-immediate addressing is "
"accomplished by surrounding the address with brackets (<literal>[]</"
"literal>)."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:507
msgid ""
"In Intel syntax, the instruction name does not include the size of data "
"being moved.  If that is ambiguous, it is explicitly stated as "
"<literal>BYTE</literal>, <literal>WORD</literal>, or <literal>DWORD</"
"literal> immediately after the instruction name."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:508
msgid ""
"The way that memory addresses are represented in Intel assembly language is "
"much different (shown below)."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:509
msgid ""
"Because the x86 processor line originally started out as a 16-bit processor, "
"most literature about x86 processors refer to words as 16-bit values, and "
"call 32-bit values double words.  However, we use the term \"word\" to refer "
"to the standard register size on a processor, which is 32 bits on an x86 "
"processor.  The syntax also keeps this naming convention - <literal>DWORD</"
"literal> stands for \"double word\" in Intel syntax and is used for standard-"
"sized registers, which we would call simply a \"word\"."
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:510
msgid ""
"Intel assembly language has the ability to address memory as a segment/"
"offset pair.  We do not mention this because Linux does not support "
"segmented memory, and is therefore irrelevant to normal Linux programming."
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:514
msgid ""
"Other differences exist, but they are small in comparison.  To show some of "
"the differences, consider the following instruction:"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:523
msgid "In Intel syntax, this would be written as:"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:531
msgid ""
"The memory reference is a bit easier to read than its AT&amp;T counterpart "
"because it spells out exactly how the address will be computed.  However, "
"but the order of operands in Intel syntax can be confusing."
msgstr ""

# type: Content of: <appendix><simplesect><title>
#: ../../InstructionsAp.xml:540
#, no-wrap
msgid "Where to Go for More Information"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:543
msgid ""
"Intel has a set of comprehensive guides to their processors.  These are "
"available at http://www.intel.com/design/pentium/manuals/ Note that all of "
"these use the Intel syntax, not the AT&amp;T syntax.  The most important "
"ones are their <citetitle>IA-32 Intel Architecture Software Developer's "
"Manual</citetitle> in its three volumes::"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:551
msgid ""
"Volume 1: System Programming Guide (http://developer.intel.com/design/"
"pentium4/manuals/245470.htm)"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:552
msgid ""
"Volume 2: Instruction Set Reference (http://developer.intel.com/design/"
"pentium4/manuals/245471.htm)"
msgstr ""

# type: Content of: <appendix><simplesect><itemizedlist><listitem><para>
#: ../../InstructionsAp.xml:553
msgid ""
"Volume 3: System Programming Guide (http://developer.intel.com/design/"
"pentium4/manuals/245472.htm)"
msgstr ""

# type: Content of: <appendix><simplesect><para>
#: ../../InstructionsAp.xml:557
msgid ""
"In addition, you can find a lot of information in the manual for the GNU "
"assembler, available online at http://www.gnu.org/software/binutils/manual/"
"gas-2.9.1/as.html.  Similarly, the manual for the GNU linker is available "
"online at http://www.gnu.org/software/binutils/manual/ld-2.9.1/ld.html."
msgstr ""

# type: Content of: <chapter><title>
#~ msgid "Computer Architecture"
#~ msgstr "计算机架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "Before learning how to program, you need to first understand how a "
#~ "computer interprets programs.  You don't need a degree in electrical "
#~ "engineering, but you need to understand some basics."
#~ msgstr ""
#~ "在学习如何编程之前，你需要首先懂得计算机如何解释程序。你不需要获得电子工程"
#~ "的学位，但是你要懂得一些基本的知识。"

# type: Content of: <chapter><para><primary>
#~ msgid "computer architecture"
#~ msgstr "计算机架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm> is based off of an architecture called the Von Neumann "
#~ "architecture<indexterm>"
#~ msgstr "</indexterm>是基于冯诺依曼架构的<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Von Neumann architecture"
#~ msgstr "冯诺依曼架构"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm>, named after its creator.  The Von Neumann architecture "
#~ "divides the computer up into two main parts - the CPU<indexterm>"
#~ msgstr ""
#~ "</indexterm>，该架构以它的创建者的名字而命名。冯诺依曼架构把计算机分成两个"
#~ "主要部分——CPU<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "CPU"
#~ msgstr "CPU"

# type: Content of: <chapter><para>
#~ msgid ""
#~ "</indexterm> (for Central Processing Unit) and the memory.  This "
#~ "architecture is used in all modern computers, including personal "
#~ "computers, supercomputers, mainframes, and even cell phones."
#~ msgstr ""
#~ "</indexterm>（Central Processing Unit）和内存。所有现代计算使用的都是这种"
#~ "架构，包括个人计算机、超级计算机、大型计算机，甚至手机。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Structure of Computer Memory"
#~ msgstr "计算机内存的结构"

# type: Content of: <chapter><sect1><para>
#~ msgid "To understand how the computer views memory<indexterm>"
#~ msgstr "如果要理解计算机查看内存<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "memory"
#~ msgstr "内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, imagine your local post office.  They usually have a room "
#~ "filled with PO Boxes.  These boxes are similar to computer memory in that "
#~ "each are numbered sequences of fixed-size storage locations.  For "
#~ "example, if you have 256 megabytes of computer memory, that means that "
#~ "your computer contains roughly 256 million fixed-size storage locations.  "
#~ "Or, to use our analogy, 256 million PO Boxes.  Each location has a "
#~ "number, and each location has the same, fixed-length size.  The "
#~ "difference between a PO Box and computer memory is that you can store all "
#~ "different kinds of things in a PO Box, but you can only store a single "
#~ "number in a computer memory storage location."
#~ msgstr ""
#~ "</indexterm>的方式，我们可以拿你当地的邮局来做个比喻。他们通常有个房间装满"
#~ "了邮箱。这些邮箱和计算机内存类似，每一个都是有编号的固定大小的存储位置。例"
#~ "如，如果你有 256 兆大小容量的内存，这就意味着你的计算机大概有 256 兆个固定"
#~ "大小的存储空间。在邮局的例子里，就是 256 兆个邮箱。每一个存储空间都有一个"
#~ "编号，每一个存储空间都有同样的长度固定的容量。邮局邮箱和计算机内存之间的不"
#~ "同在于，你可以在一个邮箱里面存放任何东西，但是在内存的一个存储空间里你只能"
#~ "存储一个数。"

# type: Content of: <chapter><sect1><mediaobject><caption><para>
#~ msgid "<emphasis>Memory locations are like PO Boxes</emphasis>"
#~ msgstr "<emphasis>内存空间就像邮箱</emphasis>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "You may wonder why a computer is organized this way.  It is because it is "
#~ "simple to implement.  If the computer were composed of a lot of "
#~ "differently-sized locations, or if you could store different kinds of "
#~ "data in them, it would be difficult and expensive to implement."
#~ msgstr ""
#~ "你也许想知道为什么计算机会采取这种组织形式。这是因为这种方式易于实现。如果"
#~ "计算机由很多大小不同的存储空间组成，或者你可以在里面存储各种不同类型的数"
#~ "据，那么实现起来将会很困难且要花费很大代价。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is used for a number of different things.  All of the "
#~ "results of any calculations are stored in memory.  In fact, everything "
#~ "that is \"stored\" is stored in memory.  Think of your computer at home, "
#~ "and imagine what all is stored in your computer's memory."
#~ msgstr ""
#~ "</indexterm>可以用来做很多不同的事情。所有的计算结果都存储在内存里面。实际"
#~ "上，一切已被存储的东西都被存储在内存中。想一下你家里的电脑，想像一下所有存"
#~ "储在内存中的东西。"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The location of your cursor on the screen"
#~ msgstr "屏幕上光标的位置"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The size of each window on the screen"
#~ msgstr "屏幕上每一个窗口的大小"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The shape of each letter of each font being used"
#~ msgstr "正在使用的每个字体的每个字母形状"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The layout of all of the controls on each window"
#~ msgstr "每一个窗口上所有控件的布局"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The graphics for all of the toolbar icons"
#~ msgstr "所有工具栏图标的图形"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The text for each error message and dialog box"
#~ msgstr "每一个错误信息和对话框的文本"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "The list goes on and on..."
#~ msgstr "还有很多很多……"

# type: Content of: <chapter><sect1><para>
#~ msgid "In addition to all of this, the Von Neumann architecture<indexterm>"
#~ msgstr "除了这些以外，冯·诺依曼架构<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> specifies that not only computer data should live in memory, "
#~ "but the programs that control the computer's operation should live there, "
#~ "too.  In fact, in a computer, there is no difference between a program "
#~ "and a program's data except how it is used by the computer.  They are "
#~ "both stored and accessed the same way."
#~ msgstr ""
#~ "</indexterm>还规定了不仅计算机数据应该放在内存里面，而且控制计算机运行的程"
#~ "序也应该放在那儿。实际上，在计算机里，程序的指令和一个程序的数据没有不同，"
#~ "只是计算机利用它们的方式不一样。他们的存储方式和访问方式都是一样的。"

# type: Content of: <chapter><sect1><title>
#~ msgid "The CPU"
#~ msgstr "CPU"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "So how does the computer function? Obviously, simply storing data doesn't "
#~ "do much help - you need to be able to access, manipulate, and move it.  "
#~ "That's where the CPU<indexterm>"
#~ msgstr ""
#~ "那么计算机是如何工作的呢？显然，仅仅能存储数据没有太大的帮助——你必须能够访"
#~ "问、操作和移动他们。那么这就是 CPU<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The CPU reads in instructions from memory one at a time and executes "
#~ "them.  This is known as the <emphasis>fetch-execute cycle</"
#~ "emphasis><indexterm>"
#~ msgstr ""
#~ "CPU 每一次从内存中读取一条指令并执行它，这也被称作<emphasis>读取－执行周期"
#~ "</emphasis><indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "fetch-execute cycle"
#~ msgstr "读取－执行周期"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  The CPU contains the following elements to accomplish this:"
#~ msgstr "</indexterm>。为实现这个过程，CPU 包含下面的部分："

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "data bus"
#~ msgstr "数据总线"

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#~ msgid "General-purpose registers<indexterm>"
#~ msgstr "通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "general-purpose registers"
#~ msgstr "通用寄存器"

# type: Content of: <chapter><sect1><para><itemizedlist><listitem><para>
#~ msgid "Arithmetic and logic unit<indexterm>"
#~ msgstr "算术和逻辑单元<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "arithmetic and logic unit"
#~ msgstr "算术和逻辑单元"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The <emphasis>program counter</emphasis> is used to tell the computer "
#~ "where to fetch the next instruction from.  We mentioned earlier that "
#~ "there is no difference between the way data and programs are stored, they "
#~ "are just interpreted differently by the CPU.  The program counter holds "
#~ "the memory address of the next instruction to be executed.  The CPU "
#~ "begins by looking at the program counter, and fetching whatever number is "
#~ "stored in memory at the location specified.  It is then passed on to the "
#~ "<emphasis>instruction decoder</emphasis><indexterm>"
#~ msgstr ""
#~ "<emphasis>程序计数器</emphasis>用来告诉计算机去哪里获得下一条指令。我们前"
#~ "面已经说过数据和程序指令的存取方式没有区别，仅仅是 CPU 解释他们的方式不"
#~ "同。程序计数器保存着下一条将要执行的指令的内存地址。 CPU 从查看程序计数器"
#~ "开始，获得其所指定的地址上存放的数，然后交给<emphasis>指令解码器</"
#~ "emphasis><indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> which figures out what the instruction means.  This includes "
#~ "what process needs to take place (addition, subtraction, multiplication, "
#~ "data movement, etc.) and what memory locations are going to be involved "
#~ "in this process.  Computer instructions usually consist of both the "
#~ "actual instruction and the list of memory locations that are used to "
#~ "carry it out."
#~ msgstr ""
#~ "</indexterm>，由后者来解释指令的含义。这包括需要发生什么样的操作（加法、减"
#~ "法、乘法、数据移动等等）和在这个过程中将会被用到的内存地址，计算机指令通常"
#~ "由实际的指令和完成这个指令所要用到的内存地址组成。"

# type: Content of: <chapter><sect1><para>
#~ msgid "Now the computer uses the <emphasis>data bus</emphasis><indexterm>"
#~ msgstr "</indexterm> 是<emphasis>内核</emphasis>的名字。内核<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> to fetch the memory locations to be used in the "
#~ "calculation.  The data bus is the connection between the CPU and memory.  "
#~ "It is the actual wire that connects them.  If you look at the motherboard "
#~ "of the computer, the wires that go out from the memory are your data bus."
#~ msgstr ""
#~ "</indexterm>来获得存放于内存中的数据并用于计算。数据总线用来连接 CPU 和内"
#~ "存。它是连接它们的实际电路线。如果你注意看计算机主板，从内存出去的电线就是"
#~ "数据总线。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "In addition to the memory on the outside of the processor, the processor "
#~ "itself has some special, high-speed memory locations called "
#~ "registers<indexterm>"
#~ msgstr ""
#~ "除了位于处理器外部的内存之外，处理器本身还有一些特殊的高速记忆存储单元被称"
#~ "为寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "registers"
#~ msgstr "寄存器"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  There are two kinds of registers - <emphasis>general "
#~ "registers</emphasis> and <emphasis>special-purpose registers</emphasis>.  "
#~ "General-purpose registers<indexterm>"
#~ msgstr ""
#~ "</indexterm>。寄存器有两种——<emphasis>通用寄存器</emphasis>和<emphasis>专"
#~ "用寄存器</emphasis>。通用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> are where the main action happens.  Addition, subtraction, "
#~ "multiplication, comparisions, and other operations generally use general-"
#~ "purpose registers for processing.  However, computers have very few "
#~ "general-purpose registers.  Most information is stored in main memory, "
#~ "brought in to the registers for processing, and then put back into memory "
#~ "when the processing is completed.  <emphasis>special-purpose "
#~ "registers<indexterm>"
#~ msgstr ""
#~ "</indexterm>是主要的操作发生的地方。加法、减法、乘法、比较和其它运算通常都"
#~ "使用通用寄存器来处理。但是，计算机中只有很少量的通用寄存器。大部分信息是存"
#~ "储在内存中的，需要处理的时候才放到寄存器中，当处理完成以后再放回到内存中。"
#~ "<emphasis>专用寄存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "special-purpose registers"
#~ msgstr "专用寄存器"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> are registers which have very specific purposes.  "
#~ "We will discuss these as we come to them."
#~ msgstr ""
#~ "</indexterm></emphasis>是用于特殊目的的寄存器。我们将会在碰到它们的时候再"
#~ "作讨论。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Now that the CPU has retrieved all of the data it needs, it passes on the "
#~ "data and the decoded instruction to the <emphasis>arithmetic and logic "
#~ "unit<indexterm>"
#~ msgstr ""
#~ "CPU 在获取了所有需要的数据之后，它就会把数据和解码后的指令传递给<emphasis>"
#~ "算术和逻辑单元<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> for further processing.  Here the instruction is "
#~ "actually executed.  After the results of the computation have been "
#~ "calculated, the results are then placed on the data bus<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>作进一步的处理。在这里，指令才真正的被执行。当计算"
#~ "结果算出来后，CPU 会根据指令所指定的把结果放到数据总线<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> and sent to the appropriate location in memory or in a "
#~ "register, as specified by the instruction."
#~ msgstr "</indexterm>上并送到正确的内存地址上或者某个寄存器里。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This is a very simplified explanation.  Processors have advanced quite a "
#~ "bit in recent years, and are now much more complex.  Although the basic "
#~ "operation is still the same, it is complicated by the use of cache "
#~ "hierarchies<indexterm>"
#~ msgstr ""
#~ "这是一个非常简单的解释。在最近几年里，处理器获得比较大的发展，也更加复杂"
#~ "了。尽管最基本的操作是一样的，但是包括 cache 分层结构<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "cache hierarchies"
#~ msgstr "cache 分层结构"

# type: Content of: <chapter><sect1><para>
#~ msgid "</indexterm>, superscalar processors<indexterm>"
#~ msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid ""
#~ "superscalar\n"
#~ "processors"
#~ msgstr "超标量结构处理器"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "pipelining"
#~ msgstr "流水线"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "branch prediction"
#~ msgstr "分支预测"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "out-of-order execution"
#~ msgstr "乱序执行"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "microcode translation"
#~ msgstr "微码翻译"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "coprocessors"
#~ msgstr "协处理器"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, and other optimizations.  Don't worry if you don't know "
#~ "what those words mean, you can just use them as Internet search terms if "
#~ "you want to learn more about the CPU."
#~ msgstr ""
#~ "</indexterm>在内的一些优化方案已经使得处理器变的更加复杂。不用为不知道这些"
#~ "术语的含义而担心，如果你想学习更多有关 CPU 的知识，你可以用它们作为关键字"
#~ "在互联网上搜索一下。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Some Terms"
#~ msgstr "一些术语"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "computer memory"
#~ msgstr "计算机内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is a numbered sequence of fixed-size storage locations.  The "
#~ "number attached to each storage location is called its "
#~ "<emphasis>address<indexterm>"
#~ msgstr ""
#~ "</indexterm>是一系列编了号的固定大小的存储空间。每一个存储空间的编号称为该"
#~ "存储空间的<emphasis>地址<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "address"
#~ msgstr "地址"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  The size of a single storage location is called "
#~ "a <emphasis>byte</emphasis>.  On x86 processors, a byte<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>。单个存储空间的大小称为<emphasis>字节</emphasis>。"
#~ "在 x86 处理器上，一个字节<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid "</indexterm> is a number between 0 and 255."
#~ msgstr "</indexterm>是一个 0 到 255 之间的数。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "You may be wondering how computers can display and use text, graphics, "
#~ "and even large numbers when all they can do is store numbers between 0 "
#~ "and 255.  First of all, specialized hardware like graphics cards have "
#~ "special interpretations of each number.  When displaying to the screen, "
#~ "the computer uses ASCII<indexterm>"
#~ msgstr ""
#~ "你也许想知道为什么计算机只能存储 0 到 255 之间的数，但却可以显示和使用文"
#~ "本、图像和更大的数。首先，像显卡这样的专门硬件对每一个数都有特殊的解释。当"
#~ "这些数要显示在屏幕上的时候，计算机使用 ASCII<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "ASCII"
#~ msgstr "ASCII"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> code tables to translate the numbers you are sending it into "
#~ "letters to display on the screen, with each number translating to exactly "
#~ "one letter or numeral.<footnote>"
#~ msgstr ""
#~ "</indexterm> 码表来把你传递给他的数翻译成要显示在屏幕上的字符，每一个数只"
#~ "被翻译为一个字母或者阿拉伯数字。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "With the advent of international character sets and Unicode, this is not "
#~ "entirely true anymore.  However, for the purposes of keeping this simple "
#~ "for beginners, we will use the assumption that one number translates "
#~ "directly to one character.  For more information, see <xref linkend="
#~ "\"asciilisting\" />."
#~ msgstr ""
#~ "随着国际字符集和 Unicode 的出现，事实已经不再是这样。但是为了让初学者容易"
#~ "理解，我们这里假设一个数字会被直接翻译为一个字符。请参阅<xref linkend="
#~ "\"asciilisting\" />以获得更多的信息。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> For example, the capital letter A is represented by the "
#~ "number 65.  The numeral 1 is represented by the number 49.  So, to print "
#~ "out \"HELLO\", you would actually give the computer the sequence of "
#~ "numbers 72, 69, 76, 76, 79.  To print out the number 100, you would give "
#~ "the computer the sequence of numbers 49, 48, 48.  A list of ASCII "
#~ "characters and their numeric codes is found in <xref linkend="
#~ "\"asciilisting\" />."
#~ msgstr ""
#~ "</footnote>例如，大写字母 A 用 65 来表示，数字 1 用 49 来表示，因此，如果"
#~ "要显示出“HELLO”，你应该给出 72，69，76，76，79 这样一串数；如果要显示"
#~ "出“100”，你应该给出 49，48，48 这样一串数。ASCII 字符和其对应的数可以在"
#~ "<xref linkend=\"asciilisting\" /> 中找到。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "In addition to using numbers to represent ASCII characters, you as the "
#~ "programmer get to make the numbers mean anything you want them to, as "
#~ "well.  For example, if I am running a store, I would use a number to "
#~ "represent each item I was selling.  Each number would be linked to a "
#~ "series of other numbers which would be the ASCII<indexterm>"
#~ msgstr ""
#~ "除了使用数来表示 ASCII 字符以外，作为一个程序员的你，也用数来表示任何你想"
#~ "表示的东西。例如，如果我经营一个商场，我会用数来表示每一件我卖的商品。每一"
#~ "个数可能关联到一系列其它的数，其中可能包括商品扫描入仓时我想要显示的 "
#~ "ASCII <indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> codes for what I wanted to display when the items were "
#~ "scanned in.  I would have more numbers for the price, how many I have in "
#~ "inventory, and so on."
#~ msgstr "</indexterm> 码。我会用更多的数来表示价钱、库存量等等。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "So what about if we need numbers larger than 255? We can simply use a "
#~ "combination of bytes to represent larger numbers.  Two bytes can be used "
#~ "to represent any number between 0 and 65535.  Four bytes can be used to "
#~ "represent any number between 0 and 4294967295.  Now, it is quite "
#~ "difficult to write programs to stick bytes together to increase the size "
#~ "of your numbers, and requires a bit of math.  Luckily, the computer will "
#~ "do it for us for numbers up to 4 bytes long.  In fact, four-byte numbers "
#~ "are what we will work with by default."
#~ msgstr ""
#~ "如果我们需要大于 255 的数该怎么办？我们可以简单的将多个字节合并来表示更大"
#~ "的数字。两个字节可以用来表示从 0 到 65536 之间的任何数字。四个字节可以用来"
#~ "表示从 0 到 4294967295 之间的任何数字。现在，写程序来把字节合并以增大数字"
#~ "所表示的范围很困难，这需要一些数学运算。幸运的是，如果数不超过 4 个字节"
#~ "长，那么计算机可以帮我们来解决。实际上，我们编程时默认处理的都是 4 个字节"
#~ "的数。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "We mentioned earlier that in addition to the regular memory that the "
#~ "computer has, it also has special-purpose storage locations called "
#~ "<emphasis>registers<indexterm>"
#~ msgstr ""
#~ "我们早些时候提到计算机除了有常规内存以外，它还有被称为<emphasis>寄存器"
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  Registers are what the computer uses for "
#~ "computation.  Think of a register as a place on your desk - it holds "
#~ "things you are currently working on.  You may have lots of information "
#~ "tucked away in folders and drawers, but the stuff you are working on "
#~ "right now is on the desk.  Registers keep the contents of numbers that "
#~ "you are currently manipulating."
#~ msgstr ""
#~ "</indexterm></emphasis>的特殊存储空间。寄存器是计算机用来计算的。把寄存器"
#~ "想像成你的书桌上的一块地方——它存放着你当前的工作内容。你也许还有很多信息放"
#~ "在文件夹和抽屉里面，但是你正在工作的内容是放在桌子上的。寄存器保存着你当前"
#~ "正在操作的数的内容。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "On the computers we are using, registers are each four bytes long.  The "
#~ "size of a typical register is called a computer's "
#~ "<emphasis>word<indexterm>"
#~ msgstr ""
#~ "我们使用的计算机上面，每个寄存器都是四字节长度。一个典型寄存器的长度称为计"
#~ "算机的<emphasis>字<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "word"
#~ msgstr "字"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> size.  x86 processors have four-byte words.  This "
#~ "means that it is most natural on these computers to do computations four "
#~ "bytes at a time.<footnote>"
#~ msgstr ""
#~ "</indexterm></emphasis>长。x86 处理器字长是4。这意味着在这种计算机上做四字"
#~ "节的计算是最本能的。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "Previous incarnations of x86 processors only had two-byte words.  "
#~ "Therefore, most other literature dealing with x86 processors refers to "
#~ "two-byte entities as words for historical reasons, and therefore refer to "
#~ "four-byte entities as double-words.  We are using the term "
#~ "<emphasis>word</emphasis> to mean the normal register size of a computer, "
#~ "which in this case is four bytes.  More information is available in <xref "
#~ "linkend=\"instructionsappendix\" />,"
#~ msgstr ""
#~ "以前的 x86 处理器的实现的字长是 2。因为这一历史原因，其他多数讲述 x86 处理"
#~ "器的著作都称两字节的组合为字，并且称四字节的组合为双字。我们使用<emphasis>"
#~ "字</emphasis>这个术语来指一个计算机的正常寄存器大小，在我们的例子里就是四"
#~ "字节。更多信息请看<xref linkend=\"instructionsappendix\" />。"

# type: Content of: <chapter><sect1><para>
#~ msgid "</footnote> This gives us roughly 4 billion values."
#~ msgstr "</footnote> 4个字节能表示大约40亿个不同的值。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Addresses are also four bytes (1 word) long, and therefore also fit into "
#~ "a register.  x86 processors can access up to 4294967296 bytes if enough "
#~ "memory is installed.  Notice that this means that we can store addresses "
#~ "the same way we store any other number.  In fact, the computer can't tell "
#~ "the difference between a value that is an address, a value that is a "
#~ "number, a value that is an ASCII code, or a value that you have decided "
#~ "to use for another purpose.  A number becomes an ASCII code when you "
#~ "attempt to display it.  A number becomes an address when you try to look "
#~ "up the byte it points to.  Take a moment to think about this, because it "
#~ "is crucial to understanding how computer programs work."
#~ msgstr ""
#~ "地址也是四字节（一个字）长，因此也可以放入到一个寄存器中。如果有足够的内"
#~ "存，x86 处理器可以访问 4294967296 个字节。注意这意味这我们可以像存储其他数"
#~ "字一样来存储地址。实际上，计算机不能分辨一个值到底是一个地址，还是一个数"
#~ "字，还是一个 ASCII 码，还是有其它的用途。当你显示它的时候，这个数字就是一"
#~ "个 ASCII 码；当你要查看它指向的某个字节时，这个数字就是一个地址。花一点时"
#~ "间想清楚这些东西，因为这对理解计算机编程如何工作很重要。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Addresses which are stored in memory are also called "
#~ "<emphasis>pointers<indexterm>"
#~ msgstr "存放在内存中的地址称为<emphasis>指针<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "pointers"
#~ msgstr "指针"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, because instead of having a regular value in "
#~ "them, they point you to a different location in memory."
#~ msgstr ""
#~ "</indexterm></emphasis>，因为该位置存放的不是一个常规数值，而是另外一个内"
#~ "存位置的地址。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "As we've mentioned, computer instructions are also stored in memory.  In "
#~ "fact, they are stored exactly the same way that other data is stored.  "
#~ "The only way the computer knows that a memory location is an instruction "
#~ "is that a special-purpose register<indexterm>"
#~ msgstr ""
#~ "如同我们已经提到的，计算机指令也存放在内存中。实际上，他们和数据的存放方式"
#~ "是一样的。计算机知道一个内存位置存放的是一条指令的唯一方法是通过一个专用寄"
#~ "存器<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "special-purpose register"
#~ msgstr "专用寄存器"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "instruction pointer"
#~ msgstr "指令指针"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> points to them at one point or another.  If the instruction "
#~ "pointer points to a memory word, it is loaded as an instruction.  Other "
#~ "than that, the computer has no way of knowing the difference between "
#~ "programs and other types of data.<footnote>"
#~ msgstr ""
#~ "</indexterm>。它所指向的就是指令。如果指令指针指向一个内存字，那么它将作为"
#~ "一条指令被加载。除此之外，计算机无从知晓计算机指令和其他类型的数据的区别。"
#~ "<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "Note that here we are talking about general computer theory.  Some "
#~ "processors and operating systems actually mark the regions of memory that "
#~ "can be executed with a special marker that indicates this."
#~ msgstr ""
#~ "注意这里我们讨论的是一般的计算机理论。有些处理器和操作系统会用一个特殊标记"
#~ "来标记出可以执行的内存区域。"

# type: Content of: <chapter><sect1><para>
#~ msgid "</footnote>"
#~ msgstr "</footnote>"

# type: Content of: <chapter><sect1><title>
#~ msgid "Interpreting Memory"
#~ msgstr "解释内存"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Computers are very exact.  Because they are exact, programmers have to be "
#~ "equally exact.  A computer has no idea what your program is supposed to "
#~ "do.  Therefore, it will only do exactly what you tell it to do.  If you "
#~ "accidentally print out a regular number instead of the ASCII codes that "
#~ "make up the number's digits, the computer will let you - and you will "
#~ "wind up with jibberish on your screen (it will try to look up what your "
#~ "number represents in ASCII and print that).  If you tell the computer to "
#~ "start executing instructions at a location containing data instead of "
#~ "program instructions, who knows how the computer will interpret that - "
#~ "but it will certainly try.  The computer will execute your instructions "
#~ "in the exact order you specify, even if it doesn't make sense."
#~ msgstr ""
#~ "计算机是非常精确的。正因为它很精确，程序员也必须同等精确。计算机根本不知道"
#~ "你编制的程序想要做什么。因此，你要它做什么，计算机就会严格按照你的要求去做"
#~ "什么。如果你不小心打印出一个常规数值，而不是能够显示数字的ASCII码，计算机"
#~ "会允许你这样做。但是屏幕上就会出现一堆乱码（计算机会查找你的数在 ASCII 码"
#~ "中表示什么字符，然后把它打印出来）。如果你让计算机从一个含有数据而不是计算"
#~ "机指令的内存地址开始执行指令，没人知道计算机将会怎样解释，但它肯定会去尝"
#~ "试。计算机会严格按照你规定的顺序来执行指令，即使看起来没有任何意义。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The point is, the computer will do exactly what you tell it, no matter "
#~ "how little sense it makes.  Therefore, as a programmer, you need to know "
#~ "exactly how you have your data arranged in memory.  Remember, computers "
#~ "can only store numbers, so letters, pictures, music, web pages, "
#~ "documents, and anything else are just long sequences of numbers in the "
#~ "computer, which particular programs know how to interpret."
#~ msgstr ""
#~ "总之，计算机一点不差地做你要它做地事情，不管事情是否有意义。因此，作为一个"
#~ "程序员，你需要清楚地知道程序数据在内存中是如何放置的。记住，计算机只能存储"
#~ "数，所以字母、图片、音乐、网页、文档和所以其他的东西在计算机里都是长串的数"
#~ "而已，专门处理它们的应用程序知道如何解释它们。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "For example, say that you wanted to store customer information in "
#~ "memory.  One way to do so would be to set a maximum size for the "
#~ "customer's name and address - say 50 ASCII characters for each, which "
#~ "would be 50 bytes for each.  Then, after that, have a number for the "
#~ "customer's age and their customer id.  In this case, you would have a "
#~ "block of memory that would look like this:"
#~ msgstr ""
#~ "例如，假如你想把顾客信息存储在内存中。一种方法是为顾客的名字和地址的大小设"
#~ "定一个最大值——假定每个都是 50 个 ASCII 字符，也就是每个都有 50 个字节。然"
#~ "后，各用一个数字来表示顾客的年龄和他们的顾客号。这样，你就可以得到一个跟下"
#~ "面类似的内存块："

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This way, given the address of a customer record, you know where the rest "
#~ "of the data lies.  However, it does limit the customer's name and address "
#~ "to only 50 ASCII characters each."
#~ msgstr ""
#~ "这样，给定一个顾客记录的地址，你就可以知道这个顾客记录里其他数据存放的位"
#~ "置。但是，这种方法把顾客的名字和地址限制在了 50 个 ASCII 字符之内。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "What if we didn't want to specify a limit? Another way to do this would "
#~ "be to have in our record pointers<indexterm>"
#~ msgstr ""
#~ "如果我们不想要这种限制，该如何办呢？另外一种办法就是在我们的记录里面用指针"
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> to this information.  For example, instead of the customer's "
#~ "name, we would have a pointer to their name.  In this case, the memory "
#~ "would look like this:"
#~ msgstr ""
#~ "</indexterm>指向这些信息。例如，我们在记录中包含一个指向顾客名字的指针，而"
#~ "不是顾客的名字本身，这样，内存看起来就会象这样："

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "The actual name and address would be stored elsewhere in memory.  This "
#~ "way, it is easy to tell where each part of the data is from the start of "
#~ "the record, without explicitly limitting the size of the name and "
#~ "address.  If the length of the fields within our records could change, we "
#~ "would have no idea where the next field started.  Because records would "
#~ "be different sizes, it would also be hard to find where the next record "
#~ "began.  Therefore, almost all records are of fixed lengths.  Variable-"
#~ "length data is usually stored separately from the rest of the record."
#~ msgstr ""
#~ "实际的名字和地址可能存储在内存的其他位置。这样在得知记录的起始地址之后就可"
#~ "以知道记录里每一部分存放在什么位置，不必再明确地限制名字和地址地大小了。如"
#~ "果记录中某个字段的长度不是固定的，我们就无法知道下一个字段从哪里开始了。这"
#~ "样记录的长度可能不尽相同，因此找到下一条记录的起始也是很困难的，所以，几乎"
#~ "所有的记录都是固定长度的。变长的数据通常是放在别处存储的，不和记录在一起。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Data Accessing Methods"
#~ msgstr "数据访问方式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Processors have a number of different ways of accessing data, known as "
#~ "addressing modes<indexterm>"
#~ msgstr "处理器有很多种访问数据的方式，也叫做寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "addressing modes"
#~ msgstr "寻址模式"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "immediate mode addressing"
#~ msgstr "立即数寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, in which the data to access is embedded in the "
#~ "instruction itself.  For example, if we want to initialize a register to "
#~ "0, instead of giving the computer an address to read the 0 from, we would "
#~ "specify immediate mode, and give it the number 0."
#~ msgstr ""
#~ "</indexterm></emphasis>，要访问的数据就在指令中，例如，如果我们想初始化一"
#~ "个寄存器为 0，我们指定立即数模式方式，直接赋 0 给它，而不是让计算机从某个"
#~ "地址上读取 0。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>register addressing mode</emphasis><indexterm>"
#~ msgstr "在<emphasis>寄存器寻址模式</emphasis><indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "register addressing mode"
#~ msgstr "寄存器寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>, the instruction contains a register to access, rather than "
#~ "a memory location.  The rest of the modes will deal with addresses."
#~ msgstr ""
#~ "</indexterm>中，指令包含一个要访问的寄存器，而不是一个内存地址。其余的寻址"
#~ "模式都是和地址有关的。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>direct addressing mode<indexterm>"
#~ msgstr "在<emphasis>直接寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "direct addressing mode"
#~ msgstr "直接寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains the memory address to "
#~ "access.  For example, I could say, please load this register with the "
#~ "data at address 2002.  The computer would go directly to byte number 2002 "
#~ "and copy the contents into our register."
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个用于访问的内存地址。比如，我可以"
#~ "说，请把 2002 这个地址上的数据放到这个寄存器里。然后计算机就可以直接去找编"
#~ "号为 2002 的字节，并把里面的内容拷贝到我们指定的寄存器里。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>indexed addressing mode<indexterm>"
#~ msgstr "在<emphasis>索引寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "indexed addressing mode"
#~ msgstr "索引寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains a memory address to "
#~ "access, and also specifies an <emphasis>index register<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个要访问的内存地址，并指定一个"
#~ "<emphasis>索引寄存器<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> to offset that address.  For example, we could "
#~ "specify address 2002 and an index register.  If the index register "
#~ "contains the number 4, the actual address the data is loaded from would "
#~ "be 2006.  This way, if you have a set of numbers starting at location "
#~ "2002, you can cycle between each of them using an index register.  On x86 "
#~ "processors, you can also specify a <emphasis>multiplier<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>，其内容要与内存地址相加以获得最终访问地址。例如，"
#~ "我们可以指定地址 2002 和一个索引寄存器。如果索引寄存器包含数字 4，那么实际"
#~ "要访问的并从中读取数据的地址为 2006。这样，如果从地址 2002 开始有一个数"
#~ "组，你可以使用索引寄存器来逐个访问数组里的每个数。在 x86 处理器上，你也可"
#~ "以为索引寄存器指定一个<emphasis>乘数<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "multiplier"
#~ msgstr "乘数"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> for the index.  This allows you to access memory "
#~ "a byte at a time or a word at a time (4 bytes).  If you are accessing an "
#~ "entire word, your index will need to be multiplied by 4 to get the exact "
#~ "location of the fourth element from your address.  For example, if you "
#~ "wanted to access the fourth byte from location 2002, you would load your "
#~ "index register with 3 (remember, we start counting at 0) and set the "
#~ "multiplier to 1 since you are going a byte at a time.  This would get you "
#~ "location 2005.  However, if you wanted to access the fourth word from "
#~ "location 2002, you would load your index register with 3 and set the "
#~ "multiplier to 4.  This would load from location 2014 - the fourth word.  "
#~ "Take the time to calculate these yourself to make sure you understand how "
#~ "it works."
#~ msgstr ""
#~ "</indexterm></emphasis>。这样你就可以逐字节或者字（4 个字节）的来访问内"
#~ "存。如果你要访问整个字，你的索引寄存器就要乘以 4。例如，如果你想要访问从地"
#~ "址 2002 开始的第四个字节，你需要将索引寄存器赋值为 3（记住我们从 0 开始计"
#~ "数），将乘数设为 1 因为你每次只前进一个字节。这样你就可以访问到地址 2005。"
#~ "不过，如果你想要访问从地址 2002 开始的第四个字，则应该将索引寄存器赋值为 "
#~ "3 并把乘数设为 4。这样 CPU 就可以从地址 2014 访问到第四个字。花些时间计算"
#~ "一下前面的地址，这样才能确保你理解他们的含义。"

# type: Content of: <chapter><sect1><para>
#~ msgid "In the <emphasis>indirect addressing mode<indexterm>"
#~ msgstr "在<emphasis>间接寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "indirect addressing mode"
#~ msgstr "间接寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>, the instruction contains a register that "
#~ "contains a pointer to where the data should be accessed.  For example, if "
#~ "we used indirect addressing mode and specified the &eax; register, and "
#~ "the &eax; register contained the value 4, whatever value was at memory "
#~ "location 4 would be used.  In direct addressing, we would just load the "
#~ "value 4, but in indirect addressing, we use 4 as the address to use to "
#~ "find the data we want."
#~ msgstr ""
#~ "</indexterm></emphasis>中，指令包含一个寄存器，寄存器里是一个指针，这个指"
#~ "针指向要被访问的数据。例如，如果我们使用间接寻址模式并指定 &eax; 寄存器，"
#~ "且 &eax; 寄存器包含的数值为 4，那么内存地址 4 上存放的数就会被用到，不管什"
#~ "么数。在直接寻址中，我们仅仅载入数值 4，而在间接寻址中，我们载入的的是地"
#~ "址 4 上存放的数值。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Finally, there is the <emphasis>base pointer addressing mode<indexterm>"
#~ msgstr "最后我们要介绍的是<emphasis>基址寻址模式<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "base pointer addressing mode"
#~ msgstr "基址寻址模式"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis>.  This is similar to indirect addressing, but you "
#~ "also include a number called the <emphasis>offset<indexterm>"
#~ msgstr ""
#~ "</indexterm></emphasis>。这种方式和间接寻址类似，但是你需要在指令中包含一"
#~ "个数，叫做<emphasis>偏移<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "offset"
#~ msgstr "偏移"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm></emphasis> to add to the register's value before using it "
#~ "for lookup.  We will use this mode quite a bit in this book."
#~ msgstr ""
#~ "</indexterm></emphasis>，把这个数与寄存器的值相加，然后用所得的结果去寻"
#~ "址。在这本书中，我们会相当多地使用到这种寻址模式。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "In <xref linkend=\"interpretingmemory\" /> we discussed having a "
#~ "structure in memory holding customer information.  Let's say we wanted to "
#~ "access the customer's age, which was the eighth byte of the data, and we "
#~ "had the address of the start of the structure in a register.  We could "
#~ "use base pointer addressing and specify the register as the base pointer, "
#~ "and 8 as our offset.  This is a lot like indexed addressing, with the "
#~ "difference that the offset is constant and the pointer is held in a "
#~ "register, and in indexed addressing the offset is in a register and the "
#~ "pointer is constant."
#~ msgstr ""
#~ "在<xref linkend=\"interpretingmemory\" />中，我们讨论了一个保存顾客信息的"
#~ "内存里的数据结构。假设我们想要访问一个顾客的年龄，我们已经知道它是这个结构"
#~ "的第 8 个字节，还知道在某个寄存器里有这个结构的起始地址。我们可以使用基址"
#~ "寻址模式来访问它并指定该寄存器为基址指针，8 作为偏移。这很像索引寻址模式。"
#~ "区别在于基址寻址模式中的偏移是常量，指针存放在寄存器中，索引寻址模式中偏移"
#~ "在寄存器中，指针是常量。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "There are other forms of addressing, but these are the most important "
#~ "ones."
#~ msgstr "此外还有一些其他的寻址模式，不过最重要的就是这些了。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Review"
#~ msgstr "复习"

# type: Content of: <chapter><sect1><sect2><title>
#~ msgid "Know the Concepts"
#~ msgstr "理解概念"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "Describe the fetch-execute cycle."
#~ msgstr "描述抓取－执行周期"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What is a register? How would computation be more difficult without "
#~ "registers?"
#~ msgstr "什么是寄存器？没有寄存器的情况下，计算为什么会变得困难？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "How do you represent numbers larger than 255?"
#~ msgstr "如何表示一个大于255的数？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "How big are the registers on the machines we will be using?"
#~ msgstr "我们正在使用的计算机上的寄存器的大小是多少？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "How does a computer know how to interpret a given byte or set of bytes of "
#~ "memory?"
#~ msgstr "计算机如何知道怎样去解释给定的一个字节或者一组字节的内存内容？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "What are the addressing modes and what are they used for?"
#~ msgstr "什么是寻址模式？它们是用来做什么的？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "What does the instruction pointer do?"
#~ msgstr "指令指针是作什么用的？"

# type: Content of: <chapter><sect1><sect2><title>
#~ msgid "Use the Concepts"
#~ msgstr "运用概念"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What data would you use in an employee record? How would you lay it out "
#~ "in memory?"
#~ msgstr "在一个雇员的记录里，你会使用些什么数据？你如何在内存中放置它们？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "If I had the pointer to the beginning of the employee record above, and "
#~ "wanted to access a particular piece of data inside of it, what addressing "
#~ "mode would I use?"
#~ msgstr ""
#~ "如果我有雇员记录开始位置的指针，我想要去访问里面的一个特定数据，我应该用什"
#~ "么样的寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In base pointer addressing mode, if you have a register holding the value "
#~ "3122, and an offset of 20, what address would you be trying to access?"
#~ msgstr ""
#~ "在基址寻址模式中，如果你有一个寄存器，它的值为 3122，并且一个偏移为 20，那"
#~ "么你将要访问的地址会是多少？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 6512, the index "
#~ "register has a 5, and the multiplier is 4, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 6512，索引寄存器是 5，乘数是 4，你将会访问到"
#~ "什么地址？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 123472, the index "
#~ "register has a 0, and the multiplier is 4, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 123472，索引寄存器是 0，乘数是 4，你将会访问"
#~ "到什么地址？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "In indexed addressing mode, if the base address is 9123478, the index "
#~ "register has a 20, and the multiplier is 1, what address would you be "
#~ "trying to access?"
#~ msgstr ""
#~ "在索引寻址模式中，如果基址是 9123478，索引寄存器是 20，乘数是 1，你将会访"
#~ "问到什么地址？"

# type: Content of: <chapter><sect1><sect2><title>
#~ msgid "Going Further"
#~ msgstr "更上层楼"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "What are the minimum number of addressing modes needed for computation?"
#~ msgstr "计算需要至少多少种寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid "Why include addressing modes that aren't strictly needed?"
#~ msgstr "为什么需要一些不常用的寻址模式？"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "Research and then describe how pipelining (or one of the other "
#~ "complicating factors) affects the fetch-execute cycle."
#~ msgstr ""
#~ "研究并描述流水线（或者其他任意一个的复杂化因素）是怎样影响抓取－执行周期"
#~ "的。"

# type: Content of: <chapter><sect1><sect2><itemizedlist><listitem><para>
#~ msgid ""
#~ "Research and then describe the tradeoffs between fixed-length "
#~ "instructions and variable-length instructions."
#~ msgstr "研究并描述固定长度指令和变长指令各自的好坏。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Welcome to Programming"
#~ msgstr "欢迎来到编程世界"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>programming.  I enjoy the challenge to not only make a "
#~ "working program, but to do so with style.  Programming is like poetry.  "
#~ "It conveys a message, not only to the computer, but to those who modify "
#~ "and use your program.  With a program, you build your own world with your "
#~ "own rules.  You create your world according to your conception of both "
#~ "the problem and the solution.  Masterful programmers create worlds with "
#~ "programs that are clear and succinct, much like a poem or essay."
#~ msgstr ""
#~ "</indexterm>编程。我追求的不仅仅是解决问题，解决的方式还要够酷。我很喜欢这"
#~ "样做带来的挑战。编程就像写诗。它传递着信息，不仅仅给电脑，还给那些修改和使"
#~ "用程序的人们。利用一个程序，你可以用你自己的规则组建你自己的世界，根据你对"
#~ "你的问题和解决方案的理解来创建你的世界。老道的程序员使用简单和紧凑的程序来"
#~ "创建世界，很像是诗和散文。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "One of the greatest programmers, Donald Knuth, describes programming not "
#~ "as telling a computer how to do something, but telling a person how they "
#~ "would instruct a computer to do something.  The point is that programs "
#~ "are meant to be read by people, not just computers.  Your programs will "
#~ "be modified and updated by others long after you move on to other "
#~ "projects.  Thus, programming is not as much about communicating to a "
#~ "computer as it is communicating to those who come after you.  A "
#~ "programmer is a problem-solver, a poet, and an instructor all at once.  "
#~ "Your goal is to solve the problem at hand, doing so with balance and "
#~ "taste, and teach your solution to future programmers.  I hope that this "
#~ "book can teach at least some of the poetry and magic that makes computing "
#~ "exciting."
#~ msgstr ""
#~ "世界上最伟大的程序员之一，高德纳（Donald Knuth）说，编程不是告诉计算机怎样"
#~ "去做一件事情，而是告诉一个人他们是如何让计算机去做一件事情。他的观点是，程"
#~ "序是被人来读的，而不仅仅是计算机。当你离开一个项目而去做其它的项目很久以"
#~ "后，你的程序也许还将会被其他人修改和升级。因此，编程不仅仅是和计算机进行交"
#~ "流，而且还要和那些接你班的人进行交流。一个程序员，既是一个问题的解决者，也"
#~ "是一个诗人，还是一个讲师。你的目标是解决眼前的问题，考虑周全而风格独具，并"
#~ "且能让未来的程序员学会你的解决方案。我希望这本书至少可以教给读者一些让计算"
#~ "兴奋的诗和魔法。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Most introductory books on programming frustrate me to no end.  At the "
#~ "end of them you can still ask \"how does the computer really work?\" and "
#~ "not have a good answer.  They tend to pass over topics that are difficult "
#~ "even though they are important.  I will take you through the difficult "
#~ "issues because that is the only way to move on to masterful programming.  "
#~ "My goal is to take you from knowing nothing about programming to "
#~ "understanding how to think, write, and learn like a programmer.  You "
#~ "won't know everything, but you will have a background for how everything "
#~ "fits together.  At the end of this book, you should be able to do the "
#~ "following:"
#~ msgstr ""
#~ "大多数关于编程书籍让我感到非常沮丧。看完这些书，你恐怕仍然会问：“计算机到"
#~ "底是怎样工作的？”，而且得不到一个完美的答案。这些书通常会略过那些有难度的"
#~ "但是很重要的话题。我将会让你了解这些有难度的问题，因为他们才是通向大师级编"
#~ "程的唯一道路。我的目标是让你从对编程一无所知到理解如何像一个程序员那样去思"
#~ "考、编写和学习。你不用记住每件事情的细枝末节，但是你将从头到尾的掌握所有的"
#~ "相关背景。在看完这本书后，你应该能够做到以下的事情："

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Understand how a program works and interacts with other programs"
#~ msgstr "理解一个程序是如何工作的，以及如何和其它程序交流"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Read other people's programs and learn how they work"
#~ msgstr "阅读其他人的程序和了解它们如何工作"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Learn new programming languages quickly"
#~ msgstr "迅速掌握新的编程语言"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#~ msgid "Learn advanced concepts in computer science quickly"
#~ msgstr "迅速掌握计算机科学中的高级概念"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "I will not teach you everything.  Computer science is a massive field, "
#~ "especially when you combine the theory with the practice of computer "
#~ "programming.  However, I will attempt to get you started on the "
#~ "foundations so you can easily go wherever you want afterwards."
#~ msgstr ""
#~ "我不可能教会你每一件事情。计算机科学是一门研究领域广泛的学科，尤其是当你把"
#~ "理论和计算机编程实践结合在一起的时候。但是，我会尝试让你打好基础，这样你可"
#~ "以轻松去到以后你想要去的地方。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "There is somewhat of a chicken and egg problem in teaching programming, "
#~ "especially assembly language.  There is a lot to learn - it is almost too "
#~ "much to learn almost at all at once.  However, each piece depends on all "
#~ "the others, which makes learning it a piece at a time difficult.  "
#~ "Therefore, you must be patient with yourself and the computer while "
#~ "learning to program.  If you don't understand something the first time, "
#~ "reread it.  If you still don't understand it, it is sometimes best to "
#~ "take it by faith and come back to it later.  Often after more exposure to "
#~ "programming the ideas will make more sense.  Don't get discouraged.  It's "
#~ "a long climb, but very worthwhile."
#~ msgstr ""
#~ "在教编程，特别是教汇编语言编程的时候，存在着一个类似先有鸡还是先有蛋的问"
#~ "题。有很多东西需要学习－多到以至于不可能一下子全学到手，只能一次学一点。但"
#~ "是每一点知识却又要依靠其他所有的知识，这样就使得学习起来非常困难。因此当学"
#~ "习编程的时候，你必须对你和计算机有耐心。如果你第一次不能理解某个问题，那就"
#~ "把这个问题再读一遍。如果你还不能理解他，比较好的办法是记住这个结论，等以后"
#~ "再回来理解它。通常随着你编程经验的不断增加，这些问题就能自然而然的理解了。"
#~ "不要气馁，学习编程是一个漫长的攀登过程，但是却非常值得。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "At the end of each chapter are three sets of review exercises.  The first "
#~ "set is more or less regurgitation - they check to see if can you give "
#~ "back what you learned in the chapter.  The second set contains "
#~ "application questions - they check to see if you can apply what you "
#~ "learned to solve problems.  The final set is to see if you are capable of "
#~ "broadening your horizons.  Some of these questions may not be answerable "
#~ "until later in the book, but they give you some things to think about.  "
#~ "Other questions require some research into outside sources to discover "
#~ "the answer.  Still others require you to simply analyze your options and "
#~ "explain a best solution.  Many of the questions don't have right or wrong "
#~ "answers, but that doesn't mean they are unimportant.  Learning the issues "
#~ "involved in programming, learning how to research answers, and learning "
#~ "how to look ahead are all a major part of a programmer's work."
#~ msgstr ""
#~ "在每一章的末尾有三套复习练习题。第一套是复习题－用来检查你是否能够掌握本章"
#~ "学习的东西。第二套包含了应用问题－用来检查你是否能够学以致用。最后一套题用"
#~ "来检验你是否能够拓宽你的视野。其中的一些问题要等到看完后面的内容才能够回"
#~ "答，它们的目的是让你有可以思考的东西。其它的问题需要参考其他资料才能找到答"
#~ "案。还有一些问题要求你分析你面临的选择并得出一个最佳的答案。这些问题中的大"
#~ "部分都没有标准答案，但这并不意味着他们是不重要的。学习编程所包含的技能，学"
#~ "会怎样研究并得到答案还有学会怎样规划，这些都是一个程序员工作中的主要部分。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "If you have problems that you just can't get past, there is a mailing "
#~ "list for this book where readers can discuss and get help with what they "
#~ "are reading.  The address is <literal>pgubook-readers@nongnu.org</"
#~ "literal>.  This mailing list is open for any type of question or "
#~ "discussion along the lines of this book.  You can subscribe to this list "
#~ "by going to http://mail.nongnu.org/mailman/listinfo/pgubook-readers."
#~ msgstr ""
#~ "如果你有理解不了的问题，本书有一个的邮件列表，读者在阅读的时候可以在那里讨"
#~ "论和获得帮助。地址是<literal>pgubook-readers@nongnu.org</literal>。有关本"
#~ "书的任何问题都可以在这个邮件列表里进行讨论。你可以到下面这个地址订阅它"
#~ "http://mail.nongnu.org/mailman/listinfo/pgubook-readers 。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "If you are thinking of using this book for a class on computer "
#~ "programming but do not have access to Linux computers for your students, "
#~ "I highly suggest you try to find help from the K-12 Linux Project.  Their "
#~ "website is at http://www.k12linux.org/ and they have a helpful and "
#~ "responsive mailing list available."
#~ msgstr ""
#~ "如果你想用本书作为计算机编程的教材，但苦于不能为你的学生找到装有Linux的计"
#~ "算机，我强烈建议你向 K-12 Linux 项目寻求帮助。他们的网站是 http://www."
#~ "k12linux.org/ 。他们还有一个很有用的且反应及时的邮件列表。"

# type: Content of: <chapter><sect1><title>
#~ msgid "Your Tools"
#~ msgstr "你的工具"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "This book teaches assembly language for x86 processors and the GNU/Linux "
#~ "operating system.  Therefore we will be giving all of the examples using "
#~ "the GNU/Linux<indexterm>"
#~ msgstr ""
#~ "这本书将教授GNU/Linux操作系统上的x86处理器的汇编语言。所以书中所有的例子都"
#~ "要用GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "GNU/Linux"
#~ msgstr "GNU/Linux"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> standard GCC tool set.  If you are not familiar with GNU/"
#~ "Linux and the GCC tool set, they will be described shortly.  If you are "
#~ "new to Linux, you should check out the guide available at http://rute."
#~ "sourceforge.net/<footnote>"
#~ msgstr ""
#~ "</indexterm> 标准的GCC工具集来编译。如果你不熟悉 GNU/Linux 和 GCC 工具集，"
#~ "我马上将对它们进行介绍。如果你是个Linux新手，你应该看看http://rute."
#~ "sourceforge.net/ <footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "This is quite a large document.  You certainly don't need to know "
#~ "everything to get started with this book.  You simply need to know how to "
#~ "navigate from the command line and how to use an editor like "
#~ "<literal>pico</literal>, <literal>emacs</literal>, or <literal>vi</"
#~ "literal> (or others)."
#~ msgstr ""
#~ "这是一个很大的文档。为了学习本书你不必知道上面所有的东西。你只要知道怎样使"
#~ "用命令行和怎样使用文本编辑器，比如<literal>pico</literal>, "
#~ "<literal>emacs</literal>, 或者<literal>vi</literal> （或者其他编辑器）。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> What I intend to show you is more about programming in "
#~ "general than using a specific tool set on a specific platform, but "
#~ "standardizing on one makes the task much easier."
#~ msgstr ""
#~ "</footnote>上的指南。本书更多的着重于介绍如何编程，而不是在某一平台上使用"
#~ "某个特殊的工具集，不过专注于一个平台会使这个任务变的简单。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "Those new to Linux should also try to get involved in their local GNU/"
#~ "Linux User's Group.  User's Group members are usually very helpful for "
#~ "new people, and will help you from everything from installing Linux to "
#~ "learning to use it most efficiently.  A listing of GNU/Linux User's "
#~ "Groups is available at http://www.linux.org/groups/"
#~ msgstr ""
#~ "刚开始使用Linux的新手还应该尝试加入到本地的GNU/Linux用户组里。用户组的成员"
#~ "通常很乐意帮助新手，他们会教你所有的事情，从安装Linux到高效的使用Linux。这"
#~ "里有一个GNU/Linux用户组的列表 http://www.linux.org/groups/"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "All of these programs have been tested using <productname>Red Hat Linux "
#~ "8.0</productname>, and should work with any other GNU/Linux distribution, "
#~ "too.<footnote>"
#~ msgstr ""
#~ "本书里所有的程序都在<productname>Red Hat Linux 8.0</productname>上测试过，"
#~ "在其他的 GNU/Linux 发行版上也应该可以运行。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "By \"GNU/Linux distribution\", I mean an x86 GNU/Linux distribution.  GNU/"
#~ "Linux distributions for the Power Macintosh, the Alpha processor, or "
#~ "other processors will not work with this book."
#~ msgstr ""
#~ "“GNU/Linux 发行版”这里我指的是 x86 GNU/Linux 发行版。运行于苹果机、Alpha处"
#~ "理器和其他处理器上的GNU/Linux 发行版不适用于本书。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote> They will not work with non-Linux operating systems such as "
#~ "BSD or other systems.  However, all of the <emphasis>skills</emphasis> "
#~ "learned in this book should be easily transferable to any other system."
#~ msgstr ""
#~ "</footnote> 这些程序也不能运行于非 Linux 操作系统比如 BSD 或其他系统。但"
#~ "是，所有在本书中学到的<emphasis>技巧</emphasis>稍作变化之后在其他任何系统"
#~ "上也可以应用。"

# type: Content of: <chapter><sect1><para>
#~ msgid "If you do not have access to a GNU/Linux<indexterm>"
#~ msgstr "如果你无法接触到 GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> machine, you can look for a hosting provider who offers a "
#~ "Linux <emphasis>shell account</emphasis>, which is a command-line only "
#~ "interface to a Linux machine.  There are many low-cost shell account "
#~ "providers, but you have to make sure that they match the requirements "
#~ "above (i.e. - Linux on x86).  Someone at your local GNU/Linux User's "
#~ "Group may be able to give you one as well.  Shell accounts only require "
#~ "that you already have an Internet connection and a telnet program.  If "
#~ "you use <trademark class=\"registered\">Windows</trademark>, you already "
#~ "have a telnet client - just click on <literal>start</literal>, then "
#~ "<literal>run</literal>, then type in <literal>telnet</literal>.  However, "
#~ "it is usually better to download <productname>PuTTY</productname> from "
#~ "http://www.chiart.greenend.co.uk/~sgtatham/putty/ because Windows' telnet "
#~ "has some weird problems.  There are a lot of options for the Macintosh, "
#~ "too.  <productname>NiftyTelnet</productname> is my favorite."
#~ msgstr ""
#~ "</indexterm> 机器，你可以找一个 Linux <emphasis>shell 帐户</emphasis>提供"
#~ "商，这是一种以命令行界面登录 Linux 机器的方式。低成本的 shell 帐户提供商还"
#~ "是有很多的，但是你要保证他们可以满足前面的要求（也就是 x86 上的 Linux ）。"
#~ "你当地的 GNU/Linux 用户组的人或许也能够提供给你。要使用 Shell 帐户只要求你"
#~ "有互联网连接和一个 telnet 程序。如果你有 <trademark class=\"registered"
#~ "\">Windows</trademark>，那么你就已经有了一个 telnet 客户端——只需要点击 "
#~ "<literal>start</literal>，然后 <literal>run</literal>，然后输入 "
#~ "<literal>telnet</literal>。但是，最好还是从 http://www.chiart.greenend.co."
#~ "uk/~sgtatham/putty/ 下载 <productname>PuTTY</productname>，因为 Windows "
#~ "的 telnet 有一些很奇怪的问题。对于Mac机来说也有很多选择。"
#~ "<productname>NiftyTelnet</productname> 是我的最爱。"

# type: Content of: <chapter><sect1><para>
#~ msgid "If you don't have GNU/Linux<indexterm>"
#~ msgstr "如果你有没有 GNU/Linux <indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> and can't find a shell account service, then you can "
#~ "download <productname>Knoppix</productname> from http://www.knoppix.org/ "
#~ "Knoppix<indexterm>"
#~ msgstr ""
#~ "</indexterm> 而且找不到 shell 帐户服务，那么你可以从 http://www.knoppix."
#~ "org/ 下载 <productname>Knoppix</productname>。 Knoppix<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Knoppix"
#~ msgstr "Knoppix"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is a GNU/Linux distribution that boots from CD so that you "
#~ "don't have to actually install it.  Once you are done using it, you just "
#~ "reboot and remove the CD and you are back to your regular operating "
#~ "system."
#~ msgstr ""
#~ "</indexterm> 是一个从 CD 启动的 GNU/Linux 发行版，这样就可以免去了安装的麻"
#~ "烦。当你使用完了之后，你只需要重起并把 CD 取出就可以重新进入原来的系统。"

# type: Content of: <chapter><sect1><para>
#~ msgid "So what is GNU/Linux? GNU/Linux<indexterm>"
#~ msgstr "那么什么是 GNU/Linux? GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is an operating system modeled after <trademark class="
#~ "\"registered\">UNIX</trademark>.  The GNU part comes from the <ulink url="
#~ "\"http://www.gnu.org/\">GNU Project</ulink><footnote>"
#~ msgstr ""
#~ "</indexterm> 是依照 <trademark class=\"registered\">UNIX</trademark> 设计"
#~ "的一个操作系统。名字里的 GNU 来自于 <ulink url=\"http://www.gnu.org/"
#~ "\">GNU 项目</ulink><footnote>"

# type: Content of: <chapter><sect1><para><para>
#~ msgid ""
#~ "The GNU Project is a project by the Free Software Foundation to produce a "
#~ "complete, free operating system."
#~ msgstr ""
#~ "GNU 项目是自由软件基金会发起的一个项目，目的是创造一个完整的自由的操作系"
#~ "统。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</footnote>, which includes most of the programs you will run, including "
#~ "the GCC<indexterm>"
#~ msgstr ""
#~ "</footnote>，它包括了你将要运行的很多程序，包括我们编程时使用的 GCC "
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "GCC"
#~ msgstr "GCC"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> tool set that we will use to program with.  The GCC tool set "
#~ "contains all of the programs necessary to create programs in various "
#~ "computer languages."
#~ msgstr ""
#~ "</indexterm> 工具集。GCC 工具集包含了从多种计算机语言源文件创建程序所需要"
#~ "的所有工具。"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Linux"
#~ msgstr "Linux"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> is the core part of an operating system that keeps track of "
#~ "everything.  The kernel is both a fence and a gate.  As a gate, it allows "
#~ "programs to access hardware in a uniform way.  Without the kernel, you "
#~ "would have to write programs to deal with every device model ever made.  "
#~ "The kernel handles all device-specific interactions so you don't have "
#~ "to.  It also handles file access and interaction between processes.  For "
#~ "example, when you type, your typing goes through several programs before "
#~ "it hits your editor.  First, the kernel is what handles your hardware, so "
#~ "it is the first to receive notice about the keypress.  The keyboard sends "
#~ "in <emphasis>scancodes</emphasis> to the kernel, which then converts them "
#~ "to the actual letters, numbers, and symbols they represent.  If you are "
#~ "using a windowing system (like <trademark class=\"registered\">Microsoft "
#~ "Windows</trademark> or the X Window System), then the windowing system "
#~ "reads the keypress from the kernel, and delivers it to whatever program "
#~ "is currently in focus on the user's display."
#~ msgstr ""
#~ "</indexterm>是一个操作系统的核心部分，它管理着所有的资源。像一个门一样，它"
#~ "允许程序以一种统一的方式来访问硬件。没有内核，你需要自己写程序来和处理每一"
#~ "种型号的硬件。内核可以处理所有设备相关的交互，所以就不必你亲自来了。它也会"
#~ "处理所有的文件访问和进程间的通信。比如，当你打字的时候，你打的字在到达你的"
#~ "编辑器之前要经过好几个程序。首先，内核是处理的硬件的，所以它是第一个收到你"
#~ "的敲击键盘的讯号的。键盘把<emphasis>扫描码</emphasis>发送给内核，然后内核"
#~ "把它们转化成他们实际所代表的字母、数字和符号。如果你正使用一个窗口系统（比"
#~ "如 <trademark class=\"registered\">Microsoft Windows</trademark> 或者 X "
#~ "Window System），那么这个窗口系统会读到内核传过来的键盘敲击，然后把它传递"
#~ "给用户的显示器上的当前活动程序。"

# type: Content of: <chapter><sect1><example><title>
#~ msgid "How the computer processes keyboard sigals"
#~ msgstr "计算机怎样处理键盘信号"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> also controls the flow of information between programs.  The "
#~ "kernel is a program's gate to the world around it.  Every time that data "
#~ "moves between processes, the kernel controls the messaging.  In our "
#~ "keyboard example above, the kernel would have to be involved for the "
#~ "windowing system to communicate the keypress to the application program."
#~ msgstr ""
#~ "</indexterm>内核也控制着程序间信息的流动。内核是程序通往它以外的世界的大"
#~ "门。内核控制着进程间每一次数据的移动。在我们前面这个键盘的例子里，内核需要"
#~ "参与窗口系统向应用程序传递键盘敲击信号的过程。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "As a fence, the kernel prevents programs from accidentally overwriting "
#~ "each other's data and from accessing files and devices that they don't "
#~ "have permission to.  It limits the amount of damage a poorly-written "
#~ "program can do to other running programs."
#~ msgstr ""
#~ "像一道围墙一样，内核可以防止程序相互改写彼此的数据，还可以防止访问它们没有"
#~ "访问权限的文件和设备。它能把一个写的很差的程序对其他正在运行的程序所可能造"
#~ "成的损害程度降到最低。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm>.  Now, the kernel all by itself won't do anything.  You "
#~ "can't even boot up a computer with just a kernel.  Think of the kernel as "
#~ "the water pipes for a house.  Without the pipes, the faucets won't work, "
#~ "but the pipes are pretty useless if there are no faucets.  Together, the "
#~ "user applications (from the GNU project and other places) and the kernel "
#~ "(Linux) make up the entire operating system, GNU/Linux."
#~ msgstr ""
#~ "</indexterm>。现在，内核自己并不能做任何事情。只有内核你甚至不可以启动一台"
#~ "计算机。把内核想象成房间里的水管。没有水管，水龙头不能放出水来，但是没有水"
#~ "龙头的话，水管也是没有用的。用户程序（来自于GNU项目和其他地方）和内核"
#~ "（Linux），他们一起共同组成了整个操作系统——GNU/Linux。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "For the most part, this book will be using the computer's low-level "
#~ "assembly language.  There are essentially three kinds of languages: "
#~ "<indexterm>"
#~ msgstr ""
#~ "本书绝大部分程序将使用计算机底层的汇编语言。本质上有三种计算机语言："
#~ "<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "machine language"
#~ msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#~ msgid "Machine Language"
#~ msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "This is what the computer actually sees and deals with.  Every command "
#~ "the computer sees is given as a number or sequence of numbers."
#~ msgstr ""
#~ "这是计算机实际看到和处理的语言。计算机看到的每一个命令都是一个数字或一串数"
#~ "字。"

# type: Content of: <chapter><sect1><para><primary>
#~ msgid "Assembly Language"
#~ msgstr "汇编语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "This is the same as machine language, except the command numbers have "
#~ "been replaced by letter sequences which are easier to memorize.  Other "
#~ "small things are done to make it easier as well."
#~ msgstr ""
#~ "这和机器语言是一样的，只不过更容易记忆的字母序列代替了数字。此外汇编语言还"
#~ "有一些其他的特点，使得利用它来编程比利用机器语言容易一些。"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#~ msgid "high-level languages"
#~ msgstr "高级语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#~ msgid ""
#~ "High-level languages are there to make programming easier.  Assembly "
#~ "language requires you to work with the machine itself.  High-level "
#~ "languages allow you to describe the program in a more natural language.  "
#~ "A single command in a high-level language usually is equivalent to "
#~ "several commands in an assembly language."
#~ msgstr ""
#~ "高级语言是为了是编程变得更加容易。汇编语言要求你直接跟机器打交道。高级语言"
#~ "允许你用更加自然的语言描述程序。高级语言中的一个命令通常等于汇编语言中的几"
#~ "个命令。"

# type: Content of: <chapter><sect1><para>
#~ msgid ""
#~ "</indexterm> In this book we will learn assembly language, although we "
#~ "will cover a bit of high-level languages.  Hopefully by learning assembly "
#~ "language, your understanding of how programming and computers work will "
#~ "put you a step ahead."
#~ msgstr ""
#~ "</indexterm>在这本书里我们将主要学习汇编语言，也有一些高级语言的例子。希望"
#~ "通过学习汇编语言，能够让你加深对程序和计算机工作机制的理解。"
