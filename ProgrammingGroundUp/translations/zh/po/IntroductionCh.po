# pgubook, IntroductionCh.xml
# Copyright (C) 2006 Zhang Le
# Zhang Le <robert.zhangle@gmail.com>, 2006.
msgid ""
msgstr ""
"Project-Id-Version: pbubook\n"
"POT-Creation-Date: 2006-05-15 16:02+0800\n"
"PO-Revision-Date: 2006-07-29 16:24+0800\n"
"Last-Translator: Zhang Le <robert.zhangle@gmail.com>\n"
"Language-Team: zh_CN <robert.zhangle@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Pootle 0.10beta3\n"

# type: Content of: <chapter><title>
#: ../../IntroductionCh.xml:2
#, no-wrap
msgid "Introduction"
msgstr "介绍"

# type: Content of: <chapter><sect1><title>
#: ../../IntroductionCh.xml:16
#, no-wrap
msgid "Welcome to Programming"
msgstr "欢迎来到编程世界"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:19
msgid "I love <indexterm>"
msgstr "我爱 <indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:20
#, no-wrap
msgid "programming"
msgstr "编程"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:20
msgid ""
"</indexterm>programming.  I enjoy the challenge to not only make a working "
"program, but to do so with style.  Programming is like poetry.  It conveys a "
"message, not only to the computer, but to those who modify and use your "
"program.  With a program, you build your own world with your own rules.  You "
"create your world according to your conception of both the problem and the "
"solution.  Masterful programmers create worlds with programs that are clear "
"and succinct, much like a poem or essay."
msgstr "</indexterm>编程。我追求的不仅仅是解决问题，解决的方式还要够酷。我很喜欢这样做带来的挑战。编程就像写诗。它传递着信息，不仅仅给电脑，还给那些修改和使用程序的人们。利用一个程序，你可以用你自己的规则组建你自己的世界，根据你对你的问题和解决方案的理解来创建你的世界。老道的程序员使用简单和紧凑的程序来创建世界，很像是诗和散文。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:30
msgid ""
"One of the greatest programmers, Donald Knuth, describes programming not as "
"telling a computer how to do something, but telling a person how they would "
"instruct a computer to do something.  The point is that programs are meant "
"to be read by people, not just computers.  Your programs will be modified "
"and updated by others long after you move on to other projects.  Thus, "
"programming is not as much about communicating to a computer as it is "
"communicating to those who come after you.  A programmer is a "
"problem-solver, a poet, and an instructor all at once.  Your goal is to "
"solve the problem at hand, doing so with balance and taste, and teach your "
"solution to future programmers.  I hope that this book can teach at least "
"some of the poetry and magic that makes computing exciting."
msgstr "世界上最伟大的程序员之一，高德纳（Donald Knuth）说，编程不是告诉计算机怎样去做一件事情，而是告诉一个人他们是如何让计算机去做一件事情。他的观点是，程序是被人来读的，而不仅仅是计算机。当你离开一个项目而去做其它的项目很久以后，你的程序也许还将会被其他人修改和升级。因此，编程不仅仅是和计算机进行交流，而且还要和那些接你班的人进行交流。一个程序员，既是一个问题的解决者，也是一个诗人，还是一个讲师。你的目标是解决眼前的问题，考虑周全而风格独具，并且能让未来的程序员学会你的解决方案。我希望这本书至少可以教给读者一些让计算兴奋的诗和魔法。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:45
msgid ""
"Most introductory books on programming frustrate me to no end.  At the end "
"of them you can still ask \"how does the computer really work?\" and not "
"have a good answer.  They tend to pass over topics that are difficult even "
"though they are important.  I will take you through the difficult issues "
"because that is the only way to move on to masterful programming.  My goal "
"is to take you from knowing nothing about programming to understanding how "
"to think, write, and learn like a programmer.  You won't know everything, "
"but you will have a background for how everything fits together.  At the end "
"of this book, you should be able to do the following:"
msgstr "大多数关于编程书籍让我感到非常沮丧。看完这些书，你恐怕仍然会问：“计算机到底是怎样工作的？”，而且得不到一个完美的答案。这些书通常会略过那些有难度的但是很重要的话题。我将会让你了解这些有难度的问题，因为他们才是通向大师级编程的唯一道路。我的目标是让你从对编程一无所知到理解如何像一个程序员那样去思考、编写和学习。你不用记住每件事情的细枝末节，但是你将从头到尾的掌握所有的相关背景。在看完这本书后，你应该能够做到以下的事情："

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../IntroductionCh.xml:59
msgid "Understand how a program works and interacts with other programs"
msgstr "理解一个程序是如何工作的，以及如何和其它程序交流"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../IntroductionCh.xml:60
msgid "Read other people's programs and learn how they work"
msgstr "阅读其他人的程序和了解它们如何工作"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../IntroductionCh.xml:61
msgid "Learn new programming languages quickly"
msgstr "迅速掌握新的编程语言"

# type: Content of: <chapter><sect1><itemizedlist><listitem><para>
#: ../../IntroductionCh.xml:62
msgid "Learn advanced concepts in computer science quickly"
msgstr "迅速掌握计算机科学中的高级概念"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:67
msgid ""
"I will not teach you everything.  Computer science is a massive field, "
"especially when you combine the theory with the practice of computer "
"programming.  However, I will attempt to get you started on the foundations "
"so you can easily go wherever you want afterwards."
msgstr "我不可能教会你每一件事情。计算机科学是一门研究领域广泛的学科，尤其是当你把理论和计算机编程实践结合在一起的时候。但是，我会尝试让你打好基础，这样你可以轻松去到以后你想要去的地方。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:74
msgid ""
"There is somewhat of a chicken and egg problem in teaching programming, "
"especially assembly language.  There is a lot to learn - it is almost too "
"much to learn almost at all at once.  However, each piece depends on all the "
"others, which makes learning it a piece at a time difficult.  Therefore, you "
"must be patient with yourself and the computer while learning to program.  "
"If you don't understand something the first time, reread it.  If you still "
"don't understand it, it is sometimes best to take it by faith and come back "
"to it later.  Often after more exposure to programming the ideas will make "
"more sense.  Don't get discouraged.  It's a long climb, but very worthwhile."
msgstr "在教编程，特别是教汇编语言编程的时候，存在着一个类似先有鸡还是先有蛋的问题。有很多东西需要学习－多到以至于不可能一下子全学到手，只能一次学一点。但是每一点知识却又要依靠其他所有的知识，这样就使得学习起来非常困难。因此当学习编程的时候，你必须对你和计算机有耐心。如果你第一次不能理解某个问题，那就把这个问题再读一遍。如果你还不能理解他，比较好的办法是记住这个结论，等以后再回来理解它。通常随着你编程经验的不断增加，这些问题就能自然而然的理解了。不要气馁，学习编程是一个漫长的攀登过程，但是却非常值得。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:87
msgid ""
"At the end of each chapter are three sets of review exercises.  The first "
"set is more or less regurgitation - they check to see if can you give back "
"what you learned in the chapter.  The second set contains application "
"questions - they check to see if you can apply what you learned to solve "
"problems.  The final set is to see if you are capable of broadening your "
"horizons.  Some of these questions may not be answerable until later in the "
"book, but they give you some things to think about.  Other questions require "
"some research into outside sources to discover the answer.  Still others "
"require you to simply analyze your options and explain a best solution.  "
"Many of the questions don't have right or wrong answers, but that doesn't "
"mean they are unimportant.  Learning the issues involved in programming, "
"learning how to research answers, and learning how to look ahead are all a "
"major part of a programmer's work."
msgstr "在每一章的末尾有三套复习练习题。第一套是复习题－用来检查你是否能够掌握本章学习的东西。第二套包含了应用问题－用来检查你是否能够学以致用。最后一套题用来检验你是否能够拓宽你的视野。其中的一些问题要等到看完后面的内容才能够回答，它们的目的是让你有可以思考的东西。其它的问题需要参考其他资料才能找到答案。还有一些问题要求你分析你面临的选择并得出一个最佳的答案。这些问题中的大部分都没有标准答案，但这并不意味着他们是不重要的。学习编程所包含的技能，学会怎样研究并得到答案还有学会怎样规划，这些都是一个程序员工作中的主要部分。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:103
msgid ""
"If you have problems that you just can't get past, there is a mailing list "
"for this book where readers can discuss and get help with what they are "
"reading.  The address is <literal>pgubook-readers@nongnu.org</literal>.  "
"This mailing list is open for any type of question or discussion along the "
"lines of this book.  You can subscribe to this list by going to "
"http://mail.nongnu.org/mailman/listinfo/pgubook-readers."
msgstr "如果你有理解不了的问题，本书有一个的邮件列表，读者在阅读的时候可以在那里讨论和获得帮助。地址是<literal>pgubook-readers@nongnu.org</literal>。有关本书的任何问题都可以在这个邮件列表里进行讨论。你可以到下面这个地址订阅它http://mail.nongnu.org/mailman/listinfo/pgubook-readers 。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:111
msgid ""
"If you are thinking of using this book for a class on computer programming "
"but do not have access to Linux computers for your students, I highly "
"suggest you try to find help from the K-12 Linux Project.  Their website is "
"at http://www.k12linux.org/ and they have a helpful and responsive mailing "
"list available."
msgstr "如果你想用本书作为计算机编程的教材，但苦于不能为你的学生找到装有Linux的计算机，我强烈建议你向 K-12 Linux 项目寻求帮助。他们的网站是 http://www.k12linux.org/ 。他们还有一个很有用的且反应及时的邮件列表。"

# type: Content of: <chapter><sect1><title>
#: ../../IntroductionCh.xml:120
#, no-wrap
msgid "Your Tools"
msgstr "你的工具"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:123
msgid ""
"This book teaches assembly language for x86 processors and the GNU/Linux "
"operating system.  Therefore we will be giving all of the examples using the "
"GNU/Linux<indexterm>"
msgstr "这本书将教授GNU/Linux操作系统上的x86处理器的汇编语言。所以书中所有的例子都要用GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:125 ../../IntroductionCh.xml:161 ../../IntroductionCh.xml:181 ../../IntroductionCh.xml:191
#, no-wrap
msgid "GNU/Linux"
msgstr "GNU/Linux"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:125
msgid ""
"</indexterm> standard GCC tool set.  If you are not familiar with GNU/Linux "
"and the GCC tool set, they will be described shortly.  If you are new to "
"Linux, you should check out the guide available at "
"http://rute.sourceforge.net/<footnote>"
msgstr "</indexterm> 标准的GCC工具集来编译。如果你不熟悉 GNU/Linux 和 GCC 工具集，我马上将对它们进行介绍。如果你是个Linux新手，你应该看看http://rute.sourceforge.net/ <footnote>"

# type: Content of: <chapter><sect1><para><para>
#: ../../IntroductionCh.xml:129
msgid ""
"This is quite a large document.  You certainly don't need to know everything "
"to get started with this book.  You simply need to know how to navigate from "
"the command line and how to use an editor like <literal>pico</literal>, "
"<literal>emacs</literal>, or <literal>vi</literal> (or others)."
msgstr "这是一个很大的文档。为了学习本书你不必知道上面所有的东西。你只要知道怎样使用命令行和怎样使用文本编辑器，比如<literal>pico</literal>, <literal>emacs</literal>, 或者<literal>vi</literal> （或者其他编辑器）。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:134
msgid ""
"</footnote> What I intend to show you is more about programming in general "
"than using a specific tool set on a specific platform, but standardizing on "
"one makes the task much easier."
msgstr "</footnote>上的指南。本书更多的着重于介绍如何编程，而不是在某一平台上使用某个特殊的工具集，不过专注于一个平台会使这个任务变的简单。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:141
msgid ""
"Those new to Linux should also try to get involved in their local GNU/Linux "
"User's Group.  User's Group members are usually very helpful for new people, "
"and will help you from everything from installing Linux to learning to use "
"it most efficiently.  A listing of GNU/Linux User's Groups is available at "
"http://www.linux.org/groups/"
msgstr "刚开始使用Linux的新手还应该尝试加入到本地的GNU/Linux用户组里。用户组的成员通常很乐意帮助新手，他们会教你所有的事情，从安装Linux到高效的使用Linux。这里有一个GNU/Linux用户组的列表 http://www.linux.org/groups/"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:149
msgid ""
"All of these programs have been tested using <productname>Red Hat Linux "
"8.0</productname>, and should work with any other GNU/Linux distribution, "
"too.<footnote>"
msgstr "本书里所有的程序都在<productname>Red Hat Linux 8.0</productname>上测试过，在其他的 GNU/Linux 发行版上也应该可以运行。<footnote>"

# type: Content of: <chapter><sect1><para><para>
#: ../../IntroductionCh.xml:151
msgid ""
"By \"GNU/Linux distribution\", I mean an x86 GNU/Linux distribution.  "
"GNU/Linux distributions for the Power Macintosh, the Alpha processor, or "
"other processors will not work with this book."
msgstr "“GNU/Linux 发行版”这里我指的是 x86 GNU/Linux 发行版。运行于苹果机、Alpha处理器和其他处理器上的GNU/Linux 发行版不适用于本书。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:154
msgid ""
"</footnote> They will not work with non-Linux operating systems such as BSD "
"or other systems.  However, all of the <emphasis>skills</emphasis> learned "
"in this book should be easily transferable to any other system."
msgstr "</footnote> 这些程序也不能运行于非 Linux 操作系统比如 BSD 或其他系统。但是，所有在本书中学到的<emphasis>技巧</emphasis>稍作变化之后在其他任何系统上也可以应用。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:161
msgid "If you do not have access to a GNU/Linux<indexterm>"
msgstr "如果你无法接触到 GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:161
msgid ""
"</indexterm> machine, you can look for a hosting provider who offers a Linux "
"<emphasis>shell account</emphasis>, which is a command-line only interface "
"to a Linux machine.  There are many low-cost shell account providers, but "
"you have to make sure that they match the requirements above (i.e. - Linux "
"on x86).  Someone at your local GNU/Linux User's Group may be able to give "
"you one as well.  Shell accounts only require that you already have an "
"Internet connection and a telnet program.  If you use <trademark "
"class=\"registered\">Windows</trademark>, you already have a telnet client - "
"just click on <literal>start</literal>, then <literal>run</literal>, then "
"type in <literal>telnet</literal>.  However, it is usually better to "
"download <productname>PuTTY</productname> from "
"http://www.chiart.greenend.co.uk/~sgtatham/putty/ because Windows' telnet "
"has some weird problems.  There are a lot of options for the Macintosh, "
"too.  <productname>NiftyTelnet</productname> is my favorite."
msgstr "</indexterm> 机器，你可以找一个 Linux <emphasis>shell 帐户</emphasis>提供商，这是一种以命令行界面登录 Linux 机器的方式。低成本的 shell 帐户提供商还是有很多的，但是你要保证他们可以满足前面的要求（也就是 x86 上的 Linux ）。你当地的 GNU/Linux 用户组的人或许也能够提供给你。要使用 Shell 帐户只要求你有互联网连接和一个 telnet 程序。如果你有 <trademark class=\"registered\">Windows</trademark>，那么你就已经有了一个 telnet 客户端——只需要点击 <literal>start</literal>，然后 <literal>run</literal>，然后输入 <literal>telnet</literal>。但是，最好还是从 http://www.chiart.greenend.co.uk/~sgtatham/putty/ 下载 <productname>PuTTY</productname>，因为 Windows 的 telnet 有一些很奇怪的问题。对于Mac机来说也有很多选择。<productname>NiftyTelnet</productname> 是我的最爱。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:181
msgid "If you don't have GNU/Linux<indexterm>"
msgstr "如果你有没有 GNU/Linux <indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:181
msgid ""
"</indexterm> and can't find a shell account service, then you can download "
"<productname>Knoppix</productname> from http://www.knoppix.org/ "
"Knoppix<indexterm>"
msgstr "</indexterm> 而且找不到 shell 帐户服务，那么你可以从 http://www.knoppix.org/ 下载 <productname>Knoppix</productname>。 Knoppix<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:184
#, no-wrap
msgid "Knoppix"
msgstr "Knoppix"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:184
msgid ""
"</indexterm> is a GNU/Linux distribution that boots from CD so that you "
"don't have to actually install it.  Once you are done using it, you just "
"reboot and remove the CD and you are back to your regular operating system."
msgstr "</indexterm> 是一个从 CD 启动的 GNU/Linux 发行版，这样就可以免去了安装的麻烦。当你使用完了之后，你只需要重起并把 CD 取出就可以重新进入原来的系统。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:191
msgid "So what is GNU/Linux? GNU/Linux<indexterm>"
msgstr "那么什么是 GNU/Linux? GNU/Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:191
msgid ""
"</indexterm> is an operating system modeled after <trademark "
"class=\"registered\">UNIX</trademark>.  The GNU part comes from the <ulink "
"url=\"http://www.gnu.org/\">GNU Project</ulink><footnote>"
msgstr "</indexterm> 是依照 <trademark class=\"registered\">UNIX</trademark> 设计的一个操作系统。名字里的 GNU 来自于 <ulink url=\"http://www.gnu.org/\">GNU 项目</ulink><footnote>"

# type: Content of: <chapter><sect1><para><para>
#: ../../IntroductionCh.xml:193
msgid ""
"The GNU Project is a project by the Free Software Foundation to produce a "
"complete, free operating system."
msgstr "GNU 项目是自由软件基金会发起的一个项目，目的是创造一个完整的自由的操作系统。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:195
msgid ""
"</footnote>, which includes most of the programs you will run, including the "
"GCC<indexterm>"
msgstr "</footnote>，它包括了你将要运行的很多程序，包括我们编程时使用的 GCC <indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:197
#, no-wrap
msgid "GCC"
msgstr "GCC"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:197
msgid ""
"</indexterm> tool set that we will use to program with.  The GCC tool set "
"contains all of the programs necessary to create programs in various "
"computer languages."
msgstr "</indexterm> 工具集。GCC 工具集包含了从多种计算机语言源文件创建程序所需要的所有工具。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:204
msgid "Linux<indexterm>"
msgstr "Linux<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:204 ../../IntroductionCh.xml:248
#, no-wrap
msgid "Linux"
msgstr "Linux"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:204
msgid ""
"</indexterm> is the name of the <emphasis>kernel</emphasis>.  The "
"kernel<indexterm>"
msgstr "</indexterm> 是<emphasis>内核</emphasis>的名字。内核<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:205 ../../IntroductionCh.xml:231 ../../IntroductionCh.xml:247
#, no-wrap
msgid "kernel"
msgstr "内核"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:205
msgid ""
"</indexterm> is the core part of an operating system that keeps track of "
"everything.  The kernel is both a fence and a gate.  As a gate, it allows "
"programs to access hardware in a uniform way.  Without the kernel, you would "
"have to write programs to deal with every device model ever made.  The "
"kernel handles all device-specific interactions so you don't have to.  It "
"also handles file access and interaction between processes.  For example, "
"when you type, your typing goes through several programs before it hits your "
"editor.  First, the kernel is what handles your hardware, so it is the first "
"to receive notice about the keypress.  The keyboard sends in "
"<emphasis>scancodes</emphasis> to the kernel, which then converts them to "
"the actual letters, numbers, and symbols they represent.  If you are using a "
"windowing system (like <trademark class=\"registered\">Microsoft "
"Windows</trademark> or the X Window System), then the windowing system reads "
"the keypress from the kernel, and delivers it to whatever program is "
"currently in focus on the user's display."
msgstr "</indexterm>是一个操作系统的核心部分，它管理着所有的资源。像一个门一样，它允许程序以一种统一的方式来访问硬件。没有内核，你需要自己写程序来和处理每一种型号的硬件。内核可以处理所有设备相关的交互，所以就不必你亲自来了。它也会处理所有的文件访问和进程间的通信。比如，当你打字的时候，你打的字在到达你的编辑器之前要经过好几个程序。首先，内核是处理的硬件的，所以它是第一个收到你的敲击键盘的讯号的。键盘把<emphasis>扫描码</emphasis>发送给内核，然后内核把它们转化成他们实际所代表的字母、数字和符号。如果你正使用一个窗口系统（比如 <trademark class=\"registered\">Microsoft Windows</trademark> 或者 X Window System），那么这个窗口系统会读到内核传过来的键盘敲击，然后把它传递给用户的显示器上的当前活动程序。"

# type: Content of: <chapter><sect1><example><title>
#: ../../IntroductionCh.xml:224
#, no-wrap
msgid "How the computer processes keyboard sigals"
msgstr "计算机怎样处理键盘信号"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:231
msgid "The kernel<indexterm>"
msgstr "内核<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:231
msgid ""
"</indexterm> also controls the flow of information between programs.  The "
"kernel is a program's gate to the world around it.  Every time that data "
"moves between processes, the kernel controls the messaging.  In our keyboard "
"example above, the kernel would have to be involved for the windowing system "
"to communicate the keypress to the application program."
msgstr "</indexterm>内核也控制着程序间信息的流动。内核是程序通往它以外的世界的大门。内核控制着进程间每一次数据的移动。在我们前面这个键盘的例子里，内核需要参与窗口系统向应用程序传递键盘敲击信号的过程。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:239
msgid ""
"As a fence, the kernel prevents programs from accidentally overwriting each "
"other's data and from accessing files and devices that they don't have "
"permission to.  It limits the amount of damage a poorly-written program can "
"do to other running programs."
msgstr "像一道围墙一样，内核可以防止程序相互改写彼此的数据，还可以防止访问它们没有访问权限的文件和设备。它能把一个写的很差的程序对其他正在运行的程序所可能造成的损害程度降到最低。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:247
msgid "In our case, the kernel<indexterm>"
msgstr "在我们的例子里，内核<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:247
msgid "</indexterm> is Linux<indexterm>"
msgstr "</indexterm>是 Linux<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:248
msgid ""
"</indexterm>.  Now, the kernel all by itself won't do anything.  You can't "
"even boot up a computer with just a kernel.  Think of the kernel as the "
"water pipes for a house.  Without the pipes, the faucets won't work, but the "
"pipes are pretty useless if there are no faucets.  Together, the user "
"applications (from the GNU project and other places) and the kernel (Linux) "
"make up the entire operating system, GNU/Linux."
msgstr "</indexterm>。现在，内核自己并不能做任何事情。只有内核你甚至不可以启动一台计算机。把内核想象成房间里的水管。没有水管，水龙头不能放出水来，但是没有水龙头的话，水管也是没有用的。用户程序（来自于GNU项目和其他地方）和内核（Linux），他们一起共同组成了整个操作系统——GNU/Linux。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:258
msgid ""
"For the most part, this book will be using the computer's low-level assembly "
"language.  There are essentially three kinds of languages: <indexterm>"
msgstr "本书绝大部分程序将使用计算机底层的汇编语言。本质上有三种计算机语言：<indexterm>"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:261
#, no-wrap
msgid "machine language"
msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../IntroductionCh.xml:261 ../../IntroductionCh.xml:285
#, no-wrap
msgid "</indexterm>"
msgstr "</indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../IntroductionCh.xml:267
#, , no-wrap
msgid "Machine Language"
msgstr "机器语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../IntroductionCh.xml:269
msgid ""
"This is what the computer actually sees and deals with.  Every command the "
"computer sees is given as a number or sequence of numbers."
msgstr "这是计算机实际看到和处理的语言。计算机看到的每一个命令都是一个数字或一串数字。"

# type: Content of: <chapter><sect1><para><primary>
#: ../../IntroductionCh.xml:276 ../../IntroductionCh.xml:298
#, , no-wrap
msgid "Assembly Language"
msgstr "汇编语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../IntroductionCh.xml:278
msgid ""
"This is the same as machine language, except the command numbers have been "
"replaced by letter sequences which are easier to memorize.  Other small "
"things are done to make it easier as well."
msgstr "这和机器语言是一样的，只不过更容易记忆的字母序列代替了数字。此外汇编语言还有一些其他的特点，使得利用它来编程比利用机器语言容易一些。"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term>
#: ../../IntroductionCh.xml:285
#, , no-wrap
msgid "High-Level Language<indexterm>"
msgstr "高级语言<indexterm>"

# type: Content of: <chapter><sect1><variablelist><varlistentry><term><primary>
#: ../../IntroductionCh.xml:285
#, , no-wrap
msgid "high-level languages"
msgstr "高级语言"

# type: Content of: <chapter><sect1><variablelist><varlistentry><listitem><para>
#: ../../IntroductionCh.xml:287
msgid ""
"High-level languages are there to make programming easier.  Assembly "
"language requires you to work with the machine itself.  High-level languages "
"allow you to describe the program in a more natural language.  A single "
"command in a high-level language usually is equivalent to several commands "
"in an assembly language."
msgstr "高级语言是为了是编程变得更加容易。汇编语言要求你直接跟机器打交道。高级语言允许你用更加自然的语言描述程序。高级语言中的一个命令通常等于汇编语言中的几个命令。"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:298
msgid "<indexterm>"
msgstr "<indexterm>"

# type: Content of: <chapter><sect1><para>
#: ../../IntroductionCh.xml:298
msgid ""
"</indexterm> In this book we will learn assembly language, although we will "
"cover a bit of high-level languages.  Hopefully by learning assembly "
"language, your understanding of how programming and computers work will put "
"you a step ahead."
msgstr "</indexterm>在这本书里我们将主要学习汇编语言，也有一些高级语言的例子。希望通过学习汇编语言，能够让你加深对程序和计算机工作机制的理解。"
